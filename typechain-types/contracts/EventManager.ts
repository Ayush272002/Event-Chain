/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface EventManagerInterface extends utils.Interface {
  functions: {
    "approveTicket(uint256,address,bool)": FunctionFragment;
    "buyTicket(uint256)": FunctionFragment;
    "centsToFlare(uint256)": FunctionFragment;
    "createEvent(string,string,uint256,uint256,uint256,string[])": FunctionFragment;
    "eventCounter()": FunctionFragment;
    "events(uint256)": FunctionFragment;
    "getEventImages(uint256)": FunctionFragment;
    "getEventPriceFlare(uint256)": FunctionFragment;
    "getEventTickets(uint256)": FunctionFragment;
    "power(uint256,int8)": FunctionFragment;
    "ticketCounter()": FunctionFragment;
    "tickets(uint256)": FunctionFragment;
    "transferTicket(uint256,address)": FunctionFragment;
    "userTickets(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approveTicket"
      | "buyTicket"
      | "centsToFlare"
      | "createEvent"
      | "eventCounter"
      | "events"
      | "getEventImages"
      | "getEventPriceFlare"
      | "getEventTickets"
      | "power"
      | "ticketCounter"
      | "tickets"
      | "transferTicket"
      | "userTickets"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveTicket",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTicket",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "centsToFlare",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createEvent",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "eventCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "events",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEventImages",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEventPriceFlare",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEventTickets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "power",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tickets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTicket",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userTickets",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "centsToFlare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "events", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEventImages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEventPriceFlare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEventTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "power", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ticketCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tickets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTickets",
    data: BytesLike
  ): Result;

  events: {};
}

export interface EventManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EventManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveTicket(
      _ticketId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyTicket(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    centsToFlare(
      _cents: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _flr: BigNumber }>;

    createEvent(
      _name: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _capacity: PromiseOrValue<BigNumberish>,
      _ticketPrice: PromiseOrValue<BigNumberish>,
      _eventDate: PromiseOrValue<BigNumberish>,
      _images: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    eventCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    events(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        name: string;
        description: string;
        capacity: BigNumber;
        ticketsSold: BigNumber;
        ticketPrice: BigNumber;
        eventDate: BigNumber;
        eventHost: string;
      }
    >;

    getEventImages(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getEventPriceFlare(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _flr: BigNumber }>;

    getEventTickets(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    power(
      base: PromiseOrValue<BigNumberish>,
      exponent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ticketCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    tickets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        holder: string;
        boughtTime: BigNumber;
        eventId: BigNumber;
      }
    >;

    transferTicket(
      _ticketId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userTickets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  approveTicket(
    _ticketId: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _allowed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyTicket(
    _eventId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  centsToFlare(
    _cents: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createEvent(
    _name: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    _capacity: PromiseOrValue<BigNumberish>,
    _ticketPrice: PromiseOrValue<BigNumberish>,
    _eventDate: PromiseOrValue<BigNumberish>,
    _images: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  eventCounter(overrides?: CallOverrides): Promise<BigNumber>;

  events(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      name: string;
      description: string;
      capacity: BigNumber;
      ticketsSold: BigNumber;
      ticketPrice: BigNumber;
      eventDate: BigNumber;
      eventHost: string;
    }
  >;

  getEventImages(
    _eventId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getEventPriceFlare(
    _eventId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEventTickets(
    _eventId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  power(
    base: PromiseOrValue<BigNumberish>,
    exponent: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ticketCounter(overrides?: CallOverrides): Promise<BigNumber>;

  tickets(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      holder: string;
      boughtTime: BigNumber;
      eventId: BigNumber;
    }
  >;

  transferTicket(
    _ticketId: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userTickets(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    approveTicket(
      _ticketId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _allowed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyTicket(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    centsToFlare(
      _cents: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createEvent(
      _name: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _capacity: PromiseOrValue<BigNumberish>,
      _ticketPrice: PromiseOrValue<BigNumberish>,
      _eventDate: PromiseOrValue<BigNumberish>,
      _images: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    eventCounter(overrides?: CallOverrides): Promise<BigNumber>;

    events(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        name: string;
        description: string;
        capacity: BigNumber;
        ticketsSold: BigNumber;
        ticketPrice: BigNumber;
        eventDate: BigNumber;
        eventHost: string;
      }
    >;

    getEventImages(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getEventPriceFlare(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEventTickets(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    power(
      base: PromiseOrValue<BigNumberish>,
      exponent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticketCounter(overrides?: CallOverrides): Promise<BigNumber>;

    tickets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        holder: string;
        boughtTime: BigNumber;
        eventId: BigNumber;
      }
    >;

    transferTicket(
      _ticketId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userTickets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    approveTicket(
      _ticketId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyTicket(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    centsToFlare(
      _cents: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createEvent(
      _name: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _capacity: PromiseOrValue<BigNumberish>,
      _ticketPrice: PromiseOrValue<BigNumberish>,
      _eventDate: PromiseOrValue<BigNumberish>,
      _images: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    eventCounter(overrides?: CallOverrides): Promise<BigNumber>;

    events(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEventImages(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEventPriceFlare(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEventTickets(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    power(
      base: PromiseOrValue<BigNumberish>,
      exponent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticketCounter(overrides?: CallOverrides): Promise<BigNumber>;

    tickets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferTicket(
      _ticketId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userTickets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveTicket(
      _ticketId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyTicket(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    centsToFlare(
      _cents: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createEvent(
      _name: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _capacity: PromiseOrValue<BigNumberish>,
      _ticketPrice: PromiseOrValue<BigNumberish>,
      _eventDate: PromiseOrValue<BigNumberish>,
      _images: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    eventCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    events(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEventImages(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEventPriceFlare(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEventTickets(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    power(
      base: PromiseOrValue<BigNumberish>,
      exponent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ticketCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tickets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferTicket(
      _ticketId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userTickets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IEntityManager {
  export type VoterAddressesStruct = {
    submitAddress: PromiseOrValue<string>;
    submitSignaturesAddress: PromiseOrValue<string>;
    signingPolicyAddress: PromiseOrValue<string>;
  };

  export type VoterAddressesStructOutput = [string, string, string] & {
    submitAddress: string;
    submitSignaturesAddress: string;
    signingPolicyAddress: string;
  };
}

export interface IEntityManagerInterface extends utils.Interface {
  functions: {
    "confirmDelegationAddressRegistration(address)": FunctionFragment;
    "confirmSigningPolicyAddressRegistration(address)": FunctionFragment;
    "confirmSubmitAddressRegistration(address)": FunctionFragment;
    "confirmSubmitSignaturesAddressRegistration(address)": FunctionFragment;
    "getDelegationAddressOf(address)": FunctionFragment;
    "getDelegationAddressOfAt(address,uint256)": FunctionFragment;
    "getNodeIdsOf(address)": FunctionFragment;
    "getNodeIdsOfAt(address,uint256)": FunctionFragment;
    "getPublicKeyOf(address)": FunctionFragment;
    "getPublicKeyOfAt(address,uint256)": FunctionFragment;
    "getVoterAddresses(address)": FunctionFragment;
    "getVoterAddressesAt(address,uint256)": FunctionFragment;
    "getVoterForDelegationAddress(address,uint256)": FunctionFragment;
    "getVoterForNodeId(bytes20,uint256)": FunctionFragment;
    "getVoterForPublicKey(bytes32,bytes32,uint256)": FunctionFragment;
    "getVoterForSigningPolicyAddress(address,uint256)": FunctionFragment;
    "getVoterForSubmitAddress(address,uint256)": FunctionFragment;
    "getVoterForSubmitSignaturesAddress(address,uint256)": FunctionFragment;
    "proposeDelegationAddress(address)": FunctionFragment;
    "proposeSigningPolicyAddress(address)": FunctionFragment;
    "proposeSubmitAddress(address)": FunctionFragment;
    "proposeSubmitSignaturesAddress(address)": FunctionFragment;
    "registerNodeId(bytes20,bytes,bytes)": FunctionFragment;
    "registerPublicKey(bytes32,bytes32,bytes)": FunctionFragment;
    "unregisterNodeId(bytes20)": FunctionFragment;
    "unregisterPublicKey()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "confirmDelegationAddressRegistration"
      | "confirmSigningPolicyAddressRegistration"
      | "confirmSubmitAddressRegistration"
      | "confirmSubmitSignaturesAddressRegistration"
      | "getDelegationAddressOf"
      | "getDelegationAddressOfAt"
      | "getNodeIdsOf"
      | "getNodeIdsOfAt"
      | "getPublicKeyOf"
      | "getPublicKeyOfAt"
      | "getVoterAddresses"
      | "getVoterAddressesAt"
      | "getVoterForDelegationAddress"
      | "getVoterForNodeId"
      | "getVoterForPublicKey"
      | "getVoterForSigningPolicyAddress"
      | "getVoterForSubmitAddress"
      | "getVoterForSubmitSignaturesAddress"
      | "proposeDelegationAddress"
      | "proposeSigningPolicyAddress"
      | "proposeSubmitAddress"
      | "proposeSubmitSignaturesAddress"
      | "registerNodeId"
      | "registerPublicKey"
      | "unregisterNodeId"
      | "unregisterPublicKey"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "confirmDelegationAddressRegistration",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmSigningPolicyAddressRegistration",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmSubmitAddressRegistration",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmSubmitSignaturesAddressRegistration",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegationAddressOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegationAddressOfAt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNodeIdsOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNodeIdsOfAt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicKeyOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicKeyOfAt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterAddresses",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterAddressesAt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterForDelegationAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterForNodeId",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterForPublicKey",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterForSigningPolicyAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterForSubmitAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterForSubmitSignaturesAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeDelegationAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeSigningPolicyAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeSubmitAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeSubmitSignaturesAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerNodeId",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPublicKey",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterNodeId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterPublicKey",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "confirmDelegationAddressRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmSigningPolicyAddressRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmSubmitAddressRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmSubmitSignaturesAddressRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegationAddressOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegationAddressOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNodeIdsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNodeIdsOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicKeyOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicKeyOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterAddressesAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterForDelegationAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterForNodeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterForPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterForSigningPolicyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterForSubmitAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterForSubmitSignaturesAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeDelegationAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeSigningPolicyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeSubmitAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeSubmitSignaturesAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerNodeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterNodeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterPublicKey",
    data: BytesLike
  ): Result;

  events: {
    "DelegationAddressProposed(address,address)": EventFragment;
    "DelegationAddressRegistrationConfirmed(address,address)": EventFragment;
    "MaxNodeIdsPerEntitySet(uint256)": EventFragment;
    "NodeIdRegistered(address,bytes20)": EventFragment;
    "NodeIdUnregistered(address,bytes20)": EventFragment;
    "PublicKeyRegistered(address,bytes32,bytes32)": EventFragment;
    "PublicKeyUnregistered(address,bytes32,bytes32)": EventFragment;
    "SigningPolicyAddressProposed(address,address)": EventFragment;
    "SigningPolicyAddressRegistrationConfirmed(address,address)": EventFragment;
    "SubmitAddressProposed(address,address)": EventFragment;
    "SubmitAddressRegistrationConfirmed(address,address)": EventFragment;
    "SubmitSignaturesAddressProposed(address,address)": EventFragment;
    "SubmitSignaturesAddressRegistrationConfirmed(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelegationAddressProposed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DelegationAddressRegistrationConfirmed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxNodeIdsPerEntitySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeIdRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeIdUnregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PublicKeyRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PublicKeyUnregistered"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SigningPolicyAddressProposed"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SigningPolicyAddressRegistrationConfirmed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitAddressProposed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SubmitAddressRegistrationConfirmed"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SubmitSignaturesAddressProposed"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SubmitSignaturesAddressRegistrationConfirmed"
  ): EventFragment;
}

export interface DelegationAddressProposedEventObject {
  voter: string;
  delegationAddress: string;
}
export type DelegationAddressProposedEvent = TypedEvent<
  [string, string],
  DelegationAddressProposedEventObject
>;

export type DelegationAddressProposedEventFilter =
  TypedEventFilter<DelegationAddressProposedEvent>;

export interface DelegationAddressRegistrationConfirmedEventObject {
  voter: string;
  delegationAddress: string;
}
export type DelegationAddressRegistrationConfirmedEvent = TypedEvent<
  [string, string],
  DelegationAddressRegistrationConfirmedEventObject
>;

export type DelegationAddressRegistrationConfirmedEventFilter =
  TypedEventFilter<DelegationAddressRegistrationConfirmedEvent>;

export interface MaxNodeIdsPerEntitySetEventObject {
  maxNodeIdsPerEntity: BigNumber;
}
export type MaxNodeIdsPerEntitySetEvent = TypedEvent<
  [BigNumber],
  MaxNodeIdsPerEntitySetEventObject
>;

export type MaxNodeIdsPerEntitySetEventFilter =
  TypedEventFilter<MaxNodeIdsPerEntitySetEvent>;

export interface NodeIdRegisteredEventObject {
  voter: string;
  nodeId: string;
}
export type NodeIdRegisteredEvent = TypedEvent<
  [string, string],
  NodeIdRegisteredEventObject
>;

export type NodeIdRegisteredEventFilter =
  TypedEventFilter<NodeIdRegisteredEvent>;

export interface NodeIdUnregisteredEventObject {
  voter: string;
  nodeId: string;
}
export type NodeIdUnregisteredEvent = TypedEvent<
  [string, string],
  NodeIdUnregisteredEventObject
>;

export type NodeIdUnregisteredEventFilter =
  TypedEventFilter<NodeIdUnregisteredEvent>;

export interface PublicKeyRegisteredEventObject {
  voter: string;
  part1: string;
  part2: string;
}
export type PublicKeyRegisteredEvent = TypedEvent<
  [string, string, string],
  PublicKeyRegisteredEventObject
>;

export type PublicKeyRegisteredEventFilter =
  TypedEventFilter<PublicKeyRegisteredEvent>;

export interface PublicKeyUnregisteredEventObject {
  voter: string;
  part1: string;
  part2: string;
}
export type PublicKeyUnregisteredEvent = TypedEvent<
  [string, string, string],
  PublicKeyUnregisteredEventObject
>;

export type PublicKeyUnregisteredEventFilter =
  TypedEventFilter<PublicKeyUnregisteredEvent>;

export interface SigningPolicyAddressProposedEventObject {
  voter: string;
  signingPolicyAddress: string;
}
export type SigningPolicyAddressProposedEvent = TypedEvent<
  [string, string],
  SigningPolicyAddressProposedEventObject
>;

export type SigningPolicyAddressProposedEventFilter =
  TypedEventFilter<SigningPolicyAddressProposedEvent>;

export interface SigningPolicyAddressRegistrationConfirmedEventObject {
  voter: string;
  signingPolicyAddress: string;
}
export type SigningPolicyAddressRegistrationConfirmedEvent = TypedEvent<
  [string, string],
  SigningPolicyAddressRegistrationConfirmedEventObject
>;

export type SigningPolicyAddressRegistrationConfirmedEventFilter =
  TypedEventFilter<SigningPolicyAddressRegistrationConfirmedEvent>;

export interface SubmitAddressProposedEventObject {
  voter: string;
  submitAddress: string;
}
export type SubmitAddressProposedEvent = TypedEvent<
  [string, string],
  SubmitAddressProposedEventObject
>;

export type SubmitAddressProposedEventFilter =
  TypedEventFilter<SubmitAddressProposedEvent>;

export interface SubmitAddressRegistrationConfirmedEventObject {
  voter: string;
  submitAddress: string;
}
export type SubmitAddressRegistrationConfirmedEvent = TypedEvent<
  [string, string],
  SubmitAddressRegistrationConfirmedEventObject
>;

export type SubmitAddressRegistrationConfirmedEventFilter =
  TypedEventFilter<SubmitAddressRegistrationConfirmedEvent>;

export interface SubmitSignaturesAddressProposedEventObject {
  voter: string;
  submitSignaturesAddress: string;
}
export type SubmitSignaturesAddressProposedEvent = TypedEvent<
  [string, string],
  SubmitSignaturesAddressProposedEventObject
>;

export type SubmitSignaturesAddressProposedEventFilter =
  TypedEventFilter<SubmitSignaturesAddressProposedEvent>;

export interface SubmitSignaturesAddressRegistrationConfirmedEventObject {
  voter: string;
  submitSignaturesAddress: string;
}
export type SubmitSignaturesAddressRegistrationConfirmedEvent = TypedEvent<
  [string, string],
  SubmitSignaturesAddressRegistrationConfirmedEventObject
>;

export type SubmitSignaturesAddressRegistrationConfirmedEventFilter =
  TypedEventFilter<SubmitSignaturesAddressRegistrationConfirmedEvent>;

export interface IEntityManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IEntityManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    confirmDelegationAddressRegistration(
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    confirmSigningPolicyAddressRegistration(
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    confirmSubmitAddressRegistration(
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    confirmSubmitSignaturesAddressRegistration(
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDelegationAddressOf(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDelegationAddressOfAt(
      _voter: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNodeIdsOf(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getNodeIdsOfAt(
      _voter: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getPublicKeyOf(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    getPublicKeyOfAt(
      _voter: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    getVoterAddresses(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IEntityManager.VoterAddressesStructOutput] & {
        _addresses: IEntityManager.VoterAddressesStructOutput;
      }
    >;

    getVoterAddressesAt(
      _voter: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IEntityManager.VoterAddressesStructOutput] & {
        _addresses: IEntityManager.VoterAddressesStructOutput;
      }
    >;

    getVoterForDelegationAddress(
      _delegationAddress: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { _voter: string }>;

    getVoterForNodeId(
      _nodeId: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { _voter: string }>;

    getVoterForPublicKey(
      _part1: PromiseOrValue<BytesLike>,
      _part2: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { _voter: string }>;

    getVoterForSigningPolicyAddress(
      _signingPolicyAddress: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { _voter: string }>;

    getVoterForSubmitAddress(
      _submitAddress: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { _voter: string }>;

    getVoterForSubmitSignaturesAddress(
      _submitSignaturesAddress: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { _voter: string }>;

    proposeDelegationAddress(
      _delegationAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposeSigningPolicyAddress(
      _signingPolicyAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposeSubmitAddress(
      _submitAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposeSubmitSignaturesAddress(
      _submitSignaturesAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerNodeId(
      _nodeId: PromiseOrValue<BytesLike>,
      _certificateRaw: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerPublicKey(
      _part1: PromiseOrValue<BytesLike>,
      _part2: PromiseOrValue<BytesLike>,
      _verificationData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unregisterNodeId(
      _nodeId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unregisterPublicKey(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  confirmDelegationAddressRegistration(
    _voter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  confirmSigningPolicyAddressRegistration(
    _voter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  confirmSubmitAddressRegistration(
    _voter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  confirmSubmitSignaturesAddressRegistration(
    _voter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDelegationAddressOf(
    _voter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getDelegationAddressOfAt(
    _voter: PromiseOrValue<string>,
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getNodeIdsOf(
    _voter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getNodeIdsOfAt(
    _voter: PromiseOrValue<string>,
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getPublicKeyOf(
    _voter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  getPublicKeyOfAt(
    _voter: PromiseOrValue<string>,
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  getVoterAddresses(
    _voter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IEntityManager.VoterAddressesStructOutput>;

  getVoterAddressesAt(
    _voter: PromiseOrValue<string>,
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IEntityManager.VoterAddressesStructOutput>;

  getVoterForDelegationAddress(
    _delegationAddress: PromiseOrValue<string>,
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getVoterForNodeId(
    _nodeId: PromiseOrValue<BytesLike>,
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getVoterForPublicKey(
    _part1: PromiseOrValue<BytesLike>,
    _part2: PromiseOrValue<BytesLike>,
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getVoterForSigningPolicyAddress(
    _signingPolicyAddress: PromiseOrValue<string>,
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getVoterForSubmitAddress(
    _submitAddress: PromiseOrValue<string>,
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getVoterForSubmitSignaturesAddress(
    _submitSignaturesAddress: PromiseOrValue<string>,
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  proposeDelegationAddress(
    _delegationAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposeSigningPolicyAddress(
    _signingPolicyAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposeSubmitAddress(
    _submitAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposeSubmitSignaturesAddress(
    _submitSignaturesAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerNodeId(
    _nodeId: PromiseOrValue<BytesLike>,
    _certificateRaw: PromiseOrValue<BytesLike>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerPublicKey(
    _part1: PromiseOrValue<BytesLike>,
    _part2: PromiseOrValue<BytesLike>,
    _verificationData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unregisterNodeId(
    _nodeId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unregisterPublicKey(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    confirmDelegationAddressRegistration(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    confirmSigningPolicyAddressRegistration(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    confirmSubmitAddressRegistration(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    confirmSubmitSignaturesAddressRegistration(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getDelegationAddressOf(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getDelegationAddressOfAt(
      _voter: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getNodeIdsOf(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getNodeIdsOfAt(
      _voter: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getPublicKeyOf(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    getPublicKeyOfAt(
      _voter: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    getVoterAddresses(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IEntityManager.VoterAddressesStructOutput>;

    getVoterAddressesAt(
      _voter: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IEntityManager.VoterAddressesStructOutput>;

    getVoterForDelegationAddress(
      _delegationAddress: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getVoterForNodeId(
      _nodeId: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getVoterForPublicKey(
      _part1: PromiseOrValue<BytesLike>,
      _part2: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getVoterForSigningPolicyAddress(
      _signingPolicyAddress: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getVoterForSubmitAddress(
      _submitAddress: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getVoterForSubmitSignaturesAddress(
      _submitSignaturesAddress: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    proposeDelegationAddress(
      _delegationAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeSigningPolicyAddress(
      _signingPolicyAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeSubmitAddress(
      _submitAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeSubmitSignaturesAddress(
      _submitSignaturesAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerNodeId(
      _nodeId: PromiseOrValue<BytesLike>,
      _certificateRaw: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerPublicKey(
      _part1: PromiseOrValue<BytesLike>,
      _part2: PromiseOrValue<BytesLike>,
      _verificationData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterNodeId(
      _nodeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterPublicKey(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "DelegationAddressProposed(address,address)"(
      voter?: PromiseOrValue<string> | null,
      delegationAddress?: PromiseOrValue<string> | null
    ): DelegationAddressProposedEventFilter;
    DelegationAddressProposed(
      voter?: PromiseOrValue<string> | null,
      delegationAddress?: PromiseOrValue<string> | null
    ): DelegationAddressProposedEventFilter;

    "DelegationAddressRegistrationConfirmed(address,address)"(
      voter?: PromiseOrValue<string> | null,
      delegationAddress?: PromiseOrValue<string> | null
    ): DelegationAddressRegistrationConfirmedEventFilter;
    DelegationAddressRegistrationConfirmed(
      voter?: PromiseOrValue<string> | null,
      delegationAddress?: PromiseOrValue<string> | null
    ): DelegationAddressRegistrationConfirmedEventFilter;

    "MaxNodeIdsPerEntitySet(uint256)"(
      maxNodeIdsPerEntity?: null
    ): MaxNodeIdsPerEntitySetEventFilter;
    MaxNodeIdsPerEntitySet(
      maxNodeIdsPerEntity?: null
    ): MaxNodeIdsPerEntitySetEventFilter;

    "NodeIdRegistered(address,bytes20)"(
      voter?: PromiseOrValue<string> | null,
      nodeId?: PromiseOrValue<BytesLike> | null
    ): NodeIdRegisteredEventFilter;
    NodeIdRegistered(
      voter?: PromiseOrValue<string> | null,
      nodeId?: PromiseOrValue<BytesLike> | null
    ): NodeIdRegisteredEventFilter;

    "NodeIdUnregistered(address,bytes20)"(
      voter?: PromiseOrValue<string> | null,
      nodeId?: PromiseOrValue<BytesLike> | null
    ): NodeIdUnregisteredEventFilter;
    NodeIdUnregistered(
      voter?: PromiseOrValue<string> | null,
      nodeId?: PromiseOrValue<BytesLike> | null
    ): NodeIdUnregisteredEventFilter;

    "PublicKeyRegistered(address,bytes32,bytes32)"(
      voter?: PromiseOrValue<string> | null,
      part1?: PromiseOrValue<BytesLike> | null,
      part2?: PromiseOrValue<BytesLike> | null
    ): PublicKeyRegisteredEventFilter;
    PublicKeyRegistered(
      voter?: PromiseOrValue<string> | null,
      part1?: PromiseOrValue<BytesLike> | null,
      part2?: PromiseOrValue<BytesLike> | null
    ): PublicKeyRegisteredEventFilter;

    "PublicKeyUnregistered(address,bytes32,bytes32)"(
      voter?: PromiseOrValue<string> | null,
      part1?: PromiseOrValue<BytesLike> | null,
      part2?: PromiseOrValue<BytesLike> | null
    ): PublicKeyUnregisteredEventFilter;
    PublicKeyUnregistered(
      voter?: PromiseOrValue<string> | null,
      part1?: PromiseOrValue<BytesLike> | null,
      part2?: PromiseOrValue<BytesLike> | null
    ): PublicKeyUnregisteredEventFilter;

    "SigningPolicyAddressProposed(address,address)"(
      voter?: PromiseOrValue<string> | null,
      signingPolicyAddress?: PromiseOrValue<string> | null
    ): SigningPolicyAddressProposedEventFilter;
    SigningPolicyAddressProposed(
      voter?: PromiseOrValue<string> | null,
      signingPolicyAddress?: PromiseOrValue<string> | null
    ): SigningPolicyAddressProposedEventFilter;

    "SigningPolicyAddressRegistrationConfirmed(address,address)"(
      voter?: PromiseOrValue<string> | null,
      signingPolicyAddress?: PromiseOrValue<string> | null
    ): SigningPolicyAddressRegistrationConfirmedEventFilter;
    SigningPolicyAddressRegistrationConfirmed(
      voter?: PromiseOrValue<string> | null,
      signingPolicyAddress?: PromiseOrValue<string> | null
    ): SigningPolicyAddressRegistrationConfirmedEventFilter;

    "SubmitAddressProposed(address,address)"(
      voter?: PromiseOrValue<string> | null,
      submitAddress?: PromiseOrValue<string> | null
    ): SubmitAddressProposedEventFilter;
    SubmitAddressProposed(
      voter?: PromiseOrValue<string> | null,
      submitAddress?: PromiseOrValue<string> | null
    ): SubmitAddressProposedEventFilter;

    "SubmitAddressRegistrationConfirmed(address,address)"(
      voter?: PromiseOrValue<string> | null,
      submitAddress?: PromiseOrValue<string> | null
    ): SubmitAddressRegistrationConfirmedEventFilter;
    SubmitAddressRegistrationConfirmed(
      voter?: PromiseOrValue<string> | null,
      submitAddress?: PromiseOrValue<string> | null
    ): SubmitAddressRegistrationConfirmedEventFilter;

    "SubmitSignaturesAddressProposed(address,address)"(
      voter?: PromiseOrValue<string> | null,
      submitSignaturesAddress?: PromiseOrValue<string> | null
    ): SubmitSignaturesAddressProposedEventFilter;
    SubmitSignaturesAddressProposed(
      voter?: PromiseOrValue<string> | null,
      submitSignaturesAddress?: PromiseOrValue<string> | null
    ): SubmitSignaturesAddressProposedEventFilter;

    "SubmitSignaturesAddressRegistrationConfirmed(address,address)"(
      voter?: PromiseOrValue<string> | null,
      submitSignaturesAddress?: PromiseOrValue<string> | null
    ): SubmitSignaturesAddressRegistrationConfirmedEventFilter;
    SubmitSignaturesAddressRegistrationConfirmed(
      voter?: PromiseOrValue<string> | null,
      submitSignaturesAddress?: PromiseOrValue<string> | null
    ): SubmitSignaturesAddressRegistrationConfirmedEventFilter;
  };

  estimateGas: {
    confirmDelegationAddressRegistration(
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    confirmSigningPolicyAddressRegistration(
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    confirmSubmitAddressRegistration(
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    confirmSubmitSignaturesAddressRegistration(
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDelegationAddressOf(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegationAddressOfAt(
      _voter: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNodeIdsOf(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNodeIdsOfAt(
      _voter: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPublicKeyOf(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPublicKeyOfAt(
      _voter: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterAddresses(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterAddressesAt(
      _voter: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterForDelegationAddress(
      _delegationAddress: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterForNodeId(
      _nodeId: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterForPublicKey(
      _part1: PromiseOrValue<BytesLike>,
      _part2: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterForSigningPolicyAddress(
      _signingPolicyAddress: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterForSubmitAddress(
      _submitAddress: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterForSubmitSignaturesAddress(
      _submitSignaturesAddress: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposeDelegationAddress(
      _delegationAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposeSigningPolicyAddress(
      _signingPolicyAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposeSubmitAddress(
      _submitAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposeSubmitSignaturesAddress(
      _submitSignaturesAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerNodeId(
      _nodeId: PromiseOrValue<BytesLike>,
      _certificateRaw: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerPublicKey(
      _part1: PromiseOrValue<BytesLike>,
      _part2: PromiseOrValue<BytesLike>,
      _verificationData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unregisterNodeId(
      _nodeId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unregisterPublicKey(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    confirmDelegationAddressRegistration(
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    confirmSigningPolicyAddressRegistration(
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    confirmSubmitAddressRegistration(
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    confirmSubmitSignaturesAddressRegistration(
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDelegationAddressOf(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegationAddressOfAt(
      _voter: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNodeIdsOf(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNodeIdsOfAt(
      _voter: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPublicKeyOf(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPublicKeyOfAt(
      _voter: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterAddresses(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterAddressesAt(
      _voter: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterForDelegationAddress(
      _delegationAddress: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterForNodeId(
      _nodeId: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterForPublicKey(
      _part1: PromiseOrValue<BytesLike>,
      _part2: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterForSigningPolicyAddress(
      _signingPolicyAddress: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterForSubmitAddress(
      _submitAddress: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterForSubmitSignaturesAddress(
      _submitSignaturesAddress: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposeDelegationAddress(
      _delegationAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposeSigningPolicyAddress(
      _signingPolicyAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposeSubmitAddress(
      _submitAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposeSubmitSignaturesAddress(
      _submitSignaturesAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerNodeId(
      _nodeId: PromiseOrValue<BytesLike>,
      _certificateRaw: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerPublicKey(
      _part1: PromiseOrValue<BytesLike>,
      _part2: PromiseOrValue<BytesLike>,
      _verificationData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unregisterNodeId(
      _nodeId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unregisterPublicKey(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

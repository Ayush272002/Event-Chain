/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ISubmissionInterface extends utils.Interface {
  functions: {
    "getCurrentRandom()": FunctionFragment;
    "getCurrentRandomWithQuality()": FunctionFragment;
    "getCurrentRandomWithQualityAndTimestamp()": FunctionFragment;
    "submit1()": FunctionFragment;
    "submit2()": FunctionFragment;
    "submit3()": FunctionFragment;
    "submitAndPass(bytes)": FunctionFragment;
    "submitSignatures()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getCurrentRandom"
      | "getCurrentRandomWithQuality"
      | "getCurrentRandomWithQualityAndTimestamp"
      | "submit1"
      | "submit2"
      | "submit3"
      | "submitAndPass"
      | "submitSignatures"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getCurrentRandom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRandomWithQuality",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRandomWithQualityAndTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "submit1", values?: undefined): string;
  encodeFunctionData(functionFragment: "submit2", values?: undefined): string;
  encodeFunctionData(functionFragment: "submit3", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submitAndPass",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitSignatures",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getCurrentRandom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRandomWithQuality",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRandomWithQualityAndTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submit1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submit2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submit3", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitAndPass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitSignatures",
    data: BytesLike
  ): Result;

  events: {
    "NewVotingRoundInitiated()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewVotingRoundInitiated"): EventFragment;
}

export interface NewVotingRoundInitiatedEventObject {}
export type NewVotingRoundInitiatedEvent = TypedEvent<
  [],
  NewVotingRoundInitiatedEventObject
>;

export type NewVotingRoundInitiatedEventFilter =
  TypedEventFilter<NewVotingRoundInitiatedEvent>;

export interface ISubmission extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISubmissionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getCurrentRandom(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _randomNumber: BigNumber }>;

    getCurrentRandomWithQuality(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & {
        _randomNumber: BigNumber;
        _isSecureRandom: boolean;
      }
    >;

    getCurrentRandomWithQualityAndTimestamp(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        _randomNumber: BigNumber;
        _isSecureRandom: boolean;
        _randomTimestamp: BigNumber;
      }
    >;

    submit1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submit2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submit3(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitAndPass(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitSignatures(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getCurrentRandom(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentRandomWithQuality(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean] & {
      _randomNumber: BigNumber;
      _isSecureRandom: boolean;
    }
  >;

  getCurrentRandomWithQualityAndTimestamp(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber] & {
      _randomNumber: BigNumber;
      _isSecureRandom: boolean;
      _randomTimestamp: BigNumber;
    }
  >;

  submit1(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submit2(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submit3(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitAndPass(
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitSignatures(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getCurrentRandom(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentRandomWithQuality(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & {
        _randomNumber: BigNumber;
        _isSecureRandom: boolean;
      }
    >;

    getCurrentRandomWithQualityAndTimestamp(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        _randomNumber: BigNumber;
        _isSecureRandom: boolean;
        _randomTimestamp: BigNumber;
      }
    >;

    submit1(overrides?: CallOverrides): Promise<boolean>;

    submit2(overrides?: CallOverrides): Promise<boolean>;

    submit3(overrides?: CallOverrides): Promise<boolean>;

    submitAndPass(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    submitSignatures(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "NewVotingRoundInitiated()"(): NewVotingRoundInitiatedEventFilter;
    NewVotingRoundInitiated(): NewVotingRoundInitiatedEventFilter;
  };

  estimateGas: {
    getCurrentRandom(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentRandomWithQuality(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentRandomWithQualityAndTimestamp(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submit1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submit2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submit3(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitAndPass(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitSignatures(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCurrentRandom(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentRandomWithQuality(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentRandomWithQualityAndTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submit1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submit2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submit3(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitAndPass(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitSignatures(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

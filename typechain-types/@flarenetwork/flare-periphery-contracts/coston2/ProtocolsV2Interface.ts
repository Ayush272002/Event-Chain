/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ProtocolsV2InterfaceInterface extends utils.Interface {
  functions: {
    "firstRewardEpochStartTs()": FunctionFragment;
    "firstVotingRoundStartTs()": FunctionFragment;
    "getCurrentRewardEpochId()": FunctionFragment;
    "getCurrentVotingEpochId()": FunctionFragment;
    "getStartVotingRoundId(uint256)": FunctionFragment;
    "getVotePowerBlock(uint256)": FunctionFragment;
    "rewardEpochDurationSeconds()": FunctionFragment;
    "votingEpochDurationSeconds()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "firstRewardEpochStartTs"
      | "firstVotingRoundStartTs"
      | "getCurrentRewardEpochId"
      | "getCurrentVotingEpochId"
      | "getStartVotingRoundId"
      | "getVotePowerBlock"
      | "rewardEpochDurationSeconds"
      | "votingEpochDurationSeconds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "firstRewardEpochStartTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "firstVotingRoundStartTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRewardEpochId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentVotingEpochId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStartVotingRoundId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotePowerBlock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardEpochDurationSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingEpochDurationSeconds",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "firstRewardEpochStartTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstVotingRoundStartTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRewardEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentVotingEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStartVotingRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotePowerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardEpochDurationSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingEpochDurationSeconds",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ProtocolsV2Interface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProtocolsV2InterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    firstRewardEpochStartTs(overrides?: CallOverrides): Promise<[BigNumber]>;

    firstVotingRoundStartTs(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentRewardEpochId(overrides?: CallOverrides): Promise<[number]>;

    getCurrentVotingEpochId(overrides?: CallOverrides): Promise<[number]>;

    getStartVotingRoundId(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getVotePowerBlock(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _votePowerBlock: BigNumber }>;

    rewardEpochDurationSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    votingEpochDurationSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  firstRewardEpochStartTs(overrides?: CallOverrides): Promise<BigNumber>;

  firstVotingRoundStartTs(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentRewardEpochId(overrides?: CallOverrides): Promise<number>;

  getCurrentVotingEpochId(overrides?: CallOverrides): Promise<number>;

  getStartVotingRoundId(
    _rewardEpochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getVotePowerBlock(
    _rewardEpochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardEpochDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  votingEpochDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    firstRewardEpochStartTs(overrides?: CallOverrides): Promise<BigNumber>;

    firstVotingRoundStartTs(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentRewardEpochId(overrides?: CallOverrides): Promise<number>;

    getCurrentVotingEpochId(overrides?: CallOverrides): Promise<number>;

    getStartVotingRoundId(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getVotePowerBlock(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardEpochDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    votingEpochDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    firstRewardEpochStartTs(overrides?: CallOverrides): Promise<BigNumber>;

    firstVotingRoundStartTs(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentRewardEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentVotingEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    getStartVotingRoundId(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotePowerBlock(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardEpochDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    votingEpochDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    firstRewardEpochStartTs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    firstVotingRoundStartTs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentRewardEpochId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentVotingEpochId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStartVotingRoundId(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotePowerBlock(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardEpochDurationSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingEpochDurationSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

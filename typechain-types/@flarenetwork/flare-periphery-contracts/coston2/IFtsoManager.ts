/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IFtsoManagerInterface extends utils.Interface {
  functions: {
    "active()": FunctionFragment;
    "getCurrentPriceEpochData()": FunctionFragment;
    "getCurrentPriceEpochId()": FunctionFragment;
    "getCurrentRewardEpoch()": FunctionFragment;
    "getFallbackMode()": FunctionFragment;
    "getFtsos()": FunctionFragment;
    "getPriceEpochConfiguration()": FunctionFragment;
    "getRewardEpochConfiguration()": FunctionFragment;
    "getRewardEpochToExpireNext()": FunctionFragment;
    "getRewardEpochVotePowerBlock(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "active"
      | "getCurrentPriceEpochData"
      | "getCurrentPriceEpochId"
      | "getCurrentRewardEpoch"
      | "getFallbackMode"
      | "getFtsos"
      | "getPriceEpochConfiguration"
      | "getRewardEpochConfiguration"
      | "getRewardEpochToExpireNext"
      | "getRewardEpochVotePowerBlock"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "active", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentPriceEpochData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPriceEpochId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRewardEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFallbackMode",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getFtsos", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPriceEpochConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardEpochConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardEpochToExpireNext",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardEpochVotePowerBlock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "active", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPriceEpochData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPriceEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRewardEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFallbackMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFtsos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceEpochConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardEpochConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardEpochToExpireNext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardEpochVotePowerBlock",
    data: BytesLike
  ): Result;

  events: {
    "AccruingUnearnedRewardsFailed(uint256)": EventFragment;
    "DistributingRewardsFailed(address,uint256)": EventFragment;
    "FallbackMode(bool)": EventFragment;
    "FinalizingPriceEpochFailed(address,uint256,uint8)": EventFragment;
    "FtsoAdded(address,bool)": EventFragment;
    "FtsoFallbackMode(address,bool)": EventFragment;
    "InitializingCurrentEpochStateForRevealFailed(address,uint256)": EventFragment;
    "PriceEpochFinalized(address,uint256)": EventFragment;
    "RewardEpochFinalized(uint256,uint256)": EventFragment;
    "UseGoodRandomSet(bool,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AccruingUnearnedRewardsFailed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributingRewardsFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FallbackMode"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinalizingPriceEpochFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FtsoAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FtsoFallbackMode"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "InitializingCurrentEpochStateForRevealFailed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceEpochFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardEpochFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UseGoodRandomSet"): EventFragment;
}

export interface AccruingUnearnedRewardsFailedEventObject {
  epochId: BigNumber;
}
export type AccruingUnearnedRewardsFailedEvent = TypedEvent<
  [BigNumber],
  AccruingUnearnedRewardsFailedEventObject
>;

export type AccruingUnearnedRewardsFailedEventFilter =
  TypedEventFilter<AccruingUnearnedRewardsFailedEvent>;

export interface DistributingRewardsFailedEventObject {
  ftso: string;
  epochId: BigNumber;
}
export type DistributingRewardsFailedEvent = TypedEvent<
  [string, BigNumber],
  DistributingRewardsFailedEventObject
>;

export type DistributingRewardsFailedEventFilter =
  TypedEventFilter<DistributingRewardsFailedEvent>;

export interface FallbackModeEventObject {
  fallbackMode: boolean;
}
export type FallbackModeEvent = TypedEvent<[boolean], FallbackModeEventObject>;

export type FallbackModeEventFilter = TypedEventFilter<FallbackModeEvent>;

export interface FinalizingPriceEpochFailedEventObject {
  ftso: string;
  epochId: BigNumber;
  failingType: number;
}
export type FinalizingPriceEpochFailedEvent = TypedEvent<
  [string, BigNumber, number],
  FinalizingPriceEpochFailedEventObject
>;

export type FinalizingPriceEpochFailedEventFilter =
  TypedEventFilter<FinalizingPriceEpochFailedEvent>;

export interface FtsoAddedEventObject {
  ftso: string;
  add: boolean;
}
export type FtsoAddedEvent = TypedEvent<
  [string, boolean],
  FtsoAddedEventObject
>;

export type FtsoAddedEventFilter = TypedEventFilter<FtsoAddedEvent>;

export interface FtsoFallbackModeEventObject {
  ftso: string;
  fallbackMode: boolean;
}
export type FtsoFallbackModeEvent = TypedEvent<
  [string, boolean],
  FtsoFallbackModeEventObject
>;

export type FtsoFallbackModeEventFilter =
  TypedEventFilter<FtsoFallbackModeEvent>;

export interface InitializingCurrentEpochStateForRevealFailedEventObject {
  ftso: string;
  epochId: BigNumber;
}
export type InitializingCurrentEpochStateForRevealFailedEvent = TypedEvent<
  [string, BigNumber],
  InitializingCurrentEpochStateForRevealFailedEventObject
>;

export type InitializingCurrentEpochStateForRevealFailedEventFilter =
  TypedEventFilter<InitializingCurrentEpochStateForRevealFailedEvent>;

export interface PriceEpochFinalizedEventObject {
  chosenFtso: string;
  rewardEpochId: BigNumber;
}
export type PriceEpochFinalizedEvent = TypedEvent<
  [string, BigNumber],
  PriceEpochFinalizedEventObject
>;

export type PriceEpochFinalizedEventFilter =
  TypedEventFilter<PriceEpochFinalizedEvent>;

export interface RewardEpochFinalizedEventObject {
  votepowerBlock: BigNumber;
  startBlock: BigNumber;
}
export type RewardEpochFinalizedEvent = TypedEvent<
  [BigNumber, BigNumber],
  RewardEpochFinalizedEventObject
>;

export type RewardEpochFinalizedEventFilter =
  TypedEventFilter<RewardEpochFinalizedEvent>;

export interface UseGoodRandomSetEventObject {
  useGoodRandom: boolean;
  maxWaitForGoodRandomSeconds: BigNumber;
}
export type UseGoodRandomSetEvent = TypedEvent<
  [boolean, BigNumber],
  UseGoodRandomSetEventObject
>;

export type UseGoodRandomSetEventFilter =
  TypedEventFilter<UseGoodRandomSetEvent>;

export interface IFtsoManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFtsoManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    active(overrides?: CallOverrides): Promise<[boolean]>;

    getCurrentPriceEpochData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _priceEpochId: BigNumber;
        _priceEpochStartTimestamp: BigNumber;
        _priceEpochEndTimestamp: BigNumber;
        _priceEpochRevealEndTimestamp: BigNumber;
        _currentTimestamp: BigNumber;
      }
    >;

    getCurrentPriceEpochId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _priceEpochId: BigNumber }>;

    getCurrentRewardEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFallbackMode(
      overrides?: CallOverrides
    ): Promise<
      [boolean, string[], boolean[]] & {
        _fallbackMode: boolean;
        _ftsos: string[];
        _ftsoInFallbackMode: boolean[];
      }
    >;

    getFtsos(
      overrides?: CallOverrides
    ): Promise<[string[]] & { _ftsos: string[] }>;

    getPriceEpochConfiguration(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _firstPriceEpochStartTs: BigNumber;
        _priceEpochDurationSeconds: BigNumber;
        _revealEpochDurationSeconds: BigNumber;
      }
    >;

    getRewardEpochConfiguration(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _firstRewardEpochStartTs: BigNumber;
        _rewardEpochDurationSeconds: BigNumber;
      }
    >;

    getRewardEpochToExpireNext(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewardEpochVotePowerBlock(
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  active(overrides?: CallOverrides): Promise<boolean>;

  getCurrentPriceEpochData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      _priceEpochId: BigNumber;
      _priceEpochStartTimestamp: BigNumber;
      _priceEpochEndTimestamp: BigNumber;
      _priceEpochRevealEndTimestamp: BigNumber;
      _currentTimestamp: BigNumber;
    }
  >;

  getCurrentPriceEpochId(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentRewardEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  getFallbackMode(
    overrides?: CallOverrides
  ): Promise<
    [boolean, string[], boolean[]] & {
      _fallbackMode: boolean;
      _ftsos: string[];
      _ftsoInFallbackMode: boolean[];
    }
  >;

  getFtsos(overrides?: CallOverrides): Promise<string[]>;

  getPriceEpochConfiguration(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      _firstPriceEpochStartTs: BigNumber;
      _priceEpochDurationSeconds: BigNumber;
      _revealEpochDurationSeconds: BigNumber;
    }
  >;

  getRewardEpochConfiguration(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      _firstRewardEpochStartTs: BigNumber;
      _rewardEpochDurationSeconds: BigNumber;
    }
  >;

  getRewardEpochToExpireNext(overrides?: CallOverrides): Promise<BigNumber>;

  getRewardEpochVotePowerBlock(
    _rewardEpoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    active(overrides?: CallOverrides): Promise<boolean>;

    getCurrentPriceEpochData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _priceEpochId: BigNumber;
        _priceEpochStartTimestamp: BigNumber;
        _priceEpochEndTimestamp: BigNumber;
        _priceEpochRevealEndTimestamp: BigNumber;
        _currentTimestamp: BigNumber;
      }
    >;

    getCurrentPriceEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentRewardEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getFallbackMode(
      overrides?: CallOverrides
    ): Promise<
      [boolean, string[], boolean[]] & {
        _fallbackMode: boolean;
        _ftsos: string[];
        _ftsoInFallbackMode: boolean[];
      }
    >;

    getFtsos(overrides?: CallOverrides): Promise<string[]>;

    getPriceEpochConfiguration(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _firstPriceEpochStartTs: BigNumber;
        _priceEpochDurationSeconds: BigNumber;
        _revealEpochDurationSeconds: BigNumber;
      }
    >;

    getRewardEpochConfiguration(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _firstRewardEpochStartTs: BigNumber;
        _rewardEpochDurationSeconds: BigNumber;
      }
    >;

    getRewardEpochToExpireNext(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardEpochVotePowerBlock(
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AccruingUnearnedRewardsFailed(uint256)"(
      epochId?: null
    ): AccruingUnearnedRewardsFailedEventFilter;
    AccruingUnearnedRewardsFailed(
      epochId?: null
    ): AccruingUnearnedRewardsFailedEventFilter;

    "DistributingRewardsFailed(address,uint256)"(
      ftso?: null,
      epochId?: null
    ): DistributingRewardsFailedEventFilter;
    DistributingRewardsFailed(
      ftso?: null,
      epochId?: null
    ): DistributingRewardsFailedEventFilter;

    "FallbackMode(bool)"(fallbackMode?: null): FallbackModeEventFilter;
    FallbackMode(fallbackMode?: null): FallbackModeEventFilter;

    "FinalizingPriceEpochFailed(address,uint256,uint8)"(
      ftso?: null,
      epochId?: null,
      failingType?: null
    ): FinalizingPriceEpochFailedEventFilter;
    FinalizingPriceEpochFailed(
      ftso?: null,
      epochId?: null,
      failingType?: null
    ): FinalizingPriceEpochFailedEventFilter;

    "FtsoAdded(address,bool)"(ftso?: null, add?: null): FtsoAddedEventFilter;
    FtsoAdded(ftso?: null, add?: null): FtsoAddedEventFilter;

    "FtsoFallbackMode(address,bool)"(
      ftso?: null,
      fallbackMode?: null
    ): FtsoFallbackModeEventFilter;
    FtsoFallbackMode(
      ftso?: null,
      fallbackMode?: null
    ): FtsoFallbackModeEventFilter;

    "InitializingCurrentEpochStateForRevealFailed(address,uint256)"(
      ftso?: null,
      epochId?: null
    ): InitializingCurrentEpochStateForRevealFailedEventFilter;
    InitializingCurrentEpochStateForRevealFailed(
      ftso?: null,
      epochId?: null
    ): InitializingCurrentEpochStateForRevealFailedEventFilter;

    "PriceEpochFinalized(address,uint256)"(
      chosenFtso?: null,
      rewardEpochId?: null
    ): PriceEpochFinalizedEventFilter;
    PriceEpochFinalized(
      chosenFtso?: null,
      rewardEpochId?: null
    ): PriceEpochFinalizedEventFilter;

    "RewardEpochFinalized(uint256,uint256)"(
      votepowerBlock?: null,
      startBlock?: null
    ): RewardEpochFinalizedEventFilter;
    RewardEpochFinalized(
      votepowerBlock?: null,
      startBlock?: null
    ): RewardEpochFinalizedEventFilter;

    "UseGoodRandomSet(bool,uint256)"(
      useGoodRandom?: null,
      maxWaitForGoodRandomSeconds?: null
    ): UseGoodRandomSetEventFilter;
    UseGoodRandomSet(
      useGoodRandom?: null,
      maxWaitForGoodRandomSeconds?: null
    ): UseGoodRandomSetEventFilter;
  };

  estimateGas: {
    active(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPriceEpochData(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPriceEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentRewardEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getFallbackMode(overrides?: CallOverrides): Promise<BigNumber>;

    getFtsos(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceEpochConfiguration(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardEpochConfiguration(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardEpochToExpireNext(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardEpochVotePowerBlock(
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    active(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentPriceEpochData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentPriceEpochId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentRewardEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFallbackMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFtsos(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPriceEpochConfiguration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardEpochConfiguration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardEpochToExpireNext(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardEpochVotePowerBlock(
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IFtsoInflationConfigurations {
  export type FtsoConfigurationStruct = {
    feedIds: PromiseOrValue<BytesLike>;
    inflationShare: PromiseOrValue<BigNumberish>;
    minRewardedTurnoutBIPS: PromiseOrValue<BigNumberish>;
    primaryBandRewardSharePPM: PromiseOrValue<BigNumberish>;
    secondaryBandWidthPPMs: PromiseOrValue<BytesLike>;
    mode: PromiseOrValue<BigNumberish>;
  };

  export type FtsoConfigurationStructOutput = [
    string,
    number,
    number,
    number,
    string,
    number
  ] & {
    feedIds: string;
    inflationShare: number;
    minRewardedTurnoutBIPS: number;
    primaryBandRewardSharePPM: number;
    secondaryBandWidthPPMs: string;
    mode: number;
  };
}

export interface IFtsoInflationConfigurationsInterface extends utils.Interface {
  functions: {
    "getFtsoConfiguration(uint256)": FunctionFragment;
    "getFtsoConfigurations()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getFtsoConfiguration" | "getFtsoConfigurations"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getFtsoConfiguration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFtsoConfigurations",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getFtsoConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFtsoConfigurations",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IFtsoInflationConfigurations extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFtsoInflationConfigurationsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getFtsoConfiguration(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IFtsoInflationConfigurations.FtsoConfigurationStructOutput]>;

    getFtsoConfigurations(
      overrides?: CallOverrides
    ): Promise<[IFtsoInflationConfigurations.FtsoConfigurationStructOutput[]]>;
  };

  getFtsoConfiguration(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IFtsoInflationConfigurations.FtsoConfigurationStructOutput>;

  getFtsoConfigurations(
    overrides?: CallOverrides
  ): Promise<IFtsoInflationConfigurations.FtsoConfigurationStructOutput[]>;

  callStatic: {
    getFtsoConfiguration(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IFtsoInflationConfigurations.FtsoConfigurationStructOutput>;

    getFtsoConfigurations(
      overrides?: CallOverrides
    ): Promise<IFtsoInflationConfigurations.FtsoConfigurationStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    getFtsoConfiguration(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFtsoConfigurations(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getFtsoConfiguration(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFtsoConfigurations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

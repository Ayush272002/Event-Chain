/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IFlareSystemsCalculatorInterface extends utils.Interface {
  functions: {
    "signingPolicySignNoRewardsDurationBlocks()": FunctionFragment;
    "signingPolicySignNonPunishableDurationBlocks()": FunctionFragment;
    "signingPolicySignNonPunishableDurationSeconds()": FunctionFragment;
    "wNatCapPPM()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "signingPolicySignNoRewardsDurationBlocks"
      | "signingPolicySignNonPunishableDurationBlocks"
      | "signingPolicySignNonPunishableDurationSeconds"
      | "wNatCapPPM"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "signingPolicySignNoRewardsDurationBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signingPolicySignNonPunishableDurationBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signingPolicySignNonPunishableDurationSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wNatCapPPM",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "signingPolicySignNoRewardsDurationBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signingPolicySignNonPunishableDurationBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signingPolicySignNonPunishableDurationSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wNatCapPPM", data: BytesLike): Result;

  events: {
    "VoterRegistrationInfo(address,uint24,address,uint16,uint256,uint256,bytes20[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "VoterRegistrationInfo"): EventFragment;
}

export interface VoterRegistrationInfoEventObject {
  voter: string;
  rewardEpochId: number;
  delegationAddress: string;
  delegationFeeBIPS: number;
  wNatWeight: BigNumber;
  wNatCappedWeight: BigNumber;
  nodeIds: string[];
  nodeWeights: BigNumber[];
}
export type VoterRegistrationInfoEvent = TypedEvent<
  [string, number, string, number, BigNumber, BigNumber, string[], BigNumber[]],
  VoterRegistrationInfoEventObject
>;

export type VoterRegistrationInfoEventFilter =
  TypedEventFilter<VoterRegistrationInfoEvent>;

export interface IFlareSystemsCalculator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFlareSystemsCalculatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    signingPolicySignNoRewardsDurationBlocks(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    signingPolicySignNonPunishableDurationBlocks(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    signingPolicySignNonPunishableDurationSeconds(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    wNatCapPPM(overrides?: CallOverrides): Promise<[number]>;
  };

  signingPolicySignNoRewardsDurationBlocks(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  signingPolicySignNonPunishableDurationBlocks(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  signingPolicySignNonPunishableDurationSeconds(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  wNatCapPPM(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    signingPolicySignNoRewardsDurationBlocks(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    signingPolicySignNonPunishableDurationBlocks(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    signingPolicySignNonPunishableDurationSeconds(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wNatCapPPM(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "VoterRegistrationInfo(address,uint24,address,uint16,uint256,uint256,bytes20[],uint256[])"(
      voter?: PromiseOrValue<string> | null,
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      delegationAddress?: null,
      delegationFeeBIPS?: null,
      wNatWeight?: null,
      wNatCappedWeight?: null,
      nodeIds?: null,
      nodeWeights?: null
    ): VoterRegistrationInfoEventFilter;
    VoterRegistrationInfo(
      voter?: PromiseOrValue<string> | null,
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      delegationAddress?: null,
      delegationFeeBIPS?: null,
      wNatWeight?: null,
      wNatCappedWeight?: null,
      nodeIds?: null,
      nodeWeights?: null
    ): VoterRegistrationInfoEventFilter;
  };

  estimateGas: {
    signingPolicySignNoRewardsDurationBlocks(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    signingPolicySignNonPunishableDurationBlocks(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    signingPolicySignNonPunishableDurationSeconds(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wNatCapPPM(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    signingPolicySignNoRewardsDurationBlocks(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signingPolicySignNonPunishableDurationBlocks(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signingPolicySignNonPunishableDurationSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wNatCapPPM(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IFlareContractRegistryInterface extends utils.Interface {
  functions: {
    "getAllContracts()": FunctionFragment;
    "getContractAddressByHash(bytes32)": FunctionFragment;
    "getContractAddressByName(string)": FunctionFragment;
    "getContractAddressesByHash(bytes32[])": FunctionFragment;
    "getContractAddressesByName(string[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAllContracts"
      | "getContractAddressByHash"
      | "getContractAddressByName"
      | "getContractAddressesByHash"
      | "getContractAddressesByName"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAllContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractAddressByHash",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractAddressByName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractAddressesByHash",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractAddressesByName",
    values: [PromiseOrValue<string>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractAddressByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractAddressByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractAddressesByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractAddressesByName",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IFlareContractRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFlareContractRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAllContracts(
      overrides?: CallOverrides
    ): Promise<
      [string[], string[]] & { _names: string[]; _addresses: string[] }
    >;

    getContractAddressByHash(
      _nameHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getContractAddressByName(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getContractAddressesByHash(
      _nameHashes: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getContractAddressesByName(
      _names: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;
  };

  getAllContracts(
    overrides?: CallOverrides
  ): Promise<[string[], string[]] & { _names: string[]; _addresses: string[] }>;

  getContractAddressByHash(
    _nameHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getContractAddressByName(
    _name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getContractAddressesByHash(
    _nameHashes: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  getContractAddressesByName(
    _names: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  callStatic: {
    getAllContracts(
      overrides?: CallOverrides
    ): Promise<
      [string[], string[]] & { _names: string[]; _addresses: string[] }
    >;

    getContractAddressByHash(
      _nameHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getContractAddressByName(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getContractAddressesByHash(
      _nameHashes: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    getContractAddressesByName(
      _names: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<string[]>;
  };

  filters: {};

  estimateGas: {
    getAllContracts(overrides?: CallOverrides): Promise<BigNumber>;

    getContractAddressByHash(
      _nameHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractAddressByName(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractAddressesByHash(
      _nameHashes: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractAddressesByName(
      _names: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContractAddressByHash(
      _nameHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractAddressByName(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractAddressesByHash(
      _nameHashes: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractAddressesByName(
      _names: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IFtsoRewardOffersManager {
  export type OfferStruct = {
    amount: PromiseOrValue<BigNumberish>;
    feedId: PromiseOrValue<BytesLike>;
    minRewardedTurnoutBIPS: PromiseOrValue<BigNumberish>;
    primaryBandRewardSharePPM: PromiseOrValue<BigNumberish>;
    secondaryBandWidthPPM: PromiseOrValue<BigNumberish>;
    claimBackAddress: PromiseOrValue<string>;
  };

  export type OfferStructOutput = [
    BigNumber,
    string,
    number,
    number,
    number,
    string
  ] & {
    amount: BigNumber;
    feedId: string;
    minRewardedTurnoutBIPS: number;
    primaryBandRewardSharePPM: number;
    secondaryBandWidthPPM: number;
    claimBackAddress: string;
  };
}

export interface IFtsoRewardOffersManagerInterface extends utils.Interface {
  functions: {
    "minimalRewardsOfferValueWei()": FunctionFragment;
    "offerRewards(uint24,(uint120,bytes21,uint16,uint24,uint24,address)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "minimalRewardsOfferValueWei" | "offerRewards"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "minimalRewardsOfferValueWei",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offerRewards",
    values: [
      PromiseOrValue<BigNumberish>,
      IFtsoRewardOffersManager.OfferStruct[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "minimalRewardsOfferValueWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerRewards",
    data: BytesLike
  ): Result;

  events: {
    "InflationRewardsOffered(uint24,bytes,bytes,uint256,uint16,uint24,bytes,uint16)": EventFragment;
    "MinimalRewardsOfferValueSet(uint256)": EventFragment;
    "RewardsOffered(uint24,bytes21,int8,uint256,uint16,uint24,uint24,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InflationRewardsOffered"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinimalRewardsOfferValueSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsOffered"): EventFragment;
}

export interface InflationRewardsOfferedEventObject {
  rewardEpochId: number;
  feedIds: string;
  decimals: string;
  amount: BigNumber;
  minRewardedTurnoutBIPS: number;
  primaryBandRewardSharePPM: number;
  secondaryBandWidthPPMs: string;
  mode: number;
}
export type InflationRewardsOfferedEvent = TypedEvent<
  [number, string, string, BigNumber, number, number, string, number],
  InflationRewardsOfferedEventObject
>;

export type InflationRewardsOfferedEventFilter =
  TypedEventFilter<InflationRewardsOfferedEvent>;

export interface MinimalRewardsOfferValueSetEventObject {
  valueWei: BigNumber;
}
export type MinimalRewardsOfferValueSetEvent = TypedEvent<
  [BigNumber],
  MinimalRewardsOfferValueSetEventObject
>;

export type MinimalRewardsOfferValueSetEventFilter =
  TypedEventFilter<MinimalRewardsOfferValueSetEvent>;

export interface RewardsOfferedEventObject {
  rewardEpochId: number;
  feedId: string;
  decimals: number;
  amount: BigNumber;
  minRewardedTurnoutBIPS: number;
  primaryBandRewardSharePPM: number;
  secondaryBandWidthPPM: number;
  claimBackAddress: string;
}
export type RewardsOfferedEvent = TypedEvent<
  [number, string, number, BigNumber, number, number, number, string],
  RewardsOfferedEventObject
>;

export type RewardsOfferedEventFilter = TypedEventFilter<RewardsOfferedEvent>;

export interface IFtsoRewardOffersManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFtsoRewardOffersManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    minimalRewardsOfferValueWei(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    offerRewards(
      _nextRewardEpochId: PromiseOrValue<BigNumberish>,
      _offers: IFtsoRewardOffersManager.OfferStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  minimalRewardsOfferValueWei(overrides?: CallOverrides): Promise<BigNumber>;

  offerRewards(
    _nextRewardEpochId: PromiseOrValue<BigNumberish>,
    _offers: IFtsoRewardOffersManager.OfferStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    minimalRewardsOfferValueWei(overrides?: CallOverrides): Promise<BigNumber>;

    offerRewards(
      _nextRewardEpochId: PromiseOrValue<BigNumberish>,
      _offers: IFtsoRewardOffersManager.OfferStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "InflationRewardsOffered(uint24,bytes,bytes,uint256,uint16,uint24,bytes,uint16)"(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      feedIds?: null,
      decimals?: null,
      amount?: null,
      minRewardedTurnoutBIPS?: null,
      primaryBandRewardSharePPM?: null,
      secondaryBandWidthPPMs?: null,
      mode?: null
    ): InflationRewardsOfferedEventFilter;
    InflationRewardsOffered(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      feedIds?: null,
      decimals?: null,
      amount?: null,
      minRewardedTurnoutBIPS?: null,
      primaryBandRewardSharePPM?: null,
      secondaryBandWidthPPMs?: null,
      mode?: null
    ): InflationRewardsOfferedEventFilter;

    "MinimalRewardsOfferValueSet(uint256)"(
      valueWei?: null
    ): MinimalRewardsOfferValueSetEventFilter;
    MinimalRewardsOfferValueSet(
      valueWei?: null
    ): MinimalRewardsOfferValueSetEventFilter;

    "RewardsOffered(uint24,bytes21,int8,uint256,uint16,uint24,uint24,address)"(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      feedId?: null,
      decimals?: null,
      amount?: null,
      minRewardedTurnoutBIPS?: null,
      primaryBandRewardSharePPM?: null,
      secondaryBandWidthPPM?: null,
      claimBackAddress?: null
    ): RewardsOfferedEventFilter;
    RewardsOffered(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      feedId?: null,
      decimals?: null,
      amount?: null,
      minRewardedTurnoutBIPS?: null,
      primaryBandRewardSharePPM?: null,
      secondaryBandWidthPPM?: null,
      claimBackAddress?: null
    ): RewardsOfferedEventFilter;
  };

  estimateGas: {
    minimalRewardsOfferValueWei(overrides?: CallOverrides): Promise<BigNumber>;

    offerRewards(
      _nextRewardEpochId: PromiseOrValue<BigNumberish>,
      _offers: IFtsoRewardOffersManager.OfferStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    minimalRewardsOfferValueWei(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offerRewards(
      _nextRewardEpochId: PromiseOrValue<BigNumberish>,
      _offers: IFtsoRewardOffersManager.OfferStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type G1PointStruct = {
  x: PromiseOrValue<BigNumberish>;
  y: PromiseOrValue<BigNumberish>;
};

export type G1PointStructOutput = [BigNumber, BigNumber] & {
  x: BigNumber;
  y: BigNumber;
};

export type SortitionCredentialStruct = {
  replicate: PromiseOrValue<BigNumberish>;
  gamma: G1PointStruct;
  c: PromiseOrValue<BigNumberish>;
  s: PromiseOrValue<BigNumberish>;
};

export type SortitionCredentialStructOutput = [
  BigNumber,
  G1PointStructOutput,
  BigNumber,
  BigNumber
] & {
  replicate: BigNumber;
  gamma: G1PointStructOutput;
  c: BigNumber;
  s: BigNumber;
};

export declare namespace IFastUpdater {
  export type SignatureStruct = {
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
  };

  export type SignatureStructOutput = [number, string, string] & {
    v: number;
    r: string;
    s: string;
  };

  export type FastUpdatesStruct = {
    sortitionBlock: PromiseOrValue<BigNumberish>;
    sortitionCredential: SortitionCredentialStruct;
    deltas: PromiseOrValue<BytesLike>;
    signature: IFastUpdater.SignatureStruct;
  };

  export type FastUpdatesStructOutput = [
    BigNumber,
    SortitionCredentialStructOutput,
    string,
    IFastUpdater.SignatureStructOutput
  ] & {
    sortitionBlock: BigNumber;
    sortitionCredential: SortitionCredentialStructOutput;
    deltas: string;
    signature: IFastUpdater.SignatureStructOutput;
  };
}

export interface IFastUpdaterInterface extends utils.Interface {
  functions: {
    "blockScoreCutoff(uint256)": FunctionFragment;
    "currentRewardEpochId()": FunctionFragment;
    "currentScoreCutoff()": FunctionFragment;
    "currentSortitionWeight(address)": FunctionFragment;
    "fetchAllCurrentFeeds()": FunctionFragment;
    "fetchCurrentFeeds(uint256[])": FunctionFragment;
    "numberOfUpdates(uint256)": FunctionFragment;
    "numberOfUpdatesInBlock(uint256)": FunctionFragment;
    "submissionWindow()": FunctionFragment;
    "submitUpdates((uint256,(uint256,(uint256,uint256),uint256,uint256),bytes,(uint8,bytes32,bytes32)))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "blockScoreCutoff"
      | "currentRewardEpochId"
      | "currentScoreCutoff"
      | "currentSortitionWeight"
      | "fetchAllCurrentFeeds"
      | "fetchCurrentFeeds"
      | "numberOfUpdates"
      | "numberOfUpdatesInBlock"
      | "submissionWindow"
      | "submitUpdates"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "blockScoreCutoff",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRewardEpochId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentScoreCutoff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentSortitionWeight",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchAllCurrentFeeds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchCurrentFeeds",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfUpdates",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfUpdatesInBlock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "submissionWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitUpdates",
    values: [IFastUpdater.FastUpdatesStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "blockScoreCutoff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRewardEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentScoreCutoff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentSortitionWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchAllCurrentFeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchCurrentFeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfUpdates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfUpdatesInBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submissionWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitUpdates",
    data: BytesLike
  ): Result;

  events: {
    "FastUpdateFeedRemoved(uint256)": EventFragment;
    "FastUpdateFeedReset(uint256,uint256,bytes21,uint256,int8)": EventFragment;
    "FastUpdateFeeds(uint256,uint256[],int8[])": EventFragment;
    "FastUpdateFeedsSubmitted(uint32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FastUpdateFeedRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FastUpdateFeedReset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FastUpdateFeeds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FastUpdateFeedsSubmitted"): EventFragment;
}

export interface FastUpdateFeedRemovedEventObject {
  index: BigNumber;
}
export type FastUpdateFeedRemovedEvent = TypedEvent<
  [BigNumber],
  FastUpdateFeedRemovedEventObject
>;

export type FastUpdateFeedRemovedEventFilter =
  TypedEventFilter<FastUpdateFeedRemovedEvent>;

export interface FastUpdateFeedResetEventObject {
  votingRoundId: BigNumber;
  index: BigNumber;
  id: string;
  value: BigNumber;
  decimals: number;
}
export type FastUpdateFeedResetEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, number],
  FastUpdateFeedResetEventObject
>;

export type FastUpdateFeedResetEventFilter =
  TypedEventFilter<FastUpdateFeedResetEvent>;

export interface FastUpdateFeedsEventObject {
  votingEpochId: BigNumber;
  feeds: BigNumber[];
  decimals: number[];
}
export type FastUpdateFeedsEvent = TypedEvent<
  [BigNumber, BigNumber[], number[]],
  FastUpdateFeedsEventObject
>;

export type FastUpdateFeedsEventFilter = TypedEventFilter<FastUpdateFeedsEvent>;

export interface FastUpdateFeedsSubmittedEventObject {
  votingRoundId: number;
  signingPolicyAddress: string;
}
export type FastUpdateFeedsSubmittedEvent = TypedEvent<
  [number, string],
  FastUpdateFeedsSubmittedEventObject
>;

export type FastUpdateFeedsSubmittedEventFilter =
  TypedEventFilter<FastUpdateFeedsSubmittedEvent>;

export interface IFastUpdater extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFastUpdaterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    blockScoreCutoff(
      _blockNum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _cutoff: BigNumber }>;

    currentRewardEpochId(overrides?: CallOverrides): Promise<[number]>;

    currentScoreCutoff(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _cutoff: BigNumber }>;

    currentSortitionWeight(
      _signingPolicyAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _weight: BigNumber }>;

    fetchAllCurrentFeeds(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fetchCurrentFeeds(
      _indices: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    numberOfUpdates(
      _historySize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _noOfUpdates: BigNumber[] }>;

    numberOfUpdatesInBlock(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _noOfUpdates: BigNumber }>;

    submissionWindow(overrides?: CallOverrides): Promise<[number]>;

    submitUpdates(
      _updates: IFastUpdater.FastUpdatesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  blockScoreCutoff(
    _blockNum: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentRewardEpochId(overrides?: CallOverrides): Promise<number>;

  currentScoreCutoff(overrides?: CallOverrides): Promise<BigNumber>;

  currentSortitionWeight(
    _signingPolicyAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fetchAllCurrentFeeds(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fetchCurrentFeeds(
    _indices: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  numberOfUpdates(
    _historySize: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  numberOfUpdatesInBlock(
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  submissionWindow(overrides?: CallOverrides): Promise<number>;

  submitUpdates(
    _updates: IFastUpdater.FastUpdatesStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    blockScoreCutoff(
      _blockNum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRewardEpochId(overrides?: CallOverrides): Promise<number>;

    currentScoreCutoff(overrides?: CallOverrides): Promise<BigNumber>;

    currentSortitionWeight(
      _signingPolicyAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchAllCurrentFeeds(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], number[], BigNumber] & {
        _feedIds: string[];
        _feeds: BigNumber[];
        _decimals: number[];
        _timestamp: BigNumber;
      }
    >;

    fetchCurrentFeeds(
      _indices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], number[], BigNumber] & {
        _feeds: BigNumber[];
        _decimals: number[];
        _timestamp: BigNumber;
      }
    >;

    numberOfUpdates(
      _historySize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    numberOfUpdatesInBlock(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submissionWindow(overrides?: CallOverrides): Promise<number>;

    submitUpdates(
      _updates: IFastUpdater.FastUpdatesStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FastUpdateFeedRemoved(uint256)"(
      index?: PromiseOrValue<BigNumberish> | null
    ): FastUpdateFeedRemovedEventFilter;
    FastUpdateFeedRemoved(
      index?: PromiseOrValue<BigNumberish> | null
    ): FastUpdateFeedRemovedEventFilter;

    "FastUpdateFeedReset(uint256,uint256,bytes21,uint256,int8)"(
      votingRoundId?: PromiseOrValue<BigNumberish> | null,
      index?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BytesLike> | null,
      value?: null,
      decimals?: null
    ): FastUpdateFeedResetEventFilter;
    FastUpdateFeedReset(
      votingRoundId?: PromiseOrValue<BigNumberish> | null,
      index?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BytesLike> | null,
      value?: null,
      decimals?: null
    ): FastUpdateFeedResetEventFilter;

    "FastUpdateFeeds(uint256,uint256[],int8[])"(
      votingEpochId?: PromiseOrValue<BigNumberish> | null,
      feeds?: null,
      decimals?: null
    ): FastUpdateFeedsEventFilter;
    FastUpdateFeeds(
      votingEpochId?: PromiseOrValue<BigNumberish> | null,
      feeds?: null,
      decimals?: null
    ): FastUpdateFeedsEventFilter;

    "FastUpdateFeedsSubmitted(uint32,address)"(
      votingRoundId?: PromiseOrValue<BigNumberish> | null,
      signingPolicyAddress?: PromiseOrValue<string> | null
    ): FastUpdateFeedsSubmittedEventFilter;
    FastUpdateFeedsSubmitted(
      votingRoundId?: PromiseOrValue<BigNumberish> | null,
      signingPolicyAddress?: PromiseOrValue<string> | null
    ): FastUpdateFeedsSubmittedEventFilter;
  };

  estimateGas: {
    blockScoreCutoff(
      _blockNum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRewardEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    currentScoreCutoff(overrides?: CallOverrides): Promise<BigNumber>;

    currentSortitionWeight(
      _signingPolicyAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchAllCurrentFeeds(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fetchCurrentFeeds(
      _indices: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    numberOfUpdates(
      _historySize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfUpdatesInBlock(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submissionWindow(overrides?: CallOverrides): Promise<BigNumber>;

    submitUpdates(
      _updates: IFastUpdater.FastUpdatesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    blockScoreCutoff(
      _blockNum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentRewardEpochId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentScoreCutoff(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentSortitionWeight(
      _signingPolicyAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchAllCurrentFeeds(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fetchCurrentFeeds(
      _indices: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    numberOfUpdates(
      _historySize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfUpdatesInBlock(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submissionWindow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitUpdates(
      _updates: IFastUpdater.FastUpdatesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IPChainStakeMirrorVerifier {
  export type PChainStakeStruct = {
    txId: PromiseOrValue<BytesLike>;
    stakingType: PromiseOrValue<BigNumberish>;
    inputAddress: PromiseOrValue<BytesLike>;
    nodeId: PromiseOrValue<BytesLike>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    weight: PromiseOrValue<BigNumberish>;
  };

  export type PChainStakeStructOutput = [
    string,
    number,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    txId: string;
    stakingType: number;
    inputAddress: string;
    nodeId: string;
    startTime: BigNumber;
    endTime: BigNumber;
    weight: BigNumber;
  };
}

export interface IPChainStakeMirrorInterface extends utils.Interface {
  functions: {
    "balanceOf(address)": FunctionFragment;
    "balanceOfAt(address,uint256)": FunctionFragment;
    "batchVotePowerOfAt(bytes20[],uint256)": FunctionFragment;
    "isActiveStakeMirrored(bytes32,bytes20)": FunctionFragment;
    "mirrorStake((bytes32,uint8,bytes20,bytes20,uint64,uint64,uint64),bytes32[])": FunctionFragment;
    "stakesOf(address)": FunctionFragment;
    "stakesOfAt(address,uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupplyAt(uint256)": FunctionFragment;
    "totalVotePower()": FunctionFragment;
    "totalVotePowerAt(uint256)": FunctionFragment;
    "totalVotePowerAtCached(uint256)": FunctionFragment;
    "votePowerFromTo(address,bytes20)": FunctionFragment;
    "votePowerFromToAt(address,bytes20,uint256)": FunctionFragment;
    "votePowerOf(bytes20)": FunctionFragment;
    "votePowerOfAt(bytes20,uint256)": FunctionFragment;
    "votePowerOfAtCached(bytes20,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balanceOf"
      | "balanceOfAt"
      | "batchVotePowerOfAt"
      | "isActiveStakeMirrored"
      | "mirrorStake"
      | "stakesOf"
      | "stakesOfAt"
      | "totalSupply"
      | "totalSupplyAt"
      | "totalVotePower"
      | "totalVotePowerAt"
      | "totalVotePowerAtCached"
      | "votePowerFromTo"
      | "votePowerFromToAt"
      | "votePowerOf"
      | "votePowerOfAt"
      | "votePowerOfAtCached"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchVotePowerOfAt",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveStakeMirrored",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "mirrorStake",
    values: [
      IPChainStakeMirrorVerifier.PChainStakeStruct,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stakesOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakesOfAt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotePower",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotePowerAt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotePowerAtCached",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerFromTo",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerFromToAt",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerOf",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerOfAt",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerOfAtCached",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchVotePowerOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveStakeMirrored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mirrorStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakesOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakesOfAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVotePower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVotePowerAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVotePowerAtCached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerFromTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerFromToAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerOfAtCached",
    data: BytesLike
  ): Result;

  events: {
    "MaxUpdatesPerBlockSet(uint256)": EventFragment;
    "StakeConfirmed(address,bytes20,bytes32,uint256,bytes32)": EventFragment;
    "StakeEnded(address,bytes20,bytes32,uint256)": EventFragment;
    "StakeRevoked(address,bytes20,bytes32,uint256)": EventFragment;
    "VotePowerCacheCreated(bytes20,uint256)": EventFragment;
    "VotePowerChanged(address,bytes20,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MaxUpdatesPerBlockSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeConfirmed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotePowerCacheCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotePowerChanged"): EventFragment;
}

export interface MaxUpdatesPerBlockSetEventObject {
  maxUpdatesPerBlock: BigNumber;
}
export type MaxUpdatesPerBlockSetEvent = TypedEvent<
  [BigNumber],
  MaxUpdatesPerBlockSetEventObject
>;

export type MaxUpdatesPerBlockSetEventFilter =
  TypedEventFilter<MaxUpdatesPerBlockSetEvent>;

export interface StakeConfirmedEventObject {
  owner: string;
  nodeId: string;
  txHash: string;
  amountWei: BigNumber;
  pChainTxId: string;
}
export type StakeConfirmedEvent = TypedEvent<
  [string, string, string, BigNumber, string],
  StakeConfirmedEventObject
>;

export type StakeConfirmedEventFilter = TypedEventFilter<StakeConfirmedEvent>;

export interface StakeEndedEventObject {
  owner: string;
  nodeId: string;
  txHash: string;
  amountWei: BigNumber;
}
export type StakeEndedEvent = TypedEvent<
  [string, string, string, BigNumber],
  StakeEndedEventObject
>;

export type StakeEndedEventFilter = TypedEventFilter<StakeEndedEvent>;

export interface StakeRevokedEventObject {
  owner: string;
  nodeId: string;
  txHash: string;
  amountWei: BigNumber;
}
export type StakeRevokedEvent = TypedEvent<
  [string, string, string, BigNumber],
  StakeRevokedEventObject
>;

export type StakeRevokedEventFilter = TypedEventFilter<StakeRevokedEvent>;

export interface VotePowerCacheCreatedEventObject {
  nodeId: string;
  blockNumber: BigNumber;
}
export type VotePowerCacheCreatedEvent = TypedEvent<
  [string, BigNumber],
  VotePowerCacheCreatedEventObject
>;

export type VotePowerCacheCreatedEventFilter =
  TypedEventFilter<VotePowerCacheCreatedEvent>;

export interface VotePowerChangedEventObject {
  owner: string;
  nodeId: string;
  priorVotePower: BigNumber;
  newVotePower: BigNumber;
}
export type VotePowerChangedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  VotePowerChangedEventObject
>;

export type VotePowerChangedEventFilter =
  TypedEventFilter<VotePowerChangedEvent>;

export interface IPChainStakeMirror extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPChainStakeMirrorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfAt(
      _owner: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    batchVotePowerOfAt(
      _nodeIds: PromiseOrValue<BytesLike>[],
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    isActiveStakeMirrored(
      _txId: PromiseOrValue<BytesLike>,
      _inputAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mirrorStake(
      _stakeData: IPChainStakeMirrorVerifier.PChainStakeStruct,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakesOf(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _nodeIds: string[]; _amounts: BigNumber[] }
    >;

    stakesOfAt(
      _owner: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _nodeIds: string[]; _amounts: BigNumber[] }
    >;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyAt(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalVotePower(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalVotePowerAt(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalVotePowerAtCached(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    votePowerFromTo(
      _owner: PromiseOrValue<string>,
      _nodeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    votePowerFromToAt(
      _owner: PromiseOrValue<string>,
      _nodeId: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    votePowerOf(
      _nodeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    votePowerOfAt(
      _nodeId: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    votePowerOfAtCached(
      _owner: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  balanceOf(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfAt(
    _owner: PromiseOrValue<string>,
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  batchVotePowerOfAt(
    _nodeIds: PromiseOrValue<BytesLike>[],
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  isActiveStakeMirrored(
    _txId: PromiseOrValue<BytesLike>,
    _inputAddress: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mirrorStake(
    _stakeData: IPChainStakeMirrorVerifier.PChainStakeStruct,
    _merkleProof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakesOf(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { _nodeIds: string[]; _amounts: BigNumber[] }
  >;

  stakesOfAt(
    _owner: PromiseOrValue<string>,
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { _nodeIds: string[]; _amounts: BigNumber[] }
  >;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyAt(
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalVotePower(overrides?: CallOverrides): Promise<BigNumber>;

  totalVotePowerAt(
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalVotePowerAtCached(
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  votePowerFromTo(
    _owner: PromiseOrValue<string>,
    _nodeId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  votePowerFromToAt(
    _owner: PromiseOrValue<string>,
    _nodeId: PromiseOrValue<BytesLike>,
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  votePowerOf(
    _nodeId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  votePowerOfAt(
    _nodeId: PromiseOrValue<BytesLike>,
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  votePowerOfAtCached(
    _owner: PromiseOrValue<BytesLike>,
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAt(
      _owner: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchVotePowerOfAt(
      _nodeIds: PromiseOrValue<BytesLike>[],
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    isActiveStakeMirrored(
      _txId: PromiseOrValue<BytesLike>,
      _inputAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mirrorStake(
      _stakeData: IPChainStakeMirrorVerifier.PChainStakeStruct,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    stakesOf(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _nodeIds: string[]; _amounts: BigNumber[] }
    >;

    stakesOfAt(
      _owner: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _nodeIds: string[]; _amounts: BigNumber[] }
    >;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalVotePower(overrides?: CallOverrides): Promise<BigNumber>;

    totalVotePowerAt(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalVotePowerAtCached(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePowerFromTo(
      _owner: PromiseOrValue<string>,
      _nodeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePowerFromToAt(
      _owner: PromiseOrValue<string>,
      _nodeId: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePowerOf(
      _nodeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePowerOfAt(
      _nodeId: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePowerOfAtCached(
      _owner: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "MaxUpdatesPerBlockSet(uint256)"(
      maxUpdatesPerBlock?: null
    ): MaxUpdatesPerBlockSetEventFilter;
    MaxUpdatesPerBlockSet(
      maxUpdatesPerBlock?: null
    ): MaxUpdatesPerBlockSetEventFilter;

    "StakeConfirmed(address,bytes20,bytes32,uint256,bytes32)"(
      owner?: PromiseOrValue<string> | null,
      nodeId?: PromiseOrValue<BytesLike> | null,
      txHash?: PromiseOrValue<BytesLike> | null,
      amountWei?: null,
      pChainTxId?: null
    ): StakeConfirmedEventFilter;
    StakeConfirmed(
      owner?: PromiseOrValue<string> | null,
      nodeId?: PromiseOrValue<BytesLike> | null,
      txHash?: PromiseOrValue<BytesLike> | null,
      amountWei?: null,
      pChainTxId?: null
    ): StakeConfirmedEventFilter;

    "StakeEnded(address,bytes20,bytes32,uint256)"(
      owner?: PromiseOrValue<string> | null,
      nodeId?: PromiseOrValue<BytesLike> | null,
      txHash?: PromiseOrValue<BytesLike> | null,
      amountWei?: null
    ): StakeEndedEventFilter;
    StakeEnded(
      owner?: PromiseOrValue<string> | null,
      nodeId?: PromiseOrValue<BytesLike> | null,
      txHash?: PromiseOrValue<BytesLike> | null,
      amountWei?: null
    ): StakeEndedEventFilter;

    "StakeRevoked(address,bytes20,bytes32,uint256)"(
      owner?: PromiseOrValue<string> | null,
      nodeId?: PromiseOrValue<BytesLike> | null,
      txHash?: PromiseOrValue<BytesLike> | null,
      amountWei?: null
    ): StakeRevokedEventFilter;
    StakeRevoked(
      owner?: PromiseOrValue<string> | null,
      nodeId?: PromiseOrValue<BytesLike> | null,
      txHash?: PromiseOrValue<BytesLike> | null,
      amountWei?: null
    ): StakeRevokedEventFilter;

    "VotePowerCacheCreated(bytes20,uint256)"(
      nodeId?: null,
      blockNumber?: null
    ): VotePowerCacheCreatedEventFilter;
    VotePowerCacheCreated(
      nodeId?: null,
      blockNumber?: null
    ): VotePowerCacheCreatedEventFilter;

    "VotePowerChanged(address,bytes20,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      nodeId?: PromiseOrValue<BytesLike> | null,
      priorVotePower?: null,
      newVotePower?: null
    ): VotePowerChangedEventFilter;
    VotePowerChanged(
      owner?: PromiseOrValue<string> | null,
      nodeId?: PromiseOrValue<BytesLike> | null,
      priorVotePower?: null,
      newVotePower?: null
    ): VotePowerChangedEventFilter;
  };

  estimateGas: {
    balanceOf(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAt(
      _owner: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchVotePowerOfAt(
      _nodeIds: PromiseOrValue<BytesLike>[],
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActiveStakeMirrored(
      _txId: PromiseOrValue<BytesLike>,
      _inputAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mirrorStake(
      _stakeData: IPChainStakeMirrorVerifier.PChainStakeStruct,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakesOf(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakesOfAt(
      _owner: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalVotePower(overrides?: CallOverrides): Promise<BigNumber>;

    totalVotePowerAt(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalVotePowerAtCached(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    votePowerFromTo(
      _owner: PromiseOrValue<string>,
      _nodeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePowerFromToAt(
      _owner: PromiseOrValue<string>,
      _nodeId: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePowerOf(
      _nodeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePowerOfAt(
      _nodeId: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePowerOfAtCached(
      _owner: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfAt(
      _owner: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchVotePowerOfAt(
      _nodeIds: PromiseOrValue<BytesLike>[],
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActiveStakeMirrored(
      _txId: PromiseOrValue<BytesLike>,
      _inputAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mirrorStake(
      _stakeData: IPChainStakeMirrorVerifier.PChainStakeStruct,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakesOf(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakesOfAt(
      _owner: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyAt(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalVotePower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalVotePowerAt(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalVotePowerAtCached(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    votePowerFromTo(
      _owner: PromiseOrValue<string>,
      _nodeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votePowerFromToAt(
      _owner: PromiseOrValue<string>,
      _nodeId: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votePowerOf(
      _nodeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votePowerOfAt(
      _nodeId: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votePowerOfAtCached(
      _owner: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

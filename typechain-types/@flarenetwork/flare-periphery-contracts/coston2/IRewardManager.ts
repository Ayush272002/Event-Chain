/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace RewardsV2Interface {
  export type RewardClaimStruct = {
    rewardEpochId: PromiseOrValue<BigNumberish>;
    beneficiary: PromiseOrValue<BytesLike>;
    amount: PromiseOrValue<BigNumberish>;
    claimType: PromiseOrValue<BigNumberish>;
  };

  export type RewardClaimStructOutput = [number, string, BigNumber, number] & {
    rewardEpochId: number;
    beneficiary: string;
    amount: BigNumber;
    claimType: number;
  };

  export type RewardClaimWithProofStruct = {
    merkleProof: PromiseOrValue<BytesLike>[];
    body: RewardsV2Interface.RewardClaimStruct;
  };

  export type RewardClaimWithProofStructOutput = [
    string[],
    RewardsV2Interface.RewardClaimStructOutput
  ] & {
    merkleProof: string[];
    body: RewardsV2Interface.RewardClaimStructOutput;
  };

  export type RewardStateStruct = {
    rewardEpochId: PromiseOrValue<BigNumberish>;
    beneficiary: PromiseOrValue<BytesLike>;
    amount: PromiseOrValue<BigNumberish>;
    claimType: PromiseOrValue<BigNumberish>;
    initialised: PromiseOrValue<boolean>;
  };

  export type RewardStateStructOutput = [
    number,
    string,
    BigNumber,
    number,
    boolean
  ] & {
    rewardEpochId: number;
    beneficiary: string;
    amount: BigNumber;
    claimType: number;
    initialised: boolean;
  };
}

export declare namespace IRewardManager {
  export type UnclaimedRewardStateStruct = {
    initialised: PromiseOrValue<boolean>;
    amount: PromiseOrValue<BigNumberish>;
    weight: PromiseOrValue<BigNumberish>;
  };

  export type UnclaimedRewardStateStructOutput = [
    boolean,
    BigNumber,
    BigNumber
  ] & { initialised: boolean; amount: BigNumber; weight: BigNumber };
}

export interface IRewardManagerInterface extends utils.Interface {
  functions: {
    "active()": FunctionFragment;
    "autoClaim(address[],uint24,(bytes32[],(uint24,bytes20,uint120,uint8))[])": FunctionFragment;
    "claim(address,address,uint24,bool,(bytes32[],(uint24,bytes20,uint120,uint8))[])": FunctionFragment;
    "cleanupBlockNumber()": FunctionFragment;
    "firstClaimableRewardEpochId()": FunctionFragment;
    "getCurrentRewardEpochId()": FunctionFragment;
    "getInitialRewardEpochId()": FunctionFragment;
    "getNextClaimableRewardEpochId(address)": FunctionFragment;
    "getRewardEpochIdToExpireNext()": FunctionFragment;
    "getRewardEpochIdsWithClaimableRewards()": FunctionFragment;
    "getRewardEpochTotals(uint24)": FunctionFragment;
    "getStateOfRewards(address)": FunctionFragment;
    "getStateOfRewardsAt(address,uint24)": FunctionFragment;
    "getTotals()": FunctionFragment;
    "getUnclaimedRewardState(address,uint24,uint8)": FunctionFragment;
    "initialiseWeightBasedClaims((bytes32[],(uint24,bytes20,uint120,uint8))[])": FunctionFragment;
    "noOfInitialisedWeightBasedClaims(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "active"
      | "autoClaim"
      | "claim"
      | "cleanupBlockNumber"
      | "firstClaimableRewardEpochId"
      | "getCurrentRewardEpochId"
      | "getInitialRewardEpochId"
      | "getNextClaimableRewardEpochId"
      | "getRewardEpochIdToExpireNext"
      | "getRewardEpochIdsWithClaimableRewards"
      | "getRewardEpochTotals"
      | "getStateOfRewards"
      | "getStateOfRewardsAt"
      | "getTotals"
      | "getUnclaimedRewardState"
      | "initialiseWeightBasedClaims"
      | "noOfInitialisedWeightBasedClaims"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "active", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "autoClaim",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      RewardsV2Interface.RewardClaimWithProofStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      RewardsV2Interface.RewardClaimWithProofStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cleanupBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "firstClaimableRewardEpochId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRewardEpochId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitialRewardEpochId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextClaimableRewardEpochId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardEpochIdToExpireNext",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardEpochIdsWithClaimableRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardEpochTotals",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStateOfRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStateOfRewardsAt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getTotals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUnclaimedRewardState",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialiseWeightBasedClaims",
    values: [RewardsV2Interface.RewardClaimWithProofStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "noOfInitialisedWeightBasedClaims",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "active", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "autoClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cleanupBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstClaimableRewardEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRewardEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitialRewardEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextClaimableRewardEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardEpochIdToExpireNext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardEpochIdsWithClaimableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardEpochTotals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateOfRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateOfRewardsAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTotals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUnclaimedRewardState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialiseWeightBasedClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "noOfInitialisedWeightBasedClaims",
    data: BytesLike
  ): Result;

  events: {
    "RewardClaimed(address,address,address,uint24,uint8,uint120)": EventFragment;
    "RewardClaimsEnabled(uint256)": EventFragment;
    "RewardClaimsExpired(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimsEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimsExpired"): EventFragment;
}

export interface RewardClaimedEventObject {
  beneficiary: string;
  rewardOwner: string;
  recipient: string;
  rewardEpochId: number;
  claimType: number;
  amount: BigNumber;
}
export type RewardClaimedEvent = TypedEvent<
  [string, string, string, number, number, BigNumber],
  RewardClaimedEventObject
>;

export type RewardClaimedEventFilter = TypedEventFilter<RewardClaimedEvent>;

export interface RewardClaimsEnabledEventObject {
  rewardEpochId: BigNumber;
}
export type RewardClaimsEnabledEvent = TypedEvent<
  [BigNumber],
  RewardClaimsEnabledEventObject
>;

export type RewardClaimsEnabledEventFilter =
  TypedEventFilter<RewardClaimsEnabledEvent>;

export interface RewardClaimsExpiredEventObject {
  rewardEpochId: BigNumber;
}
export type RewardClaimsExpiredEvent = TypedEvent<
  [BigNumber],
  RewardClaimsExpiredEventObject
>;

export type RewardClaimsExpiredEventFilter =
  TypedEventFilter<RewardClaimsExpiredEvent>;

export interface IRewardManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRewardManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    active(overrides?: CallOverrides): Promise<[boolean]>;

    autoClaim(
      _rewardOwners: PromiseOrValue<string>[],
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _proofs: RewardsV2Interface.RewardClaimWithProofStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claim(
      _rewardOwner: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _wrap: PromiseOrValue<boolean>,
      _proofs: RewardsV2Interface.RewardClaimWithProofStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cleanupBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    firstClaimableRewardEpochId(overrides?: CallOverrides): Promise<[number]>;

    getCurrentRewardEpochId(overrides?: CallOverrides): Promise<[number]>;

    getInitialRewardEpochId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNextClaimableRewardEpochId(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRewardEpochIdToExpireNext(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRewardEpochIdsWithClaimableRewards(
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { _startEpochId: number; _endEpochId: number }
    >;

    getRewardEpochTotals(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _totalRewardsWei: BigNumber;
        _totalInflationRewardsWei: BigNumber;
        _initialisedRewardsWei: BigNumber;
        _claimedRewardsWei: BigNumber;
        _burnedRewardsWei: BigNumber;
      }
    >;

    getStateOfRewards(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [RewardsV2Interface.RewardStateStructOutput[][]] & {
        _rewardStates: RewardsV2Interface.RewardStateStructOutput[][];
      }
    >;

    getStateOfRewardsAt(
      _rewardOwner: PromiseOrValue<string>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [RewardsV2Interface.RewardStateStructOutput[]] & {
        _rewardStates: RewardsV2Interface.RewardStateStructOutput[];
      }
    >;

    getTotals(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        _totalRewardsWei: BigNumber;
        _totalInflationRewardsWei: BigNumber;
        _totalClaimedWei: BigNumber;
        _totalBurnedWei: BigNumber;
      }
    >;

    getUnclaimedRewardState(
      _beneficiary: PromiseOrValue<string>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _claimType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IRewardManager.UnclaimedRewardStateStructOutput] & {
        _state: IRewardManager.UnclaimedRewardStateStructOutput;
      }
    >;

    initialiseWeightBasedClaims(
      _proofs: RewardsV2Interface.RewardClaimWithProofStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    noOfInitialisedWeightBasedClaims(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  active(overrides?: CallOverrides): Promise<boolean>;

  autoClaim(
    _rewardOwners: PromiseOrValue<string>[],
    _rewardEpochId: PromiseOrValue<BigNumberish>,
    _proofs: RewardsV2Interface.RewardClaimWithProofStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claim(
    _rewardOwner: PromiseOrValue<string>,
    _recipient: PromiseOrValue<string>,
    _rewardEpochId: PromiseOrValue<BigNumberish>,
    _wrap: PromiseOrValue<boolean>,
    _proofs: RewardsV2Interface.RewardClaimWithProofStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cleanupBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  firstClaimableRewardEpochId(overrides?: CallOverrides): Promise<number>;

  getCurrentRewardEpochId(overrides?: CallOverrides): Promise<number>;

  getInitialRewardEpochId(overrides?: CallOverrides): Promise<BigNumber>;

  getNextClaimableRewardEpochId(
    _rewardOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardEpochIdToExpireNext(overrides?: CallOverrides): Promise<BigNumber>;

  getRewardEpochIdsWithClaimableRewards(
    overrides?: CallOverrides
  ): Promise<[number, number] & { _startEpochId: number; _endEpochId: number }>;

  getRewardEpochTotals(
    _rewardEpochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      _totalRewardsWei: BigNumber;
      _totalInflationRewardsWei: BigNumber;
      _initialisedRewardsWei: BigNumber;
      _claimedRewardsWei: BigNumber;
      _burnedRewardsWei: BigNumber;
    }
  >;

  getStateOfRewards(
    _rewardOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<RewardsV2Interface.RewardStateStructOutput[][]>;

  getStateOfRewardsAt(
    _rewardOwner: PromiseOrValue<string>,
    _rewardEpochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<RewardsV2Interface.RewardStateStructOutput[]>;

  getTotals(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      _totalRewardsWei: BigNumber;
      _totalInflationRewardsWei: BigNumber;
      _totalClaimedWei: BigNumber;
      _totalBurnedWei: BigNumber;
    }
  >;

  getUnclaimedRewardState(
    _beneficiary: PromiseOrValue<string>,
    _rewardEpochId: PromiseOrValue<BigNumberish>,
    _claimType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IRewardManager.UnclaimedRewardStateStructOutput>;

  initialiseWeightBasedClaims(
    _proofs: RewardsV2Interface.RewardClaimWithProofStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  noOfInitialisedWeightBasedClaims(
    _rewardEpochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    active(overrides?: CallOverrides): Promise<boolean>;

    autoClaim(
      _rewardOwners: PromiseOrValue<string>[],
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _proofs: RewardsV2Interface.RewardClaimWithProofStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    claim(
      _rewardOwner: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _wrap: PromiseOrValue<boolean>,
      _proofs: RewardsV2Interface.RewardClaimWithProofStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cleanupBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    firstClaimableRewardEpochId(overrides?: CallOverrides): Promise<number>;

    getCurrentRewardEpochId(overrides?: CallOverrides): Promise<number>;

    getInitialRewardEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    getNextClaimableRewardEpochId(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardEpochIdToExpireNext(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardEpochIdsWithClaimableRewards(
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { _startEpochId: number; _endEpochId: number }
    >;

    getRewardEpochTotals(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _totalRewardsWei: BigNumber;
        _totalInflationRewardsWei: BigNumber;
        _initialisedRewardsWei: BigNumber;
        _claimedRewardsWei: BigNumber;
        _burnedRewardsWei: BigNumber;
      }
    >;

    getStateOfRewards(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<RewardsV2Interface.RewardStateStructOutput[][]>;

    getStateOfRewardsAt(
      _rewardOwner: PromiseOrValue<string>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<RewardsV2Interface.RewardStateStructOutput[]>;

    getTotals(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        _totalRewardsWei: BigNumber;
        _totalInflationRewardsWei: BigNumber;
        _totalClaimedWei: BigNumber;
        _totalBurnedWei: BigNumber;
      }
    >;

    getUnclaimedRewardState(
      _beneficiary: PromiseOrValue<string>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _claimType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IRewardManager.UnclaimedRewardStateStructOutput>;

    initialiseWeightBasedClaims(
      _proofs: RewardsV2Interface.RewardClaimWithProofStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    noOfInitialisedWeightBasedClaims(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "RewardClaimed(address,address,address,uint24,uint8,uint120)"(
      beneficiary?: PromiseOrValue<string> | null,
      rewardOwner?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      rewardEpochId?: null,
      claimType?: null,
      amount?: null
    ): RewardClaimedEventFilter;
    RewardClaimed(
      beneficiary?: PromiseOrValue<string> | null,
      rewardOwner?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      rewardEpochId?: null,
      claimType?: null,
      amount?: null
    ): RewardClaimedEventFilter;

    "RewardClaimsEnabled(uint256)"(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null
    ): RewardClaimsEnabledEventFilter;
    RewardClaimsEnabled(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null
    ): RewardClaimsEnabledEventFilter;

    "RewardClaimsExpired(uint256)"(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null
    ): RewardClaimsExpiredEventFilter;
    RewardClaimsExpired(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null
    ): RewardClaimsExpiredEventFilter;
  };

  estimateGas: {
    active(overrides?: CallOverrides): Promise<BigNumber>;

    autoClaim(
      _rewardOwners: PromiseOrValue<string>[],
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _proofs: RewardsV2Interface.RewardClaimWithProofStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claim(
      _rewardOwner: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _wrap: PromiseOrValue<boolean>,
      _proofs: RewardsV2Interface.RewardClaimWithProofStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cleanupBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    firstClaimableRewardEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentRewardEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    getInitialRewardEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    getNextClaimableRewardEpochId(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardEpochIdToExpireNext(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardEpochIdsWithClaimableRewards(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardEpochTotals(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStateOfRewards(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStateOfRewardsAt(
      _rewardOwner: PromiseOrValue<string>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotals(overrides?: CallOverrides): Promise<BigNumber>;

    getUnclaimedRewardState(
      _beneficiary: PromiseOrValue<string>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _claimType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialiseWeightBasedClaims(
      _proofs: RewardsV2Interface.RewardClaimWithProofStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    noOfInitialisedWeightBasedClaims(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    active(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    autoClaim(
      _rewardOwners: PromiseOrValue<string>[],
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _proofs: RewardsV2Interface.RewardClaimWithProofStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      _rewardOwner: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _wrap: PromiseOrValue<boolean>,
      _proofs: RewardsV2Interface.RewardClaimWithProofStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cleanupBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    firstClaimableRewardEpochId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentRewardEpochId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitialRewardEpochId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextClaimableRewardEpochId(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardEpochIdToExpireNext(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardEpochIdsWithClaimableRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardEpochTotals(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStateOfRewards(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStateOfRewardsAt(
      _rewardOwner: PromiseOrValue<string>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUnclaimedRewardState(
      _beneficiary: PromiseOrValue<string>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _claimType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialiseWeightBasedClaims(
      _proofs: RewardsV2Interface.RewardClaimWithProofStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    noOfInitialisedWeightBasedClaims(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

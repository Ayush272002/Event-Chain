/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IFtsoFeedPublisher {
  export type FeedStruct = {
    votingRoundId: PromiseOrValue<BigNumberish>;
    id: PromiseOrValue<BytesLike>;
    value: PromiseOrValue<BigNumberish>;
    turnoutBIPS: PromiseOrValue<BigNumberish>;
    decimals: PromiseOrValue<BigNumberish>;
  };

  export type FeedStructOutput = [number, string, number, number, number] & {
    votingRoundId: number;
    id: string;
    value: number;
    turnoutBIPS: number;
    decimals: number;
  };

  export type FeedWithProofStruct = {
    merkleProof: PromiseOrValue<BytesLike>[];
    body: IFtsoFeedPublisher.FeedStruct;
  };

  export type FeedWithProofStructOutput = [
    string[],
    IFtsoFeedPublisher.FeedStructOutput
  ] & { merkleProof: string[]; body: IFtsoFeedPublisher.FeedStructOutput };
}

export interface IFtsoFeedPublisherInterface extends utils.Interface {
  functions: {
    "feedsHistorySize()": FunctionFragment;
    "ftsoProtocolId()": FunctionFragment;
    "getCurrentFeed(bytes21)": FunctionFragment;
    "getFeed(bytes21,uint256)": FunctionFragment;
    "publish((bytes32[],(uint32,bytes21,int32,uint16,int8))[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "feedsHistorySize"
      | "ftsoProtocolId"
      | "getCurrentFeed"
      | "getFeed"
      | "publish"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "feedsHistorySize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ftsoProtocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentFeed",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeed",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "publish",
    values: [IFtsoFeedPublisher.FeedWithProofStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "feedsHistorySize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ftsoProtocolId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFeed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "publish", data: BytesLike): Result;

  events: {
    "FtsoFeedPublished(uint32,bytes21,int32,uint16,int8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FtsoFeedPublished"): EventFragment;
}

export interface FtsoFeedPublishedEventObject {
  votingRoundId: number;
  id: string;
  value: number;
  turnoutBIPS: number;
  decimals: number;
}
export type FtsoFeedPublishedEvent = TypedEvent<
  [number, string, number, number, number],
  FtsoFeedPublishedEventObject
>;

export type FtsoFeedPublishedEventFilter =
  TypedEventFilter<FtsoFeedPublishedEvent>;

export interface IFtsoFeedPublisher extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFtsoFeedPublisherInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    feedsHistorySize(overrides?: CallOverrides): Promise<[BigNumber]>;

    ftsoProtocolId(overrides?: CallOverrides): Promise<[number]>;

    getCurrentFeed(
      _feedId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IFtsoFeedPublisher.FeedStructOutput]>;

    getFeed(
      _feedId: PromiseOrValue<BytesLike>,
      _votingRoundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IFtsoFeedPublisher.FeedStructOutput]>;

    publish(
      _proofs: IFtsoFeedPublisher.FeedWithProofStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  feedsHistorySize(overrides?: CallOverrides): Promise<BigNumber>;

  ftsoProtocolId(overrides?: CallOverrides): Promise<number>;

  getCurrentFeed(
    _feedId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IFtsoFeedPublisher.FeedStructOutput>;

  getFeed(
    _feedId: PromiseOrValue<BytesLike>,
    _votingRoundId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IFtsoFeedPublisher.FeedStructOutput>;

  publish(
    _proofs: IFtsoFeedPublisher.FeedWithProofStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    feedsHistorySize(overrides?: CallOverrides): Promise<BigNumber>;

    ftsoProtocolId(overrides?: CallOverrides): Promise<number>;

    getCurrentFeed(
      _feedId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IFtsoFeedPublisher.FeedStructOutput>;

    getFeed(
      _feedId: PromiseOrValue<BytesLike>,
      _votingRoundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IFtsoFeedPublisher.FeedStructOutput>;

    publish(
      _proofs: IFtsoFeedPublisher.FeedWithProofStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FtsoFeedPublished(uint32,bytes21,int32,uint16,int8)"(
      votingRoundId?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BytesLike> | null,
      value?: null,
      turnoutBIPS?: null,
      decimals?: null
    ): FtsoFeedPublishedEventFilter;
    FtsoFeedPublished(
      votingRoundId?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BytesLike> | null,
      value?: null,
      turnoutBIPS?: null,
      decimals?: null
    ): FtsoFeedPublishedEventFilter;
  };

  estimateGas: {
    feedsHistorySize(overrides?: CallOverrides): Promise<BigNumber>;

    ftsoProtocolId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentFeed(
      _feedId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeed(
      _feedId: PromiseOrValue<BytesLike>,
      _votingRoundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publish(
      _proofs: IFtsoFeedPublisher.FeedWithProofStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    feedsHistorySize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ftsoProtocolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentFeed(
      _feedId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeed(
      _feedId: PromiseOrValue<BytesLike>,
      _votingRoundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publish(
      _proofs: IFtsoFeedPublisher.FeedWithProofStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

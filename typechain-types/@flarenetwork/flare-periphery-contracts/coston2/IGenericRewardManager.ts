/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IGenericRewardManagerInterface extends utils.Interface {
  functions: {
    "active()": FunctionFragment;
    "allowedClaimRecipients(address)": FunctionFragment;
    "claim(address,address,uint256,bool)": FunctionFragment;
    "claimExecutors(address)": FunctionFragment;
    "getStateOfRewards(address)": FunctionFragment;
    "setAllowedClaimRecipients(address[])": FunctionFragment;
    "setClaimExecutors(address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "active"
      | "allowedClaimRecipients"
      | "claim"
      | "claimExecutors"
      | "getStateOfRewards"
      | "setAllowedClaimRecipients"
      | "setClaimExecutors"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "active", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowedClaimRecipients",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimExecutors",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStateOfRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedClaimRecipients",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimExecutors",
    values: [PromiseOrValue<string>[]]
  ): string;

  decodeFunctionResult(functionFragment: "active", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedClaimRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimExecutors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateOfRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedClaimRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimExecutors",
    data: BytesLike
  ): Result;

  events: {
    "AllowedClaimRecipientsChanged(address,address[])": EventFragment;
    "ClaimExecutorsChanged(address,address[])": EventFragment;
    "RewardClaimed(address,address,uint256)": EventFragment;
    "RewardManagerActivated(address)": EventFragment;
    "RewardManagerDeactivated(address)": EventFragment;
    "RewardsDistributed(address[],uint256[])": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AllowedClaimRecipientsChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimExecutorsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardManagerActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardManagerDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDistributed"): EventFragment;
}

export interface AllowedClaimRecipientsChangedEventObject {
  rewardOwner: string;
  recipients: string[];
}
export type AllowedClaimRecipientsChangedEvent = TypedEvent<
  [string, string[]],
  AllowedClaimRecipientsChangedEventObject
>;

export type AllowedClaimRecipientsChangedEventFilter =
  TypedEventFilter<AllowedClaimRecipientsChangedEvent>;

export interface ClaimExecutorsChangedEventObject {
  rewardOwner: string;
  executors: string[];
}
export type ClaimExecutorsChangedEvent = TypedEvent<
  [string, string[]],
  ClaimExecutorsChangedEventObject
>;

export type ClaimExecutorsChangedEventFilter =
  TypedEventFilter<ClaimExecutorsChangedEvent>;

export interface RewardClaimedEventObject {
  beneficiary: string;
  sentTo: string;
  amount: BigNumber;
}
export type RewardClaimedEvent = TypedEvent<
  [string, string, BigNumber],
  RewardClaimedEventObject
>;

export type RewardClaimedEventFilter = TypedEventFilter<RewardClaimedEvent>;

export interface RewardManagerActivatedEventObject {
  rewardManager: string;
}
export type RewardManagerActivatedEvent = TypedEvent<
  [string],
  RewardManagerActivatedEventObject
>;

export type RewardManagerActivatedEventFilter =
  TypedEventFilter<RewardManagerActivatedEvent>;

export interface RewardManagerDeactivatedEventObject {
  rewardManager: string;
}
export type RewardManagerDeactivatedEvent = TypedEvent<
  [string],
  RewardManagerDeactivatedEventObject
>;

export type RewardManagerDeactivatedEventFilter =
  TypedEventFilter<RewardManagerDeactivatedEvent>;

export interface RewardsDistributedEventObject {
  addresses: string[];
  rewards: BigNumber[];
}
export type RewardsDistributedEvent = TypedEvent<
  [string[], BigNumber[]],
  RewardsDistributedEventObject
>;

export type RewardsDistributedEventFilter =
  TypedEventFilter<RewardsDistributedEvent>;

export interface IGenericRewardManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGenericRewardManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    active(overrides?: CallOverrides): Promise<[boolean]>;

    allowedClaimRecipients(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    claim(
      _rewardOwner: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _rewardAmount: PromiseOrValue<BigNumberish>,
      _wrap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimExecutors(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getStateOfRewards(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _totalReward: BigNumber;
        _claimedReward: BigNumber;
      }
    >;

    setAllowedClaimRecipients(
      _recipients: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setClaimExecutors(
      _executors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  active(overrides?: CallOverrides): Promise<boolean>;

  allowedClaimRecipients(
    _rewardOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  claim(
    _rewardOwner: PromiseOrValue<string>,
    _recipient: PromiseOrValue<string>,
    _rewardAmount: PromiseOrValue<BigNumberish>,
    _wrap: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimExecutors(
    _rewardOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getStateOfRewards(
    _beneficiary: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      _totalReward: BigNumber;
      _claimedReward: BigNumber;
    }
  >;

  setAllowedClaimRecipients(
    _recipients: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setClaimExecutors(
    _executors: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    active(overrides?: CallOverrides): Promise<boolean>;

    allowedClaimRecipients(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    claim(
      _rewardOwner: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _rewardAmount: PromiseOrValue<BigNumberish>,
      _wrap: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimExecutors(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getStateOfRewards(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _totalReward: BigNumber;
        _claimedReward: BigNumber;
      }
    >;

    setAllowedClaimRecipients(
      _recipients: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setClaimExecutors(
      _executors: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AllowedClaimRecipientsChanged(address,address[])"(
      rewardOwner?: null,
      recipients?: null
    ): AllowedClaimRecipientsChangedEventFilter;
    AllowedClaimRecipientsChanged(
      rewardOwner?: null,
      recipients?: null
    ): AllowedClaimRecipientsChangedEventFilter;

    "ClaimExecutorsChanged(address,address[])"(
      rewardOwner?: null,
      executors?: null
    ): ClaimExecutorsChangedEventFilter;
    ClaimExecutorsChanged(
      rewardOwner?: null,
      executors?: null
    ): ClaimExecutorsChangedEventFilter;

    "RewardClaimed(address,address,uint256)"(
      beneficiary?: PromiseOrValue<string> | null,
      sentTo?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardClaimedEventFilter;
    RewardClaimed(
      beneficiary?: PromiseOrValue<string> | null,
      sentTo?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardClaimedEventFilter;

    "RewardManagerActivated(address)"(
      rewardManager?: null
    ): RewardManagerActivatedEventFilter;
    RewardManagerActivated(
      rewardManager?: null
    ): RewardManagerActivatedEventFilter;

    "RewardManagerDeactivated(address)"(
      rewardManager?: null
    ): RewardManagerDeactivatedEventFilter;
    RewardManagerDeactivated(
      rewardManager?: null
    ): RewardManagerDeactivatedEventFilter;

    "RewardsDistributed(address[],uint256[])"(
      addresses?: null,
      rewards?: null
    ): RewardsDistributedEventFilter;
    RewardsDistributed(
      addresses?: null,
      rewards?: null
    ): RewardsDistributedEventFilter;
  };

  estimateGas: {
    active(overrides?: CallOverrides): Promise<BigNumber>;

    allowedClaimRecipients(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      _rewardOwner: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _rewardAmount: PromiseOrValue<BigNumberish>,
      _wrap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimExecutors(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStateOfRewards(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAllowedClaimRecipients(
      _recipients: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setClaimExecutors(
      _executors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    active(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowedClaimRecipients(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      _rewardOwner: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _rewardAmount: PromiseOrValue<BigNumberish>,
      _wrap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimExecutors(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStateOfRewards(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAllowedClaimRecipients(
      _recipients: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setClaimExecutors(
      _executors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

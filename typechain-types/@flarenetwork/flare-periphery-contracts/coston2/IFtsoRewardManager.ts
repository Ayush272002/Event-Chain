/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IFtsoRewardManagerInterface extends utils.Interface {
  functions: {
    "active()": FunctionFragment;
    "autoClaim(address[],uint256)": FunctionFragment;
    "claim(address,address,uint256,bool)": FunctionFragment;
    "claimFromDataProviders(address,address,uint256[],address[],bool)": FunctionFragment;
    "claimReward(address,uint256[])": FunctionFragment;
    "claimRewardFromDataProviders(address,uint256[],address[])": FunctionFragment;
    "getClaimedReward(uint256,address,address)": FunctionFragment;
    "getCurrentRewardEpoch()": FunctionFragment;
    "getDataProviderCurrentFeePercentage(address)": FunctionFragment;
    "getDataProviderFeePercentage(address,uint256)": FunctionFragment;
    "getDataProviderPerformanceInfo(uint256,address)": FunctionFragment;
    "getDataProviderScheduledFeePercentageChanges(address)": FunctionFragment;
    "getEpochReward(uint256)": FunctionFragment;
    "getEpochsWithClaimableRewards()": FunctionFragment;
    "getEpochsWithUnclaimedRewards(address)": FunctionFragment;
    "getInitialRewardEpoch()": FunctionFragment;
    "getRewardEpochToExpireNext()": FunctionFragment;
    "getRewardEpochVotePowerBlock(uint256)": FunctionFragment;
    "getStateOfRewards(address,uint256)": FunctionFragment;
    "getStateOfRewardsFromDataProviders(address,uint256,address[])": FunctionFragment;
    "nextClaimableRewardEpoch(address)": FunctionFragment;
    "setDataProviderFeePercentage(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "active"
      | "autoClaim"
      | "claim"
      | "claimFromDataProviders"
      | "claimReward"
      | "claimRewardFromDataProviders"
      | "getClaimedReward"
      | "getCurrentRewardEpoch"
      | "getDataProviderCurrentFeePercentage"
      | "getDataProviderFeePercentage"
      | "getDataProviderPerformanceInfo"
      | "getDataProviderScheduledFeePercentageChanges"
      | "getEpochReward"
      | "getEpochsWithClaimableRewards"
      | "getEpochsWithUnclaimedRewards"
      | "getInitialRewardEpoch"
      | "getRewardEpochToExpireNext"
      | "getRewardEpochVotePowerBlock"
      | "getStateOfRewards"
      | "getStateOfRewardsFromDataProviders"
      | "nextClaimableRewardEpoch"
      | "setDataProviderFeePercentage"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "active", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "autoClaim",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromDataProviders",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardFromDataProviders",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimedReward",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRewardEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDataProviderCurrentFeePercentage",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataProviderFeePercentage",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataProviderPerformanceInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataProviderScheduledFeePercentageChanges",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochsWithClaimableRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochsWithUnclaimedRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInitialRewardEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardEpochToExpireNext",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardEpochVotePowerBlock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStateOfRewards",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStateOfRewardsFromDataProviders",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nextClaimableRewardEpoch",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDataProviderFeePercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "active", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "autoClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimFromDataProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardFromDataProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRewardEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataProviderCurrentFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataProviderFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataProviderPerformanceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataProviderScheduledFeePercentageChanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochsWithClaimableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochsWithUnclaimedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitialRewardEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardEpochToExpireNext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardEpochVotePowerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateOfRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateOfRewardsFromDataProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextClaimableRewardEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDataProviderFeePercentage",
    data: BytesLike
  ): Result;

  events: {
    "FeePercentageChanged(address,uint256,uint256)": EventFragment;
    "FtsoRewardManagerActivated(address)": EventFragment;
    "FtsoRewardManagerDeactivated(address)": EventFragment;
    "RewardClaimed(address,address,address,uint256,uint256)": EventFragment;
    "RewardClaimsEnabled(uint256)": EventFragment;
    "RewardClaimsExpired(uint256)": EventFragment;
    "RewardsDistributed(address,uint256,address[],uint256[])": EventFragment;
    "UnearnedRewardsAccrued(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeePercentageChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FtsoRewardManagerActivated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FtsoRewardManagerDeactivated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimsEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimsExpired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnearnedRewardsAccrued"): EventFragment;
}

export interface FeePercentageChangedEventObject {
  dataProvider: string;
  value: BigNumber;
  validFromEpoch: BigNumber;
}
export type FeePercentageChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  FeePercentageChangedEventObject
>;

export type FeePercentageChangedEventFilter =
  TypedEventFilter<FeePercentageChangedEvent>;

export interface FtsoRewardManagerActivatedEventObject {
  ftsoRewardManager: string;
}
export type FtsoRewardManagerActivatedEvent = TypedEvent<
  [string],
  FtsoRewardManagerActivatedEventObject
>;

export type FtsoRewardManagerActivatedEventFilter =
  TypedEventFilter<FtsoRewardManagerActivatedEvent>;

export interface FtsoRewardManagerDeactivatedEventObject {
  ftsoRewardManager: string;
}
export type FtsoRewardManagerDeactivatedEvent = TypedEvent<
  [string],
  FtsoRewardManagerDeactivatedEventObject
>;

export type FtsoRewardManagerDeactivatedEventFilter =
  TypedEventFilter<FtsoRewardManagerDeactivatedEvent>;

export interface RewardClaimedEventObject {
  dataProvider: string;
  whoClaimed: string;
  sentTo: string;
  rewardEpoch: BigNumber;
  amount: BigNumber;
}
export type RewardClaimedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  RewardClaimedEventObject
>;

export type RewardClaimedEventFilter = TypedEventFilter<RewardClaimedEvent>;

export interface RewardClaimsEnabledEventObject {
  rewardEpochId: BigNumber;
}
export type RewardClaimsEnabledEvent = TypedEvent<
  [BigNumber],
  RewardClaimsEnabledEventObject
>;

export type RewardClaimsEnabledEventFilter =
  TypedEventFilter<RewardClaimsEnabledEvent>;

export interface RewardClaimsExpiredEventObject {
  rewardEpochId: BigNumber;
}
export type RewardClaimsExpiredEvent = TypedEvent<
  [BigNumber],
  RewardClaimsExpiredEventObject
>;

export type RewardClaimsExpiredEventFilter =
  TypedEventFilter<RewardClaimsExpiredEvent>;

export interface RewardsDistributedEventObject {
  ftso: string;
  epochId: BigNumber;
  addresses: string[];
  rewards: BigNumber[];
}
export type RewardsDistributedEvent = TypedEvent<
  [string, BigNumber, string[], BigNumber[]],
  RewardsDistributedEventObject
>;

export type RewardsDistributedEventFilter =
  TypedEventFilter<RewardsDistributedEvent>;

export interface UnearnedRewardsAccruedEventObject {
  epochId: BigNumber;
  reward: BigNumber;
}
export type UnearnedRewardsAccruedEvent = TypedEvent<
  [BigNumber, BigNumber],
  UnearnedRewardsAccruedEventObject
>;

export type UnearnedRewardsAccruedEventFilter =
  TypedEventFilter<UnearnedRewardsAccruedEvent>;

export interface IFtsoRewardManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFtsoRewardManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    active(overrides?: CallOverrides): Promise<[boolean]>;

    autoClaim(
      _rewardOwners: PromiseOrValue<string>[],
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claim(
      _rewardOwner: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      _wrap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimFromDataProviders(
      _rewardOwner: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _rewardEpochs: PromiseOrValue<BigNumberish>[],
      _dataProviders: PromiseOrValue<string>[],
      _wrap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      _recipient: PromiseOrValue<string>,
      _rewardEpochs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimRewardFromDataProviders(
      _recipient: PromiseOrValue<string>,
      _rewardEpochs: PromiseOrValue<BigNumberish>[],
      _dataProviders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getClaimedReward(
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      _dataProvider: PromiseOrValue<string>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { _claimed: boolean; _amount: BigNumber }
    >;

    getCurrentRewardEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDataProviderCurrentFeePercentage(
      _dataProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _feePercentageBIPS: BigNumber }>;

    getDataProviderFeePercentage(
      _dataProvider: PromiseOrValue<string>,
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _feePercentageBIPS: BigNumber }>;

    getDataProviderPerformanceInfo(
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      _dataProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _rewardAmount: BigNumber;
        _votePowerIgnoringRevocation: BigNumber;
      }
    >;

    getDataProviderScheduledFeePercentageChanges(
      _dataProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], boolean[]] & {
        _feePercentageBIPS: BigNumber[];
        _validFromEpoch: BigNumber[];
        _fixed: boolean[];
      }
    >;

    getEpochReward(
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _totalReward: BigNumber;
        _claimedReward: BigNumber;
      }
    >;

    getEpochsWithClaimableRewards(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _startEpochId: BigNumber;
        _endEpochId: BigNumber;
      }
    >;

    getEpochsWithUnclaimedRewards(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _epochIds: BigNumber[] }>;

    getInitialRewardEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewardEpochToExpireNext(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewardEpochVotePowerBlock(
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStateOfRewards(
      _beneficiary: PromiseOrValue<string>,
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], boolean[], boolean] & {
        _dataProviders: string[];
        _rewardAmounts: BigNumber[];
        _claimed: boolean[];
        _claimable: boolean;
      }
    >;

    getStateOfRewardsFromDataProviders(
      _beneficiary: PromiseOrValue<string>,
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      _dataProviders: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], boolean[], boolean] & {
        _rewardAmounts: BigNumber[];
        _claimed: boolean[];
        _claimable: boolean;
      }
    >;

    nextClaimableRewardEpoch(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setDataProviderFeePercentage(
      _feePercentageBIPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  active(overrides?: CallOverrides): Promise<boolean>;

  autoClaim(
    _rewardOwners: PromiseOrValue<string>[],
    _rewardEpoch: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claim(
    _rewardOwner: PromiseOrValue<string>,
    _recipient: PromiseOrValue<string>,
    _rewardEpoch: PromiseOrValue<BigNumberish>,
    _wrap: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimFromDataProviders(
    _rewardOwner: PromiseOrValue<string>,
    _recipient: PromiseOrValue<string>,
    _rewardEpochs: PromiseOrValue<BigNumberish>[],
    _dataProviders: PromiseOrValue<string>[],
    _wrap: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    _recipient: PromiseOrValue<string>,
    _rewardEpochs: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimRewardFromDataProviders(
    _recipient: PromiseOrValue<string>,
    _rewardEpochs: PromiseOrValue<BigNumberish>[],
    _dataProviders: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getClaimedReward(
    _rewardEpoch: PromiseOrValue<BigNumberish>,
    _dataProvider: PromiseOrValue<string>,
    _claimer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { _claimed: boolean; _amount: BigNumber }>;

  getCurrentRewardEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  getDataProviderCurrentFeePercentage(
    _dataProvider: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDataProviderFeePercentage(
    _dataProvider: PromiseOrValue<string>,
    _rewardEpoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDataProviderPerformanceInfo(
    _rewardEpoch: PromiseOrValue<BigNumberish>,
    _dataProvider: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      _rewardAmount: BigNumber;
      _votePowerIgnoringRevocation: BigNumber;
    }
  >;

  getDataProviderScheduledFeePercentageChanges(
    _dataProvider: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[], boolean[]] & {
      _feePercentageBIPS: BigNumber[];
      _validFromEpoch: BigNumber[];
      _fixed: boolean[];
    }
  >;

  getEpochReward(
    _rewardEpoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      _totalReward: BigNumber;
      _claimedReward: BigNumber;
    }
  >;

  getEpochsWithClaimableRewards(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      _startEpochId: BigNumber;
      _endEpochId: BigNumber;
    }
  >;

  getEpochsWithUnclaimedRewards(
    _beneficiary: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getInitialRewardEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  getRewardEpochToExpireNext(overrides?: CallOverrides): Promise<BigNumber>;

  getRewardEpochVotePowerBlock(
    _rewardEpoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStateOfRewards(
    _beneficiary: PromiseOrValue<string>,
    _rewardEpoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[], boolean[], boolean] & {
      _dataProviders: string[];
      _rewardAmounts: BigNumber[];
      _claimed: boolean[];
      _claimable: boolean;
    }
  >;

  getStateOfRewardsFromDataProviders(
    _beneficiary: PromiseOrValue<string>,
    _rewardEpoch: PromiseOrValue<BigNumberish>,
    _dataProviders: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], boolean[], boolean] & {
      _rewardAmounts: BigNumber[];
      _claimed: boolean[];
      _claimable: boolean;
    }
  >;

  nextClaimableRewardEpoch(
    _rewardOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setDataProviderFeePercentage(
    _feePercentageBIPS: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    active(overrides?: CallOverrides): Promise<boolean>;

    autoClaim(
      _rewardOwners: PromiseOrValue<string>[],
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(
      _rewardOwner: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      _wrap: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimFromDataProviders(
      _rewardOwner: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _rewardEpochs: PromiseOrValue<BigNumberish>[],
      _dataProviders: PromiseOrValue<string>[],
      _wrap: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(
      _recipient: PromiseOrValue<string>,
      _rewardEpochs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewardFromDataProviders(
      _recipient: PromiseOrValue<string>,
      _rewardEpochs: PromiseOrValue<BigNumberish>[],
      _dataProviders: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimedReward(
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      _dataProvider: PromiseOrValue<string>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { _claimed: boolean; _amount: BigNumber }
    >;

    getCurrentRewardEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getDataProviderCurrentFeePercentage(
      _dataProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDataProviderFeePercentage(
      _dataProvider: PromiseOrValue<string>,
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDataProviderPerformanceInfo(
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      _dataProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _rewardAmount: BigNumber;
        _votePowerIgnoringRevocation: BigNumber;
      }
    >;

    getDataProviderScheduledFeePercentageChanges(
      _dataProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], boolean[]] & {
        _feePercentageBIPS: BigNumber[];
        _validFromEpoch: BigNumber[];
        _fixed: boolean[];
      }
    >;

    getEpochReward(
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _totalReward: BigNumber;
        _claimedReward: BigNumber;
      }
    >;

    getEpochsWithClaimableRewards(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _startEpochId: BigNumber;
        _endEpochId: BigNumber;
      }
    >;

    getEpochsWithUnclaimedRewards(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getInitialRewardEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardEpochToExpireNext(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardEpochVotePowerBlock(
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStateOfRewards(
      _beneficiary: PromiseOrValue<string>,
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], boolean[], boolean] & {
        _dataProviders: string[];
        _rewardAmounts: BigNumber[];
        _claimed: boolean[];
        _claimable: boolean;
      }
    >;

    getStateOfRewardsFromDataProviders(
      _beneficiary: PromiseOrValue<string>,
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      _dataProviders: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], boolean[], boolean] & {
        _rewardAmounts: BigNumber[];
        _claimed: boolean[];
        _claimable: boolean;
      }
    >;

    nextClaimableRewardEpoch(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDataProviderFeePercentage(
      _feePercentageBIPS: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "FeePercentageChanged(address,uint256,uint256)"(
      dataProvider?: PromiseOrValue<string> | null,
      value?: null,
      validFromEpoch?: null
    ): FeePercentageChangedEventFilter;
    FeePercentageChanged(
      dataProvider?: PromiseOrValue<string> | null,
      value?: null,
      validFromEpoch?: null
    ): FeePercentageChangedEventFilter;

    "FtsoRewardManagerActivated(address)"(
      ftsoRewardManager?: null
    ): FtsoRewardManagerActivatedEventFilter;
    FtsoRewardManagerActivated(
      ftsoRewardManager?: null
    ): FtsoRewardManagerActivatedEventFilter;

    "FtsoRewardManagerDeactivated(address)"(
      ftsoRewardManager?: null
    ): FtsoRewardManagerDeactivatedEventFilter;
    FtsoRewardManagerDeactivated(
      ftsoRewardManager?: null
    ): FtsoRewardManagerDeactivatedEventFilter;

    "RewardClaimed(address,address,address,uint256,uint256)"(
      dataProvider?: PromiseOrValue<string> | null,
      whoClaimed?: PromiseOrValue<string> | null,
      sentTo?: PromiseOrValue<string> | null,
      rewardEpoch?: null,
      amount?: null
    ): RewardClaimedEventFilter;
    RewardClaimed(
      dataProvider?: PromiseOrValue<string> | null,
      whoClaimed?: PromiseOrValue<string> | null,
      sentTo?: PromiseOrValue<string> | null,
      rewardEpoch?: null,
      amount?: null
    ): RewardClaimedEventFilter;

    "RewardClaimsEnabled(uint256)"(
      rewardEpochId?: null
    ): RewardClaimsEnabledEventFilter;
    RewardClaimsEnabled(rewardEpochId?: null): RewardClaimsEnabledEventFilter;

    "RewardClaimsExpired(uint256)"(
      rewardEpochId?: null
    ): RewardClaimsExpiredEventFilter;
    RewardClaimsExpired(rewardEpochId?: null): RewardClaimsExpiredEventFilter;

    "RewardsDistributed(address,uint256,address[],uint256[])"(
      ftso?: PromiseOrValue<string> | null,
      epochId?: null,
      addresses?: null,
      rewards?: null
    ): RewardsDistributedEventFilter;
    RewardsDistributed(
      ftso?: PromiseOrValue<string> | null,
      epochId?: null,
      addresses?: null,
      rewards?: null
    ): RewardsDistributedEventFilter;

    "UnearnedRewardsAccrued(uint256,uint256)"(
      epochId?: null,
      reward?: null
    ): UnearnedRewardsAccruedEventFilter;
    UnearnedRewardsAccrued(
      epochId?: null,
      reward?: null
    ): UnearnedRewardsAccruedEventFilter;
  };

  estimateGas: {
    active(overrides?: CallOverrides): Promise<BigNumber>;

    autoClaim(
      _rewardOwners: PromiseOrValue<string>[],
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claim(
      _rewardOwner: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      _wrap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimFromDataProviders(
      _rewardOwner: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _rewardEpochs: PromiseOrValue<BigNumberish>[],
      _dataProviders: PromiseOrValue<string>[],
      _wrap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimReward(
      _recipient: PromiseOrValue<string>,
      _rewardEpochs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimRewardFromDataProviders(
      _recipient: PromiseOrValue<string>,
      _rewardEpochs: PromiseOrValue<BigNumberish>[],
      _dataProviders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getClaimedReward(
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      _dataProvider: PromiseOrValue<string>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentRewardEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getDataProviderCurrentFeePercentage(
      _dataProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDataProviderFeePercentage(
      _dataProvider: PromiseOrValue<string>,
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDataProviderPerformanceInfo(
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      _dataProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDataProviderScheduledFeePercentageChanges(
      _dataProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochReward(
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochsWithClaimableRewards(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochsWithUnclaimedRewards(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInitialRewardEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardEpochToExpireNext(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardEpochVotePowerBlock(
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStateOfRewards(
      _beneficiary: PromiseOrValue<string>,
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStateOfRewardsFromDataProviders(
      _beneficiary: PromiseOrValue<string>,
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      _dataProviders: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextClaimableRewardEpoch(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDataProviderFeePercentage(
      _feePercentageBIPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    active(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    autoClaim(
      _rewardOwners: PromiseOrValue<string>[],
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      _rewardOwner: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      _wrap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimFromDataProviders(
      _rewardOwner: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _rewardEpochs: PromiseOrValue<BigNumberish>[],
      _dataProviders: PromiseOrValue<string>[],
      _wrap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      _recipient: PromiseOrValue<string>,
      _rewardEpochs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimRewardFromDataProviders(
      _recipient: PromiseOrValue<string>,
      _rewardEpochs: PromiseOrValue<BigNumberish>[],
      _dataProviders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getClaimedReward(
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      _dataProvider: PromiseOrValue<string>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentRewardEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDataProviderCurrentFeePercentage(
      _dataProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDataProviderFeePercentage(
      _dataProvider: PromiseOrValue<string>,
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDataProviderPerformanceInfo(
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      _dataProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDataProviderScheduledFeePercentageChanges(
      _dataProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochReward(
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochsWithClaimableRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochsWithUnclaimedRewards(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitialRewardEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardEpochToExpireNext(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardEpochVotePowerBlock(
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStateOfRewards(
      _beneficiary: PromiseOrValue<string>,
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStateOfRewardsFromDataProviders(
      _beneficiary: PromiseOrValue<string>,
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      _dataProviders: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextClaimableRewardEpoch(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDataProviderFeePercentage(
      _feePercentageBIPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

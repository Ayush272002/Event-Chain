/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IPriceSubmitterInterface extends utils.Interface {
  functions: {
    "getCurrentRandom()": FunctionFragment;
    "getFtsoManager()": FunctionFragment;
    "getFtsoRegistry()": FunctionFragment;
    "getRandom(uint256)": FunctionFragment;
    "getVoterWhitelister()": FunctionFragment;
    "revealPrices(uint256,uint256[],uint256[],uint256)": FunctionFragment;
    "submitHash(uint256,bytes32)": FunctionFragment;
    "voterWhitelistBitmap(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getCurrentRandom"
      | "getFtsoManager"
      | "getFtsoRegistry"
      | "getRandom"
      | "getVoterWhitelister"
      | "revealPrices"
      | "submitHash"
      | "voterWhitelistBitmap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getCurrentRandom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFtsoManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFtsoRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRandom",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterWhitelister",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealPrices",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitHash",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "voterWhitelistBitmap",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCurrentRandom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFtsoManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFtsoRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRandom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVoterWhitelister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voterWhitelistBitmap",
    data: BytesLike
  ): Result;

  events: {
    "HashSubmitted(address,uint256,bytes32,uint256)": EventFragment;
    "PricesRevealed(address,uint256,address[],uint256[],uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HashSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PricesRevealed"): EventFragment;
}

export interface HashSubmittedEventObject {
  submitter: string;
  epochId: BigNumber;
  hash: string;
  timestamp: BigNumber;
}
export type HashSubmittedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  HashSubmittedEventObject
>;

export type HashSubmittedEventFilter = TypedEventFilter<HashSubmittedEvent>;

export interface PricesRevealedEventObject {
  voter: string;
  epochId: BigNumber;
  ftsos: string[];
  prices: BigNumber[];
  random: BigNumber;
  timestamp: BigNumber;
}
export type PricesRevealedEvent = TypedEvent<
  [string, BigNumber, string[], BigNumber[], BigNumber, BigNumber],
  PricesRevealedEventObject
>;

export type PricesRevealedEventFilter = TypedEventFilter<PricesRevealedEvent>;

export interface IPriceSubmitter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPriceSubmitterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getCurrentRandom(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFtsoManager(overrides?: CallOverrides): Promise<[string]>;

    getFtsoRegistry(overrides?: CallOverrides): Promise<[string]>;

    getRandom(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVoterWhitelister(overrides?: CallOverrides): Promise<[string]>;

    revealPrices(
      _epochId: PromiseOrValue<BigNumberish>,
      _ftsoIndices: PromiseOrValue<BigNumberish>[],
      _prices: PromiseOrValue<BigNumberish>[],
      _random: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitHash(
      _epochId: PromiseOrValue<BigNumberish>,
      _hash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voterWhitelistBitmap(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  getCurrentRandom(overrides?: CallOverrides): Promise<BigNumber>;

  getFtsoManager(overrides?: CallOverrides): Promise<string>;

  getFtsoRegistry(overrides?: CallOverrides): Promise<string>;

  getRandom(
    _epochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVoterWhitelister(overrides?: CallOverrides): Promise<string>;

  revealPrices(
    _epochId: PromiseOrValue<BigNumberish>,
    _ftsoIndices: PromiseOrValue<BigNumberish>[],
    _prices: PromiseOrValue<BigNumberish>[],
    _random: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitHash(
    _epochId: PromiseOrValue<BigNumberish>,
    _hash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voterWhitelistBitmap(
    _voter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    getCurrentRandom(overrides?: CallOverrides): Promise<BigNumber>;

    getFtsoManager(overrides?: CallOverrides): Promise<string>;

    getFtsoRegistry(overrides?: CallOverrides): Promise<string>;

    getRandom(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterWhitelister(overrides?: CallOverrides): Promise<string>;

    revealPrices(
      _epochId: PromiseOrValue<BigNumberish>,
      _ftsoIndices: PromiseOrValue<BigNumberish>[],
      _prices: PromiseOrValue<BigNumberish>[],
      _random: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitHash(
      _epochId: PromiseOrValue<BigNumberish>,
      _hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    voterWhitelistBitmap(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "HashSubmitted(address,uint256,bytes32,uint256)"(
      submitter?: PromiseOrValue<string> | null,
      epochId?: PromiseOrValue<BigNumberish> | null,
      hash?: null,
      timestamp?: null
    ): HashSubmittedEventFilter;
    HashSubmitted(
      submitter?: PromiseOrValue<string> | null,
      epochId?: PromiseOrValue<BigNumberish> | null,
      hash?: null,
      timestamp?: null
    ): HashSubmittedEventFilter;

    "PricesRevealed(address,uint256,address[],uint256[],uint256,uint256)"(
      voter?: PromiseOrValue<string> | null,
      epochId?: PromiseOrValue<BigNumberish> | null,
      ftsos?: null,
      prices?: null,
      random?: null,
      timestamp?: null
    ): PricesRevealedEventFilter;
    PricesRevealed(
      voter?: PromiseOrValue<string> | null,
      epochId?: PromiseOrValue<BigNumberish> | null,
      ftsos?: null,
      prices?: null,
      random?: null,
      timestamp?: null
    ): PricesRevealedEventFilter;
  };

  estimateGas: {
    getCurrentRandom(overrides?: CallOverrides): Promise<BigNumber>;

    getFtsoManager(overrides?: CallOverrides): Promise<BigNumber>;

    getFtsoRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getRandom(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterWhitelister(overrides?: CallOverrides): Promise<BigNumber>;

    revealPrices(
      _epochId: PromiseOrValue<BigNumberish>,
      _ftsoIndices: PromiseOrValue<BigNumberish>[],
      _prices: PromiseOrValue<BigNumberish>[],
      _random: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitHash(
      _epochId: PromiseOrValue<BigNumberish>,
      _hash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voterWhitelistBitmap(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCurrentRandom(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFtsoManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFtsoRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRandom(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterWhitelister(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revealPrices(
      _epochId: PromiseOrValue<BigNumberish>,
      _ftsoIndices: PromiseOrValue<BigNumberish>[],
      _prices: PromiseOrValue<BigNumberish>[],
      _random: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitHash(
      _epochId: PromiseOrValue<BigNumberish>,
      _hash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voterWhitelistBitmap(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

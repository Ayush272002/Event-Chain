/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IRNatInterface extends utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "claimRewards(uint256[],uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "distributeRewards(uint256,uint256,address[],uint128[])": FunctionFragment;
    "firstMonthStartTs()": FunctionFragment;
    "getBalancesOf(address)": FunctionFragment;
    "getClaimableRewards(uint256,address)": FunctionFragment;
    "getCurrentMonth()": FunctionFragment;
    "getOwnerRewardsInfo(uint256,uint256,address)": FunctionFragment;
    "getProjectInfo(uint256)": FunctionFragment;
    "getProjectRewardsInfo(uint256,uint256)": FunctionFragment;
    "getProjectsBasicInfo()": FunctionFragment;
    "getProjectsCount()": FunctionFragment;
    "getRNatAccount(address)": FunctionFragment;
    "getRewardsInfo()": FunctionFragment;
    "name()": FunctionFragment;
    "setClaimExecutors(address[])": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferExternalToken(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "wNat()": FunctionFragment;
    "withdraw(uint128,bool)": FunctionFragment;
    "withdrawAll(bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "claimRewards"
      | "decimals"
      | "distributeRewards"
      | "firstMonthStartTs"
      | "getBalancesOf"
      | "getClaimableRewards"
      | "getCurrentMonth"
      | "getOwnerRewardsInfo"
      | "getProjectInfo"
      | "getProjectRewardsInfo"
      | "getProjectsBasicInfo"
      | "getProjectsCount"
      | "getRNatAccount"
      | "getRewardsInfo"
      | "name"
      | "setClaimExecutors"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferExternalToken"
      | "transferFrom"
      | "wNat"
      | "withdraw"
      | "withdrawAll"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distributeRewards",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "firstMonthStartTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalancesOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableRewards",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentMonth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerRewardsInfo",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectRewardsInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectsBasicInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRNatAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsInfo",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setClaimExecutors",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferExternalToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "wNat", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values: [PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstMonthStartTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalancesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentMonth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerRewardsInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectRewardsInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectsBasicInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRNatAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setClaimExecutors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferExternalToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wNat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ClaimingPermissionUpdated(uint256[],bool)": EventFragment;
    "DistributionPermissionUpdated(uint256[],bool)": EventFragment;
    "ProjectAdded(uint256,string,address,bool)": EventFragment;
    "ProjectUpdated(uint256,string,address,bool)": EventFragment;
    "RNatAccountCreated(address,address)": EventFragment;
    "RewardsAssigned(uint256,uint256,uint128)": EventFragment;
    "RewardsClaimed(uint256,uint256,address,uint128)": EventFragment;
    "RewardsDistributed(uint256,uint256,address[],uint128[])": EventFragment;
    "RewardsUnassigned(uint256,uint256,uint128)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UnassignedRewardsWithdrawn(address,uint128)": EventFragment;
    "UnclaimedRewardsUnassigned(uint256,uint256,uint128)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimingPermissionUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DistributionPermissionUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RNatAccountCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsAssigned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsUnassigned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnassignedRewardsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnclaimedRewardsUnassigned"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ClaimingPermissionUpdatedEventObject {
  projectIds: BigNumber[];
  disabled: boolean;
}
export type ClaimingPermissionUpdatedEvent = TypedEvent<
  [BigNumber[], boolean],
  ClaimingPermissionUpdatedEventObject
>;

export type ClaimingPermissionUpdatedEventFilter =
  TypedEventFilter<ClaimingPermissionUpdatedEvent>;

export interface DistributionPermissionUpdatedEventObject {
  projectIds: BigNumber[];
  disabled: boolean;
}
export type DistributionPermissionUpdatedEvent = TypedEvent<
  [BigNumber[], boolean],
  DistributionPermissionUpdatedEventObject
>;

export type DistributionPermissionUpdatedEventFilter =
  TypedEventFilter<DistributionPermissionUpdatedEvent>;

export interface ProjectAddedEventObject {
  id: BigNumber;
  name: string;
  distributor: string;
  currentMonthDistributionEnabled: boolean;
}
export type ProjectAddedEvent = TypedEvent<
  [BigNumber, string, string, boolean],
  ProjectAddedEventObject
>;

export type ProjectAddedEventFilter = TypedEventFilter<ProjectAddedEvent>;

export interface ProjectUpdatedEventObject {
  id: BigNumber;
  name: string;
  distributor: string;
  currentMonthDistributionEnabled: boolean;
}
export type ProjectUpdatedEvent = TypedEvent<
  [BigNumber, string, string, boolean],
  ProjectUpdatedEventObject
>;

export type ProjectUpdatedEventFilter = TypedEventFilter<ProjectUpdatedEvent>;

export interface RNatAccountCreatedEventObject {
  owner: string;
  rNatAccount: string;
}
export type RNatAccountCreatedEvent = TypedEvent<
  [string, string],
  RNatAccountCreatedEventObject
>;

export type RNatAccountCreatedEventFilter =
  TypedEventFilter<RNatAccountCreatedEvent>;

export interface RewardsAssignedEventObject {
  projectId: BigNumber;
  month: BigNumber;
  amount: BigNumber;
}
export type RewardsAssignedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  RewardsAssignedEventObject
>;

export type RewardsAssignedEventFilter = TypedEventFilter<RewardsAssignedEvent>;

export interface RewardsClaimedEventObject {
  projectId: BigNumber;
  month: BigNumber;
  owner: string;
  amount: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  RewardsClaimedEventObject
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface RewardsDistributedEventObject {
  projectId: BigNumber;
  month: BigNumber;
  recipients: string[];
  amounts: BigNumber[];
}
export type RewardsDistributedEvent = TypedEvent<
  [BigNumber, BigNumber, string[], BigNumber[]],
  RewardsDistributedEventObject
>;

export type RewardsDistributedEventFilter =
  TypedEventFilter<RewardsDistributedEvent>;

export interface RewardsUnassignedEventObject {
  projectId: BigNumber;
  month: BigNumber;
  amount: BigNumber;
}
export type RewardsUnassignedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  RewardsUnassignedEventObject
>;

export type RewardsUnassignedEventFilter =
  TypedEventFilter<RewardsUnassignedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnassignedRewardsWithdrawnEventObject {
  recipient: string;
  amount: BigNumber;
}
export type UnassignedRewardsWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  UnassignedRewardsWithdrawnEventObject
>;

export type UnassignedRewardsWithdrawnEventFilter =
  TypedEventFilter<UnassignedRewardsWithdrawnEvent>;

export interface UnclaimedRewardsUnassignedEventObject {
  projectId: BigNumber;
  month: BigNumber;
  amount: BigNumber;
}
export type UnclaimedRewardsUnassignedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  UnclaimedRewardsUnassignedEventObject
>;

export type UnclaimedRewardsUnassignedEventFilter =
  TypedEventFilter<UnclaimedRewardsUnassignedEvent>;

export interface IRNat extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRNatInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimRewards(
      _projectIds: PromiseOrValue<BigNumberish>[],
      _month: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    distributeRewards(
      _projectId: PromiseOrValue<BigNumberish>,
      _month: PromiseOrValue<BigNumberish>,
      _recipients: PromiseOrValue<string>[],
      _amountsWei: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    firstMonthStartTs(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBalancesOf(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _wNatBalance: BigNumber;
        _rNatBalance: BigNumber;
        _lockedBalance: BigNumber;
      }
    >;

    getClaimableRewards(
      _projectId: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentMonth(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOwnerRewardsInfo(
      _projectId: PromiseOrValue<BigNumberish>,
      _month: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        _assignedRewards: BigNumber;
        _claimedRewards: BigNumber;
        _claimable: boolean;
      }
    >;

    getProjectInfo(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
      ] & {
        _name: string;
        _distributor: string;
        _currentMonthDistributionEnabled: boolean;
        _distributionDisabled: boolean;
        _claimingDisabled: boolean;
        _totalAssignedRewards: BigNumber;
        _totalDistributedRewards: BigNumber;
        _totalClaimedRewards: BigNumber;
        _totalUnassignedUnclaimedRewards: BigNumber;
        _monthsWithRewards: BigNumber[];
      }
    >;

    getProjectRewardsInfo(
      _projectId: PromiseOrValue<BigNumberish>,
      _month: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        _assignedRewards: BigNumber;
        _distributedRewards: BigNumber;
        _claimedRewards: BigNumber;
        _unassignedUnclaimedRewards: BigNumber;
      }
    >;

    getProjectsBasicInfo(
      overrides?: CallOverrides
    ): Promise<
      [string[], boolean[]] & { _names: string[]; _claimingDisabled: boolean[] }
    >;

    getProjectsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRNatAccount(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRewardsInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _totalAssignableRewards: BigNumber;
        _totalAssignedRewards: BigNumber;
        _totalClaimedRewards: BigNumber;
        _totalWithdrawnRewards: BigNumber;
        _totalWithdrawnAssignableRewards: BigNumber;
      }
    >;

    name(overrides?: CallOverrides): Promise<[string]>;

    setClaimExecutors(
      _executors: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferExternalToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wNat(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      _wrap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      _wrap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimRewards(
    _projectIds: PromiseOrValue<BigNumberish>[],
    _month: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  distributeRewards(
    _projectId: PromiseOrValue<BigNumberish>,
    _month: PromiseOrValue<BigNumberish>,
    _recipients: PromiseOrValue<string>[],
    _amountsWei: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  firstMonthStartTs(overrides?: CallOverrides): Promise<BigNumber>;

  getBalancesOf(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      _wNatBalance: BigNumber;
      _rNatBalance: BigNumber;
      _lockedBalance: BigNumber;
    }
  >;

  getClaimableRewards(
    _projectId: PromiseOrValue<BigNumberish>,
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentMonth(overrides?: CallOverrides): Promise<BigNumber>;

  getOwnerRewardsInfo(
    _projectId: PromiseOrValue<BigNumberish>,
    _month: PromiseOrValue<BigNumberish>,
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      _assignedRewards: BigNumber;
      _claimedRewards: BigNumber;
      _claimable: boolean;
    }
  >;

  getProjectInfo(
    _projectId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      boolean,
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber[]
    ] & {
      _name: string;
      _distributor: string;
      _currentMonthDistributionEnabled: boolean;
      _distributionDisabled: boolean;
      _claimingDisabled: boolean;
      _totalAssignedRewards: BigNumber;
      _totalDistributedRewards: BigNumber;
      _totalClaimedRewards: BigNumber;
      _totalUnassignedUnclaimedRewards: BigNumber;
      _monthsWithRewards: BigNumber[];
    }
  >;

  getProjectRewardsInfo(
    _projectId: PromiseOrValue<BigNumberish>,
    _month: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      _assignedRewards: BigNumber;
      _distributedRewards: BigNumber;
      _claimedRewards: BigNumber;
      _unassignedUnclaimedRewards: BigNumber;
    }
  >;

  getProjectsBasicInfo(
    overrides?: CallOverrides
  ): Promise<
    [string[], boolean[]] & { _names: string[]; _claimingDisabled: boolean[] }
  >;

  getProjectsCount(overrides?: CallOverrides): Promise<BigNumber>;

  getRNatAccount(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRewardsInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      _totalAssignableRewards: BigNumber;
      _totalAssignedRewards: BigNumber;
      _totalClaimedRewards: BigNumber;
      _totalWithdrawnRewards: BigNumber;
      _totalWithdrawnAssignableRewards: BigNumber;
    }
  >;

  name(overrides?: CallOverrides): Promise<string>;

  setClaimExecutors(
    _executors: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferExternalToken(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wNat(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _amount: PromiseOrValue<BigNumberish>,
    _wrap: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    _wrap: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewards(
      _projectIds: PromiseOrValue<BigNumberish>[],
      _month: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    distributeRewards(
      _projectId: PromiseOrValue<BigNumberish>,
      _month: PromiseOrValue<BigNumberish>,
      _recipients: PromiseOrValue<string>[],
      _amountsWei: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    firstMonthStartTs(overrides?: CallOverrides): Promise<BigNumber>;

    getBalancesOf(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _wNatBalance: BigNumber;
        _rNatBalance: BigNumber;
        _lockedBalance: BigNumber;
      }
    >;

    getClaimableRewards(
      _projectId: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentMonth(overrides?: CallOverrides): Promise<BigNumber>;

    getOwnerRewardsInfo(
      _projectId: PromiseOrValue<BigNumberish>,
      _month: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        _assignedRewards: BigNumber;
        _claimedRewards: BigNumber;
        _claimable: boolean;
      }
    >;

    getProjectInfo(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
      ] & {
        _name: string;
        _distributor: string;
        _currentMonthDistributionEnabled: boolean;
        _distributionDisabled: boolean;
        _claimingDisabled: boolean;
        _totalAssignedRewards: BigNumber;
        _totalDistributedRewards: BigNumber;
        _totalClaimedRewards: BigNumber;
        _totalUnassignedUnclaimedRewards: BigNumber;
        _monthsWithRewards: BigNumber[];
      }
    >;

    getProjectRewardsInfo(
      _projectId: PromiseOrValue<BigNumberish>,
      _month: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        _assignedRewards: BigNumber;
        _distributedRewards: BigNumber;
        _claimedRewards: BigNumber;
        _unassignedUnclaimedRewards: BigNumber;
      }
    >;

    getProjectsBasicInfo(
      overrides?: CallOverrides
    ): Promise<
      [string[], boolean[]] & { _names: string[]; _claimingDisabled: boolean[] }
    >;

    getProjectsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getRNatAccount(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRewardsInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _totalAssignableRewards: BigNumber;
        _totalAssignedRewards: BigNumber;
        _totalClaimedRewards: BigNumber;
        _totalWithdrawnRewards: BigNumber;
        _totalWithdrawnAssignableRewards: BigNumber;
      }
    >;

    name(overrides?: CallOverrides): Promise<string>;

    setClaimExecutors(
      _executors: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferExternalToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    wNat(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      _wrap: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(
      _wrap: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "ClaimingPermissionUpdated(uint256[],bool)"(
      projectIds?: null,
      disabled?: null
    ): ClaimingPermissionUpdatedEventFilter;
    ClaimingPermissionUpdated(
      projectIds?: null,
      disabled?: null
    ): ClaimingPermissionUpdatedEventFilter;

    "DistributionPermissionUpdated(uint256[],bool)"(
      projectIds?: null,
      disabled?: null
    ): DistributionPermissionUpdatedEventFilter;
    DistributionPermissionUpdated(
      projectIds?: null,
      disabled?: null
    ): DistributionPermissionUpdatedEventFilter;

    "ProjectAdded(uint256,string,address,bool)"(
      id?: PromiseOrValue<BigNumberish> | null,
      name?: null,
      distributor?: null,
      currentMonthDistributionEnabled?: null
    ): ProjectAddedEventFilter;
    ProjectAdded(
      id?: PromiseOrValue<BigNumberish> | null,
      name?: null,
      distributor?: null,
      currentMonthDistributionEnabled?: null
    ): ProjectAddedEventFilter;

    "ProjectUpdated(uint256,string,address,bool)"(
      id?: PromiseOrValue<BigNumberish> | null,
      name?: null,
      distributor?: null,
      currentMonthDistributionEnabled?: null
    ): ProjectUpdatedEventFilter;
    ProjectUpdated(
      id?: PromiseOrValue<BigNumberish> | null,
      name?: null,
      distributor?: null,
      currentMonthDistributionEnabled?: null
    ): ProjectUpdatedEventFilter;

    "RNatAccountCreated(address,address)"(
      owner?: null,
      rNatAccount?: null
    ): RNatAccountCreatedEventFilter;
    RNatAccountCreated(
      owner?: null,
      rNatAccount?: null
    ): RNatAccountCreatedEventFilter;

    "RewardsAssigned(uint256,uint256,uint128)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      month?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): RewardsAssignedEventFilter;
    RewardsAssigned(
      projectId?: PromiseOrValue<BigNumberish> | null,
      month?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): RewardsAssignedEventFilter;

    "RewardsClaimed(uint256,uint256,address,uint128)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      month?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      projectId?: PromiseOrValue<BigNumberish> | null,
      month?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardsClaimedEventFilter;

    "RewardsDistributed(uint256,uint256,address[],uint128[])"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      month?: PromiseOrValue<BigNumberish> | null,
      recipients?: null,
      amounts?: null
    ): RewardsDistributedEventFilter;
    RewardsDistributed(
      projectId?: PromiseOrValue<BigNumberish> | null,
      month?: PromiseOrValue<BigNumberish> | null,
      recipients?: null,
      amounts?: null
    ): RewardsDistributedEventFilter;

    "RewardsUnassigned(uint256,uint256,uint128)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      month?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): RewardsUnassignedEventFilter;
    RewardsUnassigned(
      projectId?: PromiseOrValue<BigNumberish> | null,
      month?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): RewardsUnassignedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;

    "UnassignedRewardsWithdrawn(address,uint128)"(
      recipient?: null,
      amount?: null
    ): UnassignedRewardsWithdrawnEventFilter;
    UnassignedRewardsWithdrawn(
      recipient?: null,
      amount?: null
    ): UnassignedRewardsWithdrawnEventFilter;

    "UnclaimedRewardsUnassigned(uint256,uint256,uint128)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      month?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): UnclaimedRewardsUnassignedEventFilter;
    UnclaimedRewardsUnassigned(
      projectId?: PromiseOrValue<BigNumberish> | null,
      month?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): UnclaimedRewardsUnassignedEventFilter;
  };

  estimateGas: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewards(
      _projectIds: PromiseOrValue<BigNumberish>[],
      _month: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    distributeRewards(
      _projectId: PromiseOrValue<BigNumberish>,
      _month: PromiseOrValue<BigNumberish>,
      _recipients: PromiseOrValue<string>[],
      _amountsWei: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    firstMonthStartTs(overrides?: CallOverrides): Promise<BigNumber>;

    getBalancesOf(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimableRewards(
      _projectId: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentMonth(overrides?: CallOverrides): Promise<BigNumber>;

    getOwnerRewardsInfo(
      _projectId: PromiseOrValue<BigNumberish>,
      _month: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProjectInfo(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProjectRewardsInfo(
      _projectId: PromiseOrValue<BigNumberish>,
      _month: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProjectsBasicInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getProjectsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getRNatAccount(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsInfo(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    setClaimExecutors(
      _executors: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferExternalToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wNat(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      _wrap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      _wrap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimRewards(
      _projectIds: PromiseOrValue<BigNumberish>[],
      _month: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributeRewards(
      _projectId: PromiseOrValue<BigNumberish>,
      _month: PromiseOrValue<BigNumberish>,
      _recipients: PromiseOrValue<string>[],
      _amountsWei: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    firstMonthStartTs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBalancesOf(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimableRewards(
      _projectId: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentMonth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwnerRewardsInfo(
      _projectId: PromiseOrValue<BigNumberish>,
      _month: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProjectInfo(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProjectRewardsInfo(
      _projectId: PromiseOrValue<BigNumberish>,
      _month: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProjectsBasicInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProjectsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRNatAccount(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setClaimExecutors(
      _executors: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferExternalToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wNat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      _wrap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      _wrap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

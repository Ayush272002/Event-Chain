/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface IIFtsoInterface extends utils.Interface {
  functions: {
    "activateFtso(uint256,uint256,uint256)": FunctionFragment;
    "active()": FunctionFragment;
    "configureEpochs(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address[])": FunctionFragment;
    "deactivateFtso()": FunctionFragment;
    "epochsConfiguration()": FunctionFragment;
    "fallbackFinalizePriceEpoch(uint256)": FunctionFragment;
    "finalizePriceEpoch(uint256,bool)": FunctionFragment;
    "forceFinalizePriceEpoch(uint256)": FunctionFragment;
    "ftsoManager()": FunctionFragment;
    "getAsset()": FunctionFragment;
    "getAssetFtsos()": FunctionFragment;
    "getCurrentEpochId()": FunctionFragment;
    "getCurrentPrice()": FunctionFragment;
    "getCurrentPriceDetails()": FunctionFragment;
    "getCurrentPriceFromTrustedProviders()": FunctionFragment;
    "getCurrentPriceWithDecimals()": FunctionFragment;
    "getCurrentPriceWithDecimalsFromTrustedProviders()": FunctionFragment;
    "getCurrentRandom()": FunctionFragment;
    "getEpochId(uint256)": FunctionFragment;
    "getEpochPrice(uint256)": FunctionFragment;
    "getEpochPriceForVoter(uint256,address)": FunctionFragment;
    "getPriceEpochConfiguration()": FunctionFragment;
    "getPriceEpochData()": FunctionFragment;
    "getRandom(uint256)": FunctionFragment;
    "getVoteWeightingParameters()": FunctionFragment;
    "initializeCurrentEpochStateForReveal(uint256,bool)": FunctionFragment;
    "revealPriceSubmitter(address,uint256,uint256,uint256)": FunctionFragment;
    "setAsset(address)": FunctionFragment;
    "setAssetFtsos(address[])": FunctionFragment;
    "setVotePowerBlock(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "updateInitialPrice(uint256,uint256)": FunctionFragment;
    "wNat()": FunctionFragment;
    "wNatVotePowerCached(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activateFtso"
      | "active"
      | "configureEpochs"
      | "deactivateFtso"
      | "epochsConfiguration"
      | "fallbackFinalizePriceEpoch"
      | "finalizePriceEpoch"
      | "forceFinalizePriceEpoch"
      | "ftsoManager"
      | "getAsset"
      | "getAssetFtsos"
      | "getCurrentEpochId"
      | "getCurrentPrice"
      | "getCurrentPriceDetails"
      | "getCurrentPriceFromTrustedProviders"
      | "getCurrentPriceWithDecimals"
      | "getCurrentPriceWithDecimalsFromTrustedProviders"
      | "getCurrentRandom"
      | "getEpochId"
      | "getEpochPrice"
      | "getEpochPriceForVoter"
      | "getPriceEpochConfiguration"
      | "getPriceEpochData"
      | "getRandom"
      | "getVoteWeightingParameters"
      | "initializeCurrentEpochStateForReveal"
      | "revealPriceSubmitter"
      | "setAsset"
      | "setAssetFtsos"
      | "setVotePowerBlock"
      | "symbol"
      | "updateInitialPrice"
      | "wNat"
      | "wNatVotePowerCached"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activateFtso",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "active", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "configureEpochs",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateFtso",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochsConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fallbackFinalizePriceEpoch",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizePriceEpoch",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "forceFinalizePriceEpoch",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ftsoManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getAsset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAssetFtsos",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentEpochId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPriceDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPriceFromTrustedProviders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPriceWithDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPriceWithDecimalsFromTrustedProviders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRandom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochPriceForVoter",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceEpochConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceEpochData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRandom",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteWeightingParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeCurrentEpochStateForReveal",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "revealPriceSubmitter",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAsset",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetFtsos",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotePowerBlock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateInitialPrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "wNat", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wNatVotePowerCached",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "activateFtso",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "active", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "configureEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateFtso",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochsConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fallbackFinalizePriceEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizePriceEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceFinalizePriceEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ftsoManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAssetFtsos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPriceDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPriceFromTrustedProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPriceWithDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPriceWithDecimalsFromTrustedProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRandom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEpochId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEpochPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochPriceForVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceEpochConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceEpochData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRandom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVoteWeightingParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeCurrentEpochStateForReveal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealPriceSubmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAssetFtsos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotePowerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateInitialPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wNat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wNatVotePowerCached",
    data: BytesLike
  ): Result;

  events: {
    "LowTurnout(uint256,uint256,uint256,uint256)": EventFragment;
    "PriceEpochInitializedOnFtso(uint256,uint256,uint256)": EventFragment;
    "PriceFinalized(uint256,uint256,bool,uint256,uint256,uint256,uint256,uint8,uint256)": EventFragment;
    "PriceRevealed(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LowTurnout"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PriceEpochInitializedOnFtso"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceRevealed"): EventFragment;
}

export interface LowTurnoutEventObject {
  epochId: BigNumber;
  natTurnout: BigNumber;
  lowNatTurnoutThresholdBIPS: BigNumber;
  timestamp: BigNumber;
}
export type LowTurnoutEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  LowTurnoutEventObject
>;

export type LowTurnoutEventFilter = TypedEventFilter<LowTurnoutEvent>;

export interface PriceEpochInitializedOnFtsoEventObject {
  epochId: BigNumber;
  endTime: BigNumber;
  timestamp: BigNumber;
}
export type PriceEpochInitializedOnFtsoEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  PriceEpochInitializedOnFtsoEventObject
>;

export type PriceEpochInitializedOnFtsoEventFilter =
  TypedEventFilter<PriceEpochInitializedOnFtsoEvent>;

export interface PriceFinalizedEventObject {
  epochId: BigNumber;
  price: BigNumber;
  rewardedFtso: boolean;
  lowIQRRewardPrice: BigNumber;
  highIQRRewardPrice: BigNumber;
  lowElasticBandRewardPrice: BigNumber;
  highElasticBandRewardPrice: BigNumber;
  finalizationType: number;
  timestamp: BigNumber;
}
export type PriceFinalizedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber
  ],
  PriceFinalizedEventObject
>;

export type PriceFinalizedEventFilter = TypedEventFilter<PriceFinalizedEvent>;

export interface PriceRevealedEventObject {
  voter: string;
  epochId: BigNumber;
  price: BigNumber;
  timestamp: BigNumber;
  votePowerNat: BigNumber;
  votePowerAsset: BigNumber;
}
export type PriceRevealedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  PriceRevealedEventObject
>;

export type PriceRevealedEventFilter = TypedEventFilter<PriceRevealedEvent>;

export interface IIFtso extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IIFtsoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activateFtso(
      _firstEpochStartTs: PromiseOrValue<BigNumberish>,
      _submitPeriodSeconds: PromiseOrValue<BigNumberish>,
      _revealPeriodSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    active(overrides?: CallOverrides): Promise<[boolean]>;

    configureEpochs(
      _maxVotePowerNatThresholdFraction: PromiseOrValue<BigNumberish>,
      _maxVotePowerAssetThresholdFraction: PromiseOrValue<BigNumberish>,
      _lowAssetUSDThreshold: PromiseOrValue<BigNumberish>,
      _highAssetUSDThreshold: PromiseOrValue<BigNumberish>,
      _highAssetTurnoutThresholdBIPS: PromiseOrValue<BigNumberish>,
      _lowNatTurnoutThresholdBIPS: PromiseOrValue<BigNumberish>,
      _elasticBandRewardBIPS: PromiseOrValue<BigNumberish>,
      _elasticBandWidthPPM: PromiseOrValue<BigNumberish>,
      _trustedAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deactivateFtso(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    epochsConfiguration(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string[]
      ] & {
        _maxVotePowerNatThresholdFraction: BigNumber;
        _maxVotePowerAssetThresholdFraction: BigNumber;
        _lowAssetUSDThreshold: BigNumber;
        _highAssetUSDThreshold: BigNumber;
        _highAssetTurnoutThresholdBIPS: BigNumber;
        _lowNatTurnoutThresholdBIPS: BigNumber;
        _elasticBandRewardBIPS: BigNumber;
        _elasticBandWidthPPM: BigNumber;
        _trustedAddresses: string[];
      }
    >;

    fallbackFinalizePriceEpoch(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalizePriceEpoch(
      _epochId: PromiseOrValue<BigNumberish>,
      _returnRewardData: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    forceFinalizePriceEpoch(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ftsoManager(overrides?: CallOverrides): Promise<[string]>;

    getAsset(overrides?: CallOverrides): Promise<[string]>;

    getAssetFtsos(overrides?: CallOverrides): Promise<[string[]]>;

    getCurrentEpochId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentPrice(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _price: BigNumber; _timestamp: BigNumber }
    >;

    getCurrentPriceDetails(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber, number] & {
        _price: BigNumber;
        _priceTimestamp: BigNumber;
        _priceFinalizationType: number;
        _lastPriceEpochFinalizationTimestamp: BigNumber;
        _lastPriceEpochFinalizationType: number;
      }
    >;

    getCurrentPriceFromTrustedProviders(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _price: BigNumber; _timestamp: BigNumber }
    >;

    getCurrentPriceWithDecimals(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _price: BigNumber;
        _timestamp: BigNumber;
        _assetPriceUsdDecimals: BigNumber;
      }
    >;

    getCurrentPriceWithDecimalsFromTrustedProviders(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _price: BigNumber;
        _timestamp: BigNumber;
        _assetPriceUsdDecimals: BigNumber;
      }
    >;

    getCurrentRandom(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEpochId(
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEpochPrice(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEpochPriceForVoter(
      _epochId: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceEpochConfiguration(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _firstEpochStartTs: BigNumber;
        _submitPeriodSeconds: BigNumber;
        _revealPeriodSeconds: BigNumber;
      }
    >;

    getPriceEpochData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        _epochId: BigNumber;
        _epochSubmitEndTime: BigNumber;
        _epochRevealEndTime: BigNumber;
        _votePowerBlock: BigNumber;
        _fallbackMode: boolean;
      }
    >;

    getRandom(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVoteWeightingParameters(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber, BigNumber, BigNumber, BigNumber] & {
        _assets: string[];
        _assetMultipliers: BigNumber[];
        _totalVotePowerNat: BigNumber;
        _totalVotePowerAsset: BigNumber;
        _assetWeightRatio: BigNumber;
        _votePowerBlock: BigNumber;
      }
    >;

    initializeCurrentEpochStateForReveal(
      _circulatingSupplyNat: PromiseOrValue<BigNumberish>,
      _fallbackMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revealPriceSubmitter(
      _voter: PromiseOrValue<string>,
      _epochId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _wNatVP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAsset(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAssetFtsos(
      _assetFtsos: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVotePowerBlock(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    updateInitialPrice(
      _initialPriceUSD: PromiseOrValue<BigNumberish>,
      _initialPriceTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wNat(overrides?: CallOverrides): Promise<[string]>;

    wNatVotePowerCached(
      _voter: PromiseOrValue<string>,
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  activateFtso(
    _firstEpochStartTs: PromiseOrValue<BigNumberish>,
    _submitPeriodSeconds: PromiseOrValue<BigNumberish>,
    _revealPeriodSeconds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  active(overrides?: CallOverrides): Promise<boolean>;

  configureEpochs(
    _maxVotePowerNatThresholdFraction: PromiseOrValue<BigNumberish>,
    _maxVotePowerAssetThresholdFraction: PromiseOrValue<BigNumberish>,
    _lowAssetUSDThreshold: PromiseOrValue<BigNumberish>,
    _highAssetUSDThreshold: PromiseOrValue<BigNumberish>,
    _highAssetTurnoutThresholdBIPS: PromiseOrValue<BigNumberish>,
    _lowNatTurnoutThresholdBIPS: PromiseOrValue<BigNumberish>,
    _elasticBandRewardBIPS: PromiseOrValue<BigNumberish>,
    _elasticBandWidthPPM: PromiseOrValue<BigNumberish>,
    _trustedAddresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deactivateFtso(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  epochsConfiguration(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string[]
    ] & {
      _maxVotePowerNatThresholdFraction: BigNumber;
      _maxVotePowerAssetThresholdFraction: BigNumber;
      _lowAssetUSDThreshold: BigNumber;
      _highAssetUSDThreshold: BigNumber;
      _highAssetTurnoutThresholdBIPS: BigNumber;
      _lowNatTurnoutThresholdBIPS: BigNumber;
      _elasticBandRewardBIPS: BigNumber;
      _elasticBandWidthPPM: BigNumber;
      _trustedAddresses: string[];
    }
  >;

  fallbackFinalizePriceEpoch(
    _epochId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalizePriceEpoch(
    _epochId: PromiseOrValue<BigNumberish>,
    _returnRewardData: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  forceFinalizePriceEpoch(
    _epochId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ftsoManager(overrides?: CallOverrides): Promise<string>;

  getAsset(overrides?: CallOverrides): Promise<string>;

  getAssetFtsos(overrides?: CallOverrides): Promise<string[]>;

  getCurrentEpochId(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentPrice(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _price: BigNumber; _timestamp: BigNumber }
  >;

  getCurrentPriceDetails(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, BigNumber, number] & {
      _price: BigNumber;
      _priceTimestamp: BigNumber;
      _priceFinalizationType: number;
      _lastPriceEpochFinalizationTimestamp: BigNumber;
      _lastPriceEpochFinalizationType: number;
    }
  >;

  getCurrentPriceFromTrustedProviders(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _price: BigNumber; _timestamp: BigNumber }
  >;

  getCurrentPriceWithDecimals(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      _price: BigNumber;
      _timestamp: BigNumber;
      _assetPriceUsdDecimals: BigNumber;
    }
  >;

  getCurrentPriceWithDecimalsFromTrustedProviders(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      _price: BigNumber;
      _timestamp: BigNumber;
      _assetPriceUsdDecimals: BigNumber;
    }
  >;

  getCurrentRandom(overrides?: CallOverrides): Promise<BigNumber>;

  getEpochId(
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEpochPrice(
    _epochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEpochPriceForVoter(
    _epochId: PromiseOrValue<BigNumberish>,
    _voter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceEpochConfiguration(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      _firstEpochStartTs: BigNumber;
      _submitPeriodSeconds: BigNumber;
      _revealPeriodSeconds: BigNumber;
    }
  >;

  getPriceEpochData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      _epochId: BigNumber;
      _epochSubmitEndTime: BigNumber;
      _epochRevealEndTime: BigNumber;
      _votePowerBlock: BigNumber;
      _fallbackMode: boolean;
    }
  >;

  getRandom(
    _epochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVoteWeightingParameters(
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[], BigNumber, BigNumber, BigNumber, BigNumber] & {
      _assets: string[];
      _assetMultipliers: BigNumber[];
      _totalVotePowerNat: BigNumber;
      _totalVotePowerAsset: BigNumber;
      _assetWeightRatio: BigNumber;
      _votePowerBlock: BigNumber;
    }
  >;

  initializeCurrentEpochStateForReveal(
    _circulatingSupplyNat: PromiseOrValue<BigNumberish>,
    _fallbackMode: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revealPriceSubmitter(
    _voter: PromiseOrValue<string>,
    _epochId: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    _wNatVP: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAsset(
    _asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAssetFtsos(
    _assetFtsos: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVotePowerBlock(
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  updateInitialPrice(
    _initialPriceUSD: PromiseOrValue<BigNumberish>,
    _initialPriceTimestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wNat(overrides?: CallOverrides): Promise<string>;

  wNatVotePowerCached(
    _voter: PromiseOrValue<string>,
    _epochId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activateFtso(
      _firstEpochStartTs: PromiseOrValue<BigNumberish>,
      _submitPeriodSeconds: PromiseOrValue<BigNumberish>,
      _revealPeriodSeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    active(overrides?: CallOverrides): Promise<boolean>;

    configureEpochs(
      _maxVotePowerNatThresholdFraction: PromiseOrValue<BigNumberish>,
      _maxVotePowerAssetThresholdFraction: PromiseOrValue<BigNumberish>,
      _lowAssetUSDThreshold: PromiseOrValue<BigNumberish>,
      _highAssetUSDThreshold: PromiseOrValue<BigNumberish>,
      _highAssetTurnoutThresholdBIPS: PromiseOrValue<BigNumberish>,
      _lowNatTurnoutThresholdBIPS: PromiseOrValue<BigNumberish>,
      _elasticBandRewardBIPS: PromiseOrValue<BigNumberish>,
      _elasticBandWidthPPM: PromiseOrValue<BigNumberish>,
      _trustedAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    deactivateFtso(overrides?: CallOverrides): Promise<void>;

    epochsConfiguration(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string[]
      ] & {
        _maxVotePowerNatThresholdFraction: BigNumber;
        _maxVotePowerAssetThresholdFraction: BigNumber;
        _lowAssetUSDThreshold: BigNumber;
        _highAssetUSDThreshold: BigNumber;
        _highAssetTurnoutThresholdBIPS: BigNumber;
        _lowNatTurnoutThresholdBIPS: BigNumber;
        _elasticBandRewardBIPS: BigNumber;
        _elasticBandWidthPPM: BigNumber;
        _trustedAddresses: string[];
      }
    >;

    fallbackFinalizePriceEpoch(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizePriceEpoch(
      _epochId: PromiseOrValue<BigNumberish>,
      _returnRewardData: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber] & {
        _eligibleAddresses: string[];
        _natWeights: BigNumber[];
        _totalNatWeight: BigNumber;
      }
    >;

    forceFinalizePriceEpoch(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    ftsoManager(overrides?: CallOverrides): Promise<string>;

    getAsset(overrides?: CallOverrides): Promise<string>;

    getAssetFtsos(overrides?: CallOverrides): Promise<string[]>;

    getCurrentEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPrice(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _price: BigNumber; _timestamp: BigNumber }
    >;

    getCurrentPriceDetails(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber, number] & {
        _price: BigNumber;
        _priceTimestamp: BigNumber;
        _priceFinalizationType: number;
        _lastPriceEpochFinalizationTimestamp: BigNumber;
        _lastPriceEpochFinalizationType: number;
      }
    >;

    getCurrentPriceFromTrustedProviders(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _price: BigNumber; _timestamp: BigNumber }
    >;

    getCurrentPriceWithDecimals(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _price: BigNumber;
        _timestamp: BigNumber;
        _assetPriceUsdDecimals: BigNumber;
      }
    >;

    getCurrentPriceWithDecimalsFromTrustedProviders(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _price: BigNumber;
        _timestamp: BigNumber;
        _assetPriceUsdDecimals: BigNumber;
      }
    >;

    getCurrentRandom(overrides?: CallOverrides): Promise<BigNumber>;

    getEpochId(
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochPrice(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochPriceForVoter(
      _epochId: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceEpochConfiguration(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _firstEpochStartTs: BigNumber;
        _submitPeriodSeconds: BigNumber;
        _revealPeriodSeconds: BigNumber;
      }
    >;

    getPriceEpochData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        _epochId: BigNumber;
        _epochSubmitEndTime: BigNumber;
        _epochRevealEndTime: BigNumber;
        _votePowerBlock: BigNumber;
        _fallbackMode: boolean;
      }
    >;

    getRandom(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoteWeightingParameters(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber, BigNumber, BigNumber, BigNumber] & {
        _assets: string[];
        _assetMultipliers: BigNumber[];
        _totalVotePowerNat: BigNumber;
        _totalVotePowerAsset: BigNumber;
        _assetWeightRatio: BigNumber;
        _votePowerBlock: BigNumber;
      }
    >;

    initializeCurrentEpochStateForReveal(
      _circulatingSupplyNat: PromiseOrValue<BigNumberish>,
      _fallbackMode: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    revealPriceSubmitter(
      _voter: PromiseOrValue<string>,
      _epochId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _wNatVP: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAssetFtsos(
      _assetFtsos: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setVotePowerBlock(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    updateInitialPrice(
      _initialPriceUSD: PromiseOrValue<BigNumberish>,
      _initialPriceTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    wNat(overrides?: CallOverrides): Promise<string>;

    wNatVotePowerCached(
      _voter: PromiseOrValue<string>,
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "LowTurnout(uint256,uint256,uint256,uint256)"(
      epochId?: PromiseOrValue<BigNumberish> | null,
      natTurnout?: null,
      lowNatTurnoutThresholdBIPS?: null,
      timestamp?: null
    ): LowTurnoutEventFilter;
    LowTurnout(
      epochId?: PromiseOrValue<BigNumberish> | null,
      natTurnout?: null,
      lowNatTurnoutThresholdBIPS?: null,
      timestamp?: null
    ): LowTurnoutEventFilter;

    "PriceEpochInitializedOnFtso(uint256,uint256,uint256)"(
      epochId?: PromiseOrValue<BigNumberish> | null,
      endTime?: null,
      timestamp?: null
    ): PriceEpochInitializedOnFtsoEventFilter;
    PriceEpochInitializedOnFtso(
      epochId?: PromiseOrValue<BigNumberish> | null,
      endTime?: null,
      timestamp?: null
    ): PriceEpochInitializedOnFtsoEventFilter;

    "PriceFinalized(uint256,uint256,bool,uint256,uint256,uint256,uint256,uint8,uint256)"(
      epochId?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      rewardedFtso?: null,
      lowIQRRewardPrice?: null,
      highIQRRewardPrice?: null,
      lowElasticBandRewardPrice?: null,
      highElasticBandRewardPrice?: null,
      finalizationType?: null,
      timestamp?: null
    ): PriceFinalizedEventFilter;
    PriceFinalized(
      epochId?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      rewardedFtso?: null,
      lowIQRRewardPrice?: null,
      highIQRRewardPrice?: null,
      lowElasticBandRewardPrice?: null,
      highElasticBandRewardPrice?: null,
      finalizationType?: null,
      timestamp?: null
    ): PriceFinalizedEventFilter;

    "PriceRevealed(address,uint256,uint256,uint256,uint256,uint256)"(
      voter?: PromiseOrValue<string> | null,
      epochId?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      timestamp?: null,
      votePowerNat?: null,
      votePowerAsset?: null
    ): PriceRevealedEventFilter;
    PriceRevealed(
      voter?: PromiseOrValue<string> | null,
      epochId?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      timestamp?: null,
      votePowerNat?: null,
      votePowerAsset?: null
    ): PriceRevealedEventFilter;
  };

  estimateGas: {
    activateFtso(
      _firstEpochStartTs: PromiseOrValue<BigNumberish>,
      _submitPeriodSeconds: PromiseOrValue<BigNumberish>,
      _revealPeriodSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    active(overrides?: CallOverrides): Promise<BigNumber>;

    configureEpochs(
      _maxVotePowerNatThresholdFraction: PromiseOrValue<BigNumberish>,
      _maxVotePowerAssetThresholdFraction: PromiseOrValue<BigNumberish>,
      _lowAssetUSDThreshold: PromiseOrValue<BigNumberish>,
      _highAssetUSDThreshold: PromiseOrValue<BigNumberish>,
      _highAssetTurnoutThresholdBIPS: PromiseOrValue<BigNumberish>,
      _lowNatTurnoutThresholdBIPS: PromiseOrValue<BigNumberish>,
      _elasticBandRewardBIPS: PromiseOrValue<BigNumberish>,
      _elasticBandWidthPPM: PromiseOrValue<BigNumberish>,
      _trustedAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deactivateFtso(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    epochsConfiguration(overrides?: CallOverrides): Promise<BigNumber>;

    fallbackFinalizePriceEpoch(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalizePriceEpoch(
      _epochId: PromiseOrValue<BigNumberish>,
      _returnRewardData: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    forceFinalizePriceEpoch(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ftsoManager(overrides?: CallOverrides): Promise<BigNumber>;

    getAsset(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetFtsos(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPriceDetails(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPriceFromTrustedProviders(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentPriceWithDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPriceWithDecimalsFromTrustedProviders(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentRandom(overrides?: CallOverrides): Promise<BigNumber>;

    getEpochId(
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochPrice(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochPriceForVoter(
      _epochId: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceEpochConfiguration(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceEpochData(overrides?: CallOverrides): Promise<BigNumber>;

    getRandom(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoteWeightingParameters(overrides?: CallOverrides): Promise<BigNumber>;

    initializeCurrentEpochStateForReveal(
      _circulatingSupplyNat: PromiseOrValue<BigNumberish>,
      _fallbackMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revealPriceSubmitter(
      _voter: PromiseOrValue<string>,
      _epochId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _wNatVP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAsset(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAssetFtsos(
      _assetFtsos: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVotePowerBlock(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    updateInitialPrice(
      _initialPriceUSD: PromiseOrValue<BigNumberish>,
      _initialPriceTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wNat(overrides?: CallOverrides): Promise<BigNumber>;

    wNatVotePowerCached(
      _voter: PromiseOrValue<string>,
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activateFtso(
      _firstEpochStartTs: PromiseOrValue<BigNumberish>,
      _submitPeriodSeconds: PromiseOrValue<BigNumberish>,
      _revealPeriodSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    active(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    configureEpochs(
      _maxVotePowerNatThresholdFraction: PromiseOrValue<BigNumberish>,
      _maxVotePowerAssetThresholdFraction: PromiseOrValue<BigNumberish>,
      _lowAssetUSDThreshold: PromiseOrValue<BigNumberish>,
      _highAssetUSDThreshold: PromiseOrValue<BigNumberish>,
      _highAssetTurnoutThresholdBIPS: PromiseOrValue<BigNumberish>,
      _lowNatTurnoutThresholdBIPS: PromiseOrValue<BigNumberish>,
      _elasticBandRewardBIPS: PromiseOrValue<BigNumberish>,
      _elasticBandWidthPPM: PromiseOrValue<BigNumberish>,
      _trustedAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deactivateFtso(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    epochsConfiguration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fallbackFinalizePriceEpoch(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalizePriceEpoch(
      _epochId: PromiseOrValue<BigNumberish>,
      _returnRewardData: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    forceFinalizePriceEpoch(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ftsoManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetFtsos(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentEpochId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentPriceDetails(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentPriceFromTrustedProviders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentPriceWithDecimals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentPriceWithDecimalsFromTrustedProviders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentRandom(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEpochId(
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochPrice(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochPriceForVoter(
      _epochId: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceEpochConfiguration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceEpochData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRandom(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoteWeightingParameters(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeCurrentEpochStateForReveal(
      _circulatingSupplyNat: PromiseOrValue<BigNumberish>,
      _fallbackMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revealPriceSubmitter(
      _voter: PromiseOrValue<string>,
      _epochId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _wNatVP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAsset(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAssetFtsos(
      _assetFtsos: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVotePowerBlock(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateInitialPrice(
      _initialPriceUSD: PromiseOrValue<BigNumberish>,
      _initialPriceTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wNat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wNatVotePowerCached(
      _voter: PromiseOrValue<string>,
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IWNatDelegationFeeInterface extends utils.Interface {
  functions: {
    "defaultFeePercentageBIPS()": FunctionFragment;
    "feePercentageUpdateOffset()": FunctionFragment;
    "getVoterCurrentFeePercentage(address)": FunctionFragment;
    "getVoterFeePercentage(address,uint256)": FunctionFragment;
    "getVoterScheduledFeePercentageChanges(address)": FunctionFragment;
    "setVoterFeePercentage(uint16)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "defaultFeePercentageBIPS"
      | "feePercentageUpdateOffset"
      | "getVoterCurrentFeePercentage"
      | "getVoterFeePercentage"
      | "getVoterScheduledFeePercentageChanges"
      | "setVoterFeePercentage"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "defaultFeePercentageBIPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feePercentageUpdateOffset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterCurrentFeePercentage",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterFeePercentage",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterScheduledFeePercentageChanges",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVoterFeePercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "defaultFeePercentageBIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feePercentageUpdateOffset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterCurrentFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterScheduledFeePercentageChanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVoterFeePercentage",
    data: BytesLike
  ): Result;

  events: {
    "FeePercentageChanged(address,uint16,uint24)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeePercentageChanged"): EventFragment;
}

export interface FeePercentageChangedEventObject {
  voter: string;
  value: number;
  validFromEpochId: number;
}
export type FeePercentageChangedEvent = TypedEvent<
  [string, number, number],
  FeePercentageChangedEventObject
>;

export type FeePercentageChangedEventFilter =
  TypedEventFilter<FeePercentageChangedEvent>;

export interface IWNatDelegationFee extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWNatDelegationFeeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    defaultFeePercentageBIPS(overrides?: CallOverrides): Promise<[number]>;

    feePercentageUpdateOffset(overrides?: CallOverrides): Promise<[number]>;

    getVoterCurrentFeePercentage(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getVoterFeePercentage(
      _voter: PromiseOrValue<string>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getVoterScheduledFeePercentageChanges(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], boolean[]] & {
        _feePercentageBIPS: BigNumber[];
        _validFromEpochId: BigNumber[];
        _fixed: boolean[];
      }
    >;

    setVoterFeePercentage(
      _feePercentageBIPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  defaultFeePercentageBIPS(overrides?: CallOverrides): Promise<number>;

  feePercentageUpdateOffset(overrides?: CallOverrides): Promise<number>;

  getVoterCurrentFeePercentage(
    _voter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getVoterFeePercentage(
    _voter: PromiseOrValue<string>,
    _rewardEpochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getVoterScheduledFeePercentageChanges(
    _voter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[], boolean[]] & {
      _feePercentageBIPS: BigNumber[];
      _validFromEpochId: BigNumber[];
      _fixed: boolean[];
    }
  >;

  setVoterFeePercentage(
    _feePercentageBIPS: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    defaultFeePercentageBIPS(overrides?: CallOverrides): Promise<number>;

    feePercentageUpdateOffset(overrides?: CallOverrides): Promise<number>;

    getVoterCurrentFeePercentage(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getVoterFeePercentage(
      _voter: PromiseOrValue<string>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getVoterScheduledFeePercentageChanges(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], boolean[]] & {
        _feePercentageBIPS: BigNumber[];
        _validFromEpochId: BigNumber[];
        _fixed: boolean[];
      }
    >;

    setVoterFeePercentage(
      _feePercentageBIPS: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "FeePercentageChanged(address,uint16,uint24)"(
      voter?: PromiseOrValue<string> | null,
      value?: null,
      validFromEpochId?: null
    ): FeePercentageChangedEventFilter;
    FeePercentageChanged(
      voter?: PromiseOrValue<string> | null,
      value?: null,
      validFromEpochId?: null
    ): FeePercentageChangedEventFilter;
  };

  estimateGas: {
    defaultFeePercentageBIPS(overrides?: CallOverrides): Promise<BigNumber>;

    feePercentageUpdateOffset(overrides?: CallOverrides): Promise<BigNumber>;

    getVoterCurrentFeePercentage(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterFeePercentage(
      _voter: PromiseOrValue<string>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterScheduledFeePercentageChanges(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setVoterFeePercentage(
      _feePercentageBIPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    defaultFeePercentageBIPS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feePercentageUpdateOffset(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterCurrentFeePercentage(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterFeePercentage(
      _voter: PromiseOrValue<string>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterScheduledFeePercentageChanges(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setVoterFeePercentage(
      _feePercentageBIPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IRelay {
  export type FeeConfigStruct = {
    protocolId: PromiseOrValue<BigNumberish>;
    feeInWei: PromiseOrValue<BigNumberish>;
  };

  export type FeeConfigStructOutput = [number, BigNumber] & {
    protocolId: number;
    feeInWei: BigNumber;
  };

  export type RelayGovernanceConfigStruct = {
    descriptionHash: PromiseOrValue<BytesLike>;
    chainId: PromiseOrValue<BigNumberish>;
    newFeeConfigs: IRelay.FeeConfigStruct[];
  };

  export type RelayGovernanceConfigStructOutput = [
    string,
    BigNumber,
    IRelay.FeeConfigStructOutput[]
  ] & {
    descriptionHash: string;
    chainId: BigNumber;
    newFeeConfigs: IRelay.FeeConfigStructOutput[];
  };
}

export interface IRelayInterface extends utils.Interface {
  functions: {
    "feeCollectionAddress()": FunctionFragment;
    "getRandomNumber()": FunctionFragment;
    "getRandomNumberHistorical(uint256)": FunctionFragment;
    "getVotingRoundId(uint256)": FunctionFragment;
    "governanceFeeSetup(bytes,(bytes32,uint256,(uint8,uint256)[]))": FunctionFragment;
    "isFinalized(uint256,uint256)": FunctionFragment;
    "lastInitializedRewardEpochData()": FunctionFragment;
    "merkleRoots(uint256,uint256)": FunctionFragment;
    "protocolFeeInWei(uint256)": FunctionFragment;
    "relay()": FunctionFragment;
    "startingVotingRoundIds(uint256)": FunctionFragment;
    "toSigningPolicyHash(uint256)": FunctionFragment;
    "verify(uint256,uint256,bytes32,bytes32[])": FunctionFragment;
    "verifyCustomSignature(bytes,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "feeCollectionAddress"
      | "getRandomNumber"
      | "getRandomNumberHistorical"
      | "getVotingRoundId"
      | "governanceFeeSetup"
      | "isFinalized"
      | "lastInitializedRewardEpochData"
      | "merkleRoots"
      | "protocolFeeInWei"
      | "relay"
      | "startingVotingRoundIds"
      | "toSigningPolicyHash"
      | "verify"
      | "verifyCustomSignature"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "feeCollectionAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomNumberHistorical",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingRoundId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceFeeSetup",
    values: [PromiseOrValue<BytesLike>, IRelay.RelayGovernanceConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isFinalized",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastInitializedRewardEpochData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRoots",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeInWei",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "relay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startingVotingRoundIds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "toSigningPolicyHash",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyCustomSignature",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "feeCollectionAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRandomNumberHistorical",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceFeeSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastInitializedRewardEpochData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "merkleRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeInWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "relay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startingVotingRoundIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toSigningPolicyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyCustomSignature",
    data: BytesLike
  ): Result;

  events: {
    "ProtocolMessageRelayed(uint8,uint32,bool,bytes32)": EventFragment;
    "SigningPolicyInitialized(uint24,uint32,uint16,uint256,address[],uint16[],bytes,uint64)": EventFragment;
    "SigningPolicyRelayed(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProtocolMessageRelayed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SigningPolicyInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SigningPolicyRelayed"): EventFragment;
}

export interface ProtocolMessageRelayedEventObject {
  protocolId: number;
  votingRoundId: number;
  isSecureRandom: boolean;
  merkleRoot: string;
}
export type ProtocolMessageRelayedEvent = TypedEvent<
  [number, number, boolean, string],
  ProtocolMessageRelayedEventObject
>;

export type ProtocolMessageRelayedEventFilter =
  TypedEventFilter<ProtocolMessageRelayedEvent>;

export interface SigningPolicyInitializedEventObject {
  rewardEpochId: number;
  startVotingRoundId: number;
  threshold: number;
  seed: BigNumber;
  voters: string[];
  weights: number[];
  signingPolicyBytes: string;
  timestamp: BigNumber;
}
export type SigningPolicyInitializedEvent = TypedEvent<
  [number, number, number, BigNumber, string[], number[], string, BigNumber],
  SigningPolicyInitializedEventObject
>;

export type SigningPolicyInitializedEventFilter =
  TypedEventFilter<SigningPolicyInitializedEvent>;

export interface SigningPolicyRelayedEventObject {
  rewardEpochId: BigNumber;
}
export type SigningPolicyRelayedEvent = TypedEvent<
  [BigNumber],
  SigningPolicyRelayedEventObject
>;

export type SigningPolicyRelayedEventFilter =
  TypedEventFilter<SigningPolicyRelayedEvent>;

export interface IRelay extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRelayInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    feeCollectionAddress(overrides?: CallOverrides): Promise<[string]>;

    getRandomNumber(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        _randomNumber: BigNumber;
        _isSecureRandom: boolean;
        _randomTimestamp: BigNumber;
      }
    >;

    getRandomNumberHistorical(
      _votingRoundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        _randomNumber: BigNumber;
        _isSecureRandom: boolean;
        _randomTimestamp: BigNumber;
      }
    >;

    getVotingRoundId(
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _votingRoundId: BigNumber }>;

    governanceFeeSetup(
      _relayMessage: PromiseOrValue<BytesLike>,
      _config: IRelay.RelayGovernanceConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isFinalized(
      _protocolId: PromiseOrValue<BigNumberish>,
      _votingRoundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastInitializedRewardEpochData(
      overrides?: CallOverrides
    ): Promise<
      [number, number] & {
        _lastInitializedRewardEpoch: number;
        _startingVotingRoundIdForLastInitializedRewardEpoch: number;
      }
    >;

    merkleRoots(
      _protocolId: PromiseOrValue<BigNumberish>,
      _votingRoundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { _merkleRoot: string }>;

    protocolFeeInWei(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    relay(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startingVotingRoundIds(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _startingVotingRoundId: BigNumber }>;

    toSigningPolicyHash(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { _signingPolicyHash: string }>;

    verify(
      _protocolId: PromiseOrValue<BigNumberish>,
      _votingRoundId: PromiseOrValue<BigNumberish>,
      _leaf: PromiseOrValue<BytesLike>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyCustomSignature(
      _relayMessage: PromiseOrValue<BytesLike>,
      _messageHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  feeCollectionAddress(overrides?: CallOverrides): Promise<string>;

  getRandomNumber(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber] & {
      _randomNumber: BigNumber;
      _isSecureRandom: boolean;
      _randomTimestamp: BigNumber;
    }
  >;

  getRandomNumberHistorical(
    _votingRoundId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber] & {
      _randomNumber: BigNumber;
      _isSecureRandom: boolean;
      _randomTimestamp: BigNumber;
    }
  >;

  getVotingRoundId(
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  governanceFeeSetup(
    _relayMessage: PromiseOrValue<BytesLike>,
    _config: IRelay.RelayGovernanceConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isFinalized(
    _protocolId: PromiseOrValue<BigNumberish>,
    _votingRoundId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastInitializedRewardEpochData(
    overrides?: CallOverrides
  ): Promise<
    [number, number] & {
      _lastInitializedRewardEpoch: number;
      _startingVotingRoundIdForLastInitializedRewardEpoch: number;
    }
  >;

  merkleRoots(
    _protocolId: PromiseOrValue<BigNumberish>,
    _votingRoundId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  protocolFeeInWei(
    _protocolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  relay(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startingVotingRoundIds(
    _rewardEpochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toSigningPolicyHash(
    _rewardEpochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  verify(
    _protocolId: PromiseOrValue<BigNumberish>,
    _votingRoundId: PromiseOrValue<BigNumberish>,
    _leaf: PromiseOrValue<BytesLike>,
    _proof: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyCustomSignature(
    _relayMessage: PromiseOrValue<BytesLike>,
    _messageHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    feeCollectionAddress(overrides?: CallOverrides): Promise<string>;

    getRandomNumber(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        _randomNumber: BigNumber;
        _isSecureRandom: boolean;
        _randomTimestamp: BigNumber;
      }
    >;

    getRandomNumberHistorical(
      _votingRoundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        _randomNumber: BigNumber;
        _isSecureRandom: boolean;
        _randomTimestamp: BigNumber;
      }
    >;

    getVotingRoundId(
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governanceFeeSetup(
      _relayMessage: PromiseOrValue<BytesLike>,
      _config: IRelay.RelayGovernanceConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    isFinalized(
      _protocolId: PromiseOrValue<BigNumberish>,
      _votingRoundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastInitializedRewardEpochData(
      overrides?: CallOverrides
    ): Promise<
      [number, number] & {
        _lastInitializedRewardEpoch: number;
        _startingVotingRoundIdForLastInitializedRewardEpoch: number;
      }
    >;

    merkleRoots(
      _protocolId: PromiseOrValue<BigNumberish>,
      _votingRoundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    protocolFeeInWei(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    relay(overrides?: CallOverrides): Promise<string>;

    startingVotingRoundIds(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toSigningPolicyHash(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    verify(
      _protocolId: PromiseOrValue<BigNumberish>,
      _votingRoundId: PromiseOrValue<BigNumberish>,
      _leaf: PromiseOrValue<BytesLike>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyCustomSignature(
      _relayMessage: PromiseOrValue<BytesLike>,
      _messageHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ProtocolMessageRelayed(uint8,uint32,bool,bytes32)"(
      protocolId?: PromiseOrValue<BigNumberish> | null,
      votingRoundId?: PromiseOrValue<BigNumberish> | null,
      isSecureRandom?: null,
      merkleRoot?: null
    ): ProtocolMessageRelayedEventFilter;
    ProtocolMessageRelayed(
      protocolId?: PromiseOrValue<BigNumberish> | null,
      votingRoundId?: PromiseOrValue<BigNumberish> | null,
      isSecureRandom?: null,
      merkleRoot?: null
    ): ProtocolMessageRelayedEventFilter;

    "SigningPolicyInitialized(uint24,uint32,uint16,uint256,address[],uint16[],bytes,uint64)"(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      startVotingRoundId?: null,
      threshold?: null,
      seed?: null,
      voters?: null,
      weights?: null,
      signingPolicyBytes?: null,
      timestamp?: null
    ): SigningPolicyInitializedEventFilter;
    SigningPolicyInitialized(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      startVotingRoundId?: null,
      threshold?: null,
      seed?: null,
      voters?: null,
      weights?: null,
      signingPolicyBytes?: null,
      timestamp?: null
    ): SigningPolicyInitializedEventFilter;

    "SigningPolicyRelayed(uint256)"(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null
    ): SigningPolicyRelayedEventFilter;
    SigningPolicyRelayed(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null
    ): SigningPolicyRelayedEventFilter;
  };

  estimateGas: {
    feeCollectionAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getRandomNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getRandomNumberHistorical(
      _votingRoundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingRoundId(
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governanceFeeSetup(
      _relayMessage: PromiseOrValue<BytesLike>,
      _config: IRelay.RelayGovernanceConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isFinalized(
      _protocolId: PromiseOrValue<BigNumberish>,
      _votingRoundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastInitializedRewardEpochData(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    merkleRoots(
      _protocolId: PromiseOrValue<BigNumberish>,
      _votingRoundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolFeeInWei(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    relay(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startingVotingRoundIds(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toSigningPolicyHash(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify(
      _protocolId: PromiseOrValue<BigNumberish>,
      _votingRoundId: PromiseOrValue<BigNumberish>,
      _leaf: PromiseOrValue<BytesLike>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyCustomSignature(
      _relayMessage: PromiseOrValue<BytesLike>,
      _messageHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    feeCollectionAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRandomNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRandomNumberHistorical(
      _votingRoundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotingRoundId(
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governanceFeeSetup(
      _relayMessage: PromiseOrValue<BytesLike>,
      _config: IRelay.RelayGovernanceConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isFinalized(
      _protocolId: PromiseOrValue<BigNumberish>,
      _votingRoundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastInitializedRewardEpochData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    merkleRoots(
      _protocolId: PromiseOrValue<BigNumberish>,
      _votingRoundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFeeInWei(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relay(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startingVotingRoundIds(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toSigningPolicyHash(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify(
      _protocolId: PromiseOrValue<BigNumberish>,
      _votingRoundId: PromiseOrValue<BigNumberish>,
      _leaf: PromiseOrValue<BytesLike>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyCustomSignature(
      _relayMessage: PromiseOrValue<BytesLike>,
      _messageHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

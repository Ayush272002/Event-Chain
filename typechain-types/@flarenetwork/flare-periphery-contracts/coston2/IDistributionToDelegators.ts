/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IDistributionToDelegatorsInterface extends utils.Interface {
  functions: {
    "autoClaim(address[],uint256)": FunctionFragment;
    "claim(address,address,uint256,bool)": FunctionFragment;
    "getClaimableAmount(uint256)": FunctionFragment;
    "getClaimableAmountOf(address,uint256)": FunctionFragment;
    "getClaimableMonths()": FunctionFragment;
    "getCurrentMonth()": FunctionFragment;
    "getMonthToExpireNext()": FunctionFragment;
    "nextClaimableMonth(address)": FunctionFragment;
    "optOutOfAirdrop()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "autoClaim"
      | "claim"
      | "getClaimableAmount"
      | "getClaimableAmountOf"
      | "getClaimableMonths"
      | "getCurrentMonth"
      | "getMonthToExpireNext"
      | "nextClaimableMonth"
      | "optOutOfAirdrop"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "autoClaim",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableAmountOf",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableMonths",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentMonth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMonthToExpireNext",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextClaimableMonth",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "optOutOfAirdrop",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "autoClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableAmountOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableMonths",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentMonth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMonthToExpireNext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextClaimableMonth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optOutOfAirdrop",
    data: BytesLike
  ): Result;

  events: {
    "AccountClaimed(address,address,uint256,uint256)": EventFragment;
    "AccountOptOut(address,bool)": EventFragment;
    "EntitlementStart(uint256)": EventFragment;
    "UseGoodRandomSet(bool,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountOptOut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EntitlementStart"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UseGoodRandomSet"): EventFragment;
}

export interface AccountClaimedEventObject {
  whoClaimed: string;
  sentTo: string;
  month: BigNumber;
  amountWei: BigNumber;
}
export type AccountClaimedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  AccountClaimedEventObject
>;

export type AccountClaimedEventFilter = TypedEventFilter<AccountClaimedEvent>;

export interface AccountOptOutEventObject {
  theAccount: string;
  confirmed: boolean;
}
export type AccountOptOutEvent = TypedEvent<
  [string, boolean],
  AccountOptOutEventObject
>;

export type AccountOptOutEventFilter = TypedEventFilter<AccountOptOutEvent>;

export interface EntitlementStartEventObject {
  entitlementStartTs: BigNumber;
}
export type EntitlementStartEvent = TypedEvent<
  [BigNumber],
  EntitlementStartEventObject
>;

export type EntitlementStartEventFilter =
  TypedEventFilter<EntitlementStartEvent>;

export interface UseGoodRandomSetEventObject {
  useGoodRandom: boolean;
  maxWaitForGoodRandomSeconds: BigNumber;
}
export type UseGoodRandomSetEvent = TypedEvent<
  [boolean, BigNumber],
  UseGoodRandomSetEventObject
>;

export type UseGoodRandomSetEventFilter =
  TypedEventFilter<UseGoodRandomSetEvent>;

export interface IDistributionToDelegators extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDistributionToDelegatorsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    autoClaim(
      _rewardOwners: PromiseOrValue<string>[],
      _month: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claim(
      _rewardOwner: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _month: PromiseOrValue<BigNumberish>,
      _wrap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getClaimableAmount(
      _month: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amountWei: BigNumber }>;

    getClaimableAmountOf(
      _account: PromiseOrValue<string>,
      _month: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amountWei: BigNumber }>;

    getClaimableMonths(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _startMonth: BigNumber; _endMonth: BigNumber }
    >;

    getCurrentMonth(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _currentMonth: BigNumber }>;

    getMonthToExpireNext(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _monthToExpireNext: BigNumber }>;

    nextClaimableMonth(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    optOutOfAirdrop(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  autoClaim(
    _rewardOwners: PromiseOrValue<string>[],
    _month: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claim(
    _rewardOwner: PromiseOrValue<string>,
    _recipient: PromiseOrValue<string>,
    _month: PromiseOrValue<BigNumberish>,
    _wrap: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getClaimableAmount(
    _month: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClaimableAmountOf(
    _account: PromiseOrValue<string>,
    _month: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClaimableMonths(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _startMonth: BigNumber; _endMonth: BigNumber }
  >;

  getCurrentMonth(overrides?: CallOverrides): Promise<BigNumber>;

  getMonthToExpireNext(overrides?: CallOverrides): Promise<BigNumber>;

  nextClaimableMonth(
    _rewardOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  optOutOfAirdrop(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    autoClaim(
      _rewardOwners: PromiseOrValue<string>[],
      _month: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(
      _rewardOwner: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _month: PromiseOrValue<BigNumberish>,
      _wrap: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimableAmount(
      _month: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimableAmountOf(
      _account: PromiseOrValue<string>,
      _month: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimableMonths(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _startMonth: BigNumber; _endMonth: BigNumber }
    >;

    getCurrentMonth(overrides?: CallOverrides): Promise<BigNumber>;

    getMonthToExpireNext(overrides?: CallOverrides): Promise<BigNumber>;

    nextClaimableMonth(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optOutOfAirdrop(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AccountClaimed(address,address,uint256,uint256)"(
      whoClaimed?: PromiseOrValue<string> | null,
      sentTo?: PromiseOrValue<string> | null,
      month?: null,
      amountWei?: null
    ): AccountClaimedEventFilter;
    AccountClaimed(
      whoClaimed?: PromiseOrValue<string> | null,
      sentTo?: PromiseOrValue<string> | null,
      month?: null,
      amountWei?: null
    ): AccountClaimedEventFilter;

    "AccountOptOut(address,bool)"(
      theAccount?: PromiseOrValue<string> | null,
      confirmed?: null
    ): AccountOptOutEventFilter;
    AccountOptOut(
      theAccount?: PromiseOrValue<string> | null,
      confirmed?: null
    ): AccountOptOutEventFilter;

    "EntitlementStart(uint256)"(
      entitlementStartTs?: null
    ): EntitlementStartEventFilter;
    EntitlementStart(entitlementStartTs?: null): EntitlementStartEventFilter;

    "UseGoodRandomSet(bool,uint256)"(
      useGoodRandom?: null,
      maxWaitForGoodRandomSeconds?: null
    ): UseGoodRandomSetEventFilter;
    UseGoodRandomSet(
      useGoodRandom?: null,
      maxWaitForGoodRandomSeconds?: null
    ): UseGoodRandomSetEventFilter;
  };

  estimateGas: {
    autoClaim(
      _rewardOwners: PromiseOrValue<string>[],
      _month: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claim(
      _rewardOwner: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _month: PromiseOrValue<BigNumberish>,
      _wrap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getClaimableAmount(
      _month: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimableAmountOf(
      _account: PromiseOrValue<string>,
      _month: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimableMonths(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentMonth(overrides?: CallOverrides): Promise<BigNumber>;

    getMonthToExpireNext(overrides?: CallOverrides): Promise<BigNumber>;

    nextClaimableMonth(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optOutOfAirdrop(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    autoClaim(
      _rewardOwners: PromiseOrValue<string>[],
      _month: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      _rewardOwner: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _month: PromiseOrValue<BigNumberish>,
      _wrap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getClaimableAmount(
      _month: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimableAmountOf(
      _account: PromiseOrValue<string>,
      _month: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimableMonths(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentMonth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMonthToExpireNext(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextClaimableMonth(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optOutOfAirdrop(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

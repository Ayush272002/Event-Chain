/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IAddressBinderInterface extends utils.Interface {
  functions: {
    "cAddressToPAddress(address)": FunctionFragment;
    "pAddressToCAddress(bytes20)": FunctionFragment;
    "registerAddresses(bytes,bytes20,address)": FunctionFragment;
    "registerPublicKey(bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cAddressToPAddress"
      | "pAddressToCAddress"
      | "registerAddresses"
      | "registerPublicKey"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cAddressToPAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pAddressToCAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAddresses",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPublicKey",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "cAddressToPAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pAddressToCAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPublicKey",
    data: BytesLike
  ): Result;

  events: {
    "AddressesRegistered(bytes,bytes20,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressesRegistered"): EventFragment;
}

export interface AddressesRegisteredEventObject {
  publicKey: string;
  pAddress: string;
  cAddress: string;
}
export type AddressesRegisteredEvent = TypedEvent<
  [string, string, string],
  AddressesRegisteredEventObject
>;

export type AddressesRegisteredEventFilter =
  TypedEventFilter<AddressesRegisteredEvent>;

export interface IAddressBinder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAddressBinderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cAddressToPAddress(
      _cAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { _pAddress: string }>;

    pAddressToCAddress(
      _pAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { _cAddress: string }>;

    registerAddresses(
      _publicKey: PromiseOrValue<BytesLike>,
      _pAddress: PromiseOrValue<BytesLike>,
      _cAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerPublicKey(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  cAddressToPAddress(
    _cAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  pAddressToCAddress(
    _pAddress: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  registerAddresses(
    _publicKey: PromiseOrValue<BytesLike>,
    _pAddress: PromiseOrValue<BytesLike>,
    _cAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerPublicKey(
    _publicKey: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cAddressToPAddress(
      _cAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    pAddressToCAddress(
      _pAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerAddresses(
      _publicKey: PromiseOrValue<BytesLike>,
      _pAddress: PromiseOrValue<BytesLike>,
      _cAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerPublicKey(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _pAddress: string; _cAddress: string }>;
  };

  filters: {
    "AddressesRegistered(bytes,bytes20,address)"(
      publicKey?: null,
      pAddress?: null,
      cAddress?: null
    ): AddressesRegisteredEventFilter;
    AddressesRegistered(
      publicKey?: null,
      pAddress?: null,
      cAddress?: null
    ): AddressesRegisteredEventFilter;
  };

  estimateGas: {
    cAddressToPAddress(
      _cAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pAddressToCAddress(
      _pAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerAddresses(
      _publicKey: PromiseOrValue<BytesLike>,
      _pAddress: PromiseOrValue<BytesLike>,
      _cAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerPublicKey(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cAddressToPAddress(
      _cAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pAddressToCAddress(
      _pAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerAddresses(
      _publicKey: PromiseOrValue<BytesLike>,
      _pAddress: PromiseOrValue<BytesLike>,
      _cAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerPublicKey(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

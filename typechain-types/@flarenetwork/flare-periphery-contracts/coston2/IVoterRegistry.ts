/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IVoterRegistry {
  export type SignatureStruct = {
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
  };

  export type SignatureStructOutput = [number, string, string] & {
    v: number;
    r: string;
    s: string;
  };
}

export interface IVoterRegistryInterface extends utils.Interface {
  functions: {
    "chilledUntilRewardEpochId(bytes20)": FunctionFragment;
    "getNumberOfRegisteredVoters(uint256)": FunctionFragment;
    "getRegisteredVoters(uint256)": FunctionFragment;
    "isVoterRegistered(address,uint256)": FunctionFragment;
    "maxVoters()": FunctionFragment;
    "newSigningPolicyInitializationStartBlockNumber(uint256)": FunctionFragment;
    "publicKeyRequired()": FunctionFragment;
    "registerVoter(address,(uint8,bytes32,bytes32))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "chilledUntilRewardEpochId"
      | "getNumberOfRegisteredVoters"
      | "getRegisteredVoters"
      | "isVoterRegistered"
      | "maxVoters"
      | "newSigningPolicyInitializationStartBlockNumber"
      | "publicKeyRequired"
      | "registerVoter"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "chilledUntilRewardEpochId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfRegisteredVoters",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredVoters",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isVoterRegistered",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "maxVoters", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newSigningPolicyInitializationStartBlockNumber",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "publicKeyRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerVoter",
    values: [PromiseOrValue<string>, IVoterRegistry.SignatureStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "chilledUntilRewardEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfRegisteredVoters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredVoters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVoterRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxVoters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newSigningPolicyInitializationStartBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicKeyRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVoter",
    data: BytesLike
  ): Result;

  events: {
    "BeneficiaryChilled(bytes20,uint256)": EventFragment;
    "VoterRegistered(address,uint24,address,address,address,bytes32,bytes32,uint256)": EventFragment;
    "VoterRemoved(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BeneficiaryChilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoterRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoterRemoved"): EventFragment;
}

export interface BeneficiaryChilledEventObject {
  beneficiary: string;
  untilRewardEpochId: BigNumber;
}
export type BeneficiaryChilledEvent = TypedEvent<
  [string, BigNumber],
  BeneficiaryChilledEventObject
>;

export type BeneficiaryChilledEventFilter =
  TypedEventFilter<BeneficiaryChilledEvent>;

export interface VoterRegisteredEventObject {
  voter: string;
  rewardEpochId: number;
  signingPolicyAddress: string;
  submitAddress: string;
  submitSignaturesAddress: string;
  publicKeyPart1: string;
  publicKeyPart2: string;
  registrationWeight: BigNumber;
}
export type VoterRegisteredEvent = TypedEvent<
  [string, number, string, string, string, string, string, BigNumber],
  VoterRegisteredEventObject
>;

export type VoterRegisteredEventFilter = TypedEventFilter<VoterRegisteredEvent>;

export interface VoterRemovedEventObject {
  voter: string;
  rewardEpochId: BigNumber;
}
export type VoterRemovedEvent = TypedEvent<
  [string, BigNumber],
  VoterRemovedEventObject
>;

export type VoterRemovedEventFilter = TypedEventFilter<VoterRemovedEvent>;

export interface IVoterRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVoterRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    chilledUntilRewardEpochId(
      _beneficiary: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _rewardEpochId: BigNumber }>;

    getNumberOfRegisteredVoters(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRegisteredVoters(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    isVoterRegistered(
      _voter: PromiseOrValue<string>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxVoters(overrides?: CallOverrides): Promise<[BigNumber]>;

    newSigningPolicyInitializationStartBlockNumber(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    publicKeyRequired(overrides?: CallOverrides): Promise<[boolean]>;

    registerVoter(
      _voter: PromiseOrValue<string>,
      _signature: IVoterRegistry.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  chilledUntilRewardEpochId(
    _beneficiary: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumberOfRegisteredVoters(
    _rewardEpochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRegisteredVoters(
    _rewardEpochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  isVoterRegistered(
    _voter: PromiseOrValue<string>,
    _rewardEpochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxVoters(overrides?: CallOverrides): Promise<BigNumber>;

  newSigningPolicyInitializationStartBlockNumber(
    _rewardEpochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  publicKeyRequired(overrides?: CallOverrides): Promise<boolean>;

  registerVoter(
    _voter: PromiseOrValue<string>,
    _signature: IVoterRegistry.SignatureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    chilledUntilRewardEpochId(
      _beneficiary: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfRegisteredVoters(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegisteredVoters(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    isVoterRegistered(
      _voter: PromiseOrValue<string>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxVoters(overrides?: CallOverrides): Promise<BigNumber>;

    newSigningPolicyInitializationStartBlockNumber(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publicKeyRequired(overrides?: CallOverrides): Promise<boolean>;

    registerVoter(
      _voter: PromiseOrValue<string>,
      _signature: IVoterRegistry.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BeneficiaryChilled(bytes20,uint256)"(
      beneficiary?: PromiseOrValue<BytesLike> | null,
      untilRewardEpochId?: null
    ): BeneficiaryChilledEventFilter;
    BeneficiaryChilled(
      beneficiary?: PromiseOrValue<BytesLike> | null,
      untilRewardEpochId?: null
    ): BeneficiaryChilledEventFilter;

    "VoterRegistered(address,uint24,address,address,address,bytes32,bytes32,uint256)"(
      voter?: PromiseOrValue<string> | null,
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      signingPolicyAddress?: PromiseOrValue<string> | null,
      submitAddress?: null,
      submitSignaturesAddress?: null,
      publicKeyPart1?: null,
      publicKeyPart2?: null,
      registrationWeight?: null
    ): VoterRegisteredEventFilter;
    VoterRegistered(
      voter?: PromiseOrValue<string> | null,
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      signingPolicyAddress?: PromiseOrValue<string> | null,
      submitAddress?: null,
      submitSignaturesAddress?: null,
      publicKeyPart1?: null,
      publicKeyPart2?: null,
      registrationWeight?: null
    ): VoterRegisteredEventFilter;

    "VoterRemoved(address,uint256)"(
      voter?: PromiseOrValue<string> | null,
      rewardEpochId?: PromiseOrValue<BigNumberish> | null
    ): VoterRemovedEventFilter;
    VoterRemoved(
      voter?: PromiseOrValue<string> | null,
      rewardEpochId?: PromiseOrValue<BigNumberish> | null
    ): VoterRemovedEventFilter;
  };

  estimateGas: {
    chilledUntilRewardEpochId(
      _beneficiary: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfRegisteredVoters(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegisteredVoters(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVoterRegistered(
      _voter: PromiseOrValue<string>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxVoters(overrides?: CallOverrides): Promise<BigNumber>;

    newSigningPolicyInitializationStartBlockNumber(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publicKeyRequired(overrides?: CallOverrides): Promise<BigNumber>;

    registerVoter(
      _voter: PromiseOrValue<string>,
      _signature: IVoterRegistry.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    chilledUntilRewardEpochId(
      _beneficiary: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfRegisteredVoters(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegisteredVoters(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVoterRegistered(
      _voter: PromiseOrValue<string>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxVoters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newSigningPolicyInitializationStartBlockNumber(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicKeyRequired(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerVoter(
      _voter: PromiseOrValue<string>,
      _signature: IVoterRegistry.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

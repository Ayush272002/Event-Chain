/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IClaimSetupManagerInterface extends utils.Interface {
  functions: {
    "accountToDelegationAccount(address)": FunctionFragment;
    "allowedClaimRecipients(address)": FunctionFragment;
    "batchDelegate(address[],uint256[])": FunctionFragment;
    "claimExecutors(address)": FunctionFragment;
    "delegate(address,uint256)": FunctionFragment;
    "delegateGovernance(address)": FunctionFragment;
    "disableDelegationAccount()": FunctionFragment;
    "enableDelegationAccount()": FunctionFragment;
    "getDelegationAccountData(address)": FunctionFragment;
    "getExecutorCurrentFeeValue(address)": FunctionFragment;
    "getExecutorFeeValue(address,uint256)": FunctionFragment;
    "getExecutorInfo(address)": FunctionFragment;
    "getExecutorScheduledFeeValueChanges(address)": FunctionFragment;
    "getRegisteredExecutors(uint256,uint256)": FunctionFragment;
    "isClaimExecutor(address,address)": FunctionFragment;
    "registerExecutor(uint256)": FunctionFragment;
    "revokeDelegationAt(address,uint256)": FunctionFragment;
    "setAllowedClaimRecipients(address[])": FunctionFragment;
    "setAutoClaiming(address[],bool)": FunctionFragment;
    "setClaimExecutors(address[])": FunctionFragment;
    "transferExternalToken(address,uint256)": FunctionFragment;
    "undelegateAll()": FunctionFragment;
    "undelegateGovernance()": FunctionFragment;
    "unregisterExecutor()": FunctionFragment;
    "updateExecutorFeeValue(uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accountToDelegationAccount"
      | "allowedClaimRecipients"
      | "batchDelegate"
      | "claimExecutors"
      | "delegate"
      | "delegateGovernance"
      | "disableDelegationAccount"
      | "enableDelegationAccount"
      | "getDelegationAccountData"
      | "getExecutorCurrentFeeValue"
      | "getExecutorFeeValue"
      | "getExecutorInfo"
      | "getExecutorScheduledFeeValueChanges"
      | "getRegisteredExecutors"
      | "isClaimExecutor"
      | "registerExecutor"
      | "revokeDelegationAt"
      | "setAllowedClaimRecipients"
      | "setAutoClaiming"
      | "setClaimExecutors"
      | "transferExternalToken"
      | "undelegateAll"
      | "undelegateGovernance"
      | "unregisterExecutor"
      | "updateExecutorFeeValue"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accountToDelegationAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedClaimRecipients",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchDelegate",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimExecutors",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateGovernance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "disableDelegationAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableDelegationAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegationAccountData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutorCurrentFeeValue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutorFeeValue",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutorInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutorScheduledFeeValueChanges",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredExecutors",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimExecutor",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerExecutor",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeDelegationAt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedClaimRecipients",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setAutoClaiming",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimExecutors",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferExternalToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "undelegateAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "undelegateGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterExecutor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateExecutorFeeValue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountToDelegationAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedClaimRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimExecutors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableDelegationAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableDelegationAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegationAccountData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutorCurrentFeeValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutorFeeValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutorScheduledFeeValueChanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredExecutors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isClaimExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeDelegationAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedClaimRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutoClaiming",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimExecutors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferExternalToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "undelegateAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "undelegateGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExecutorFeeValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AllowedClaimRecipientsChanged(address,address[])": EventFragment;
    "ClaimExecutorFeeValueChanged(address,uint256,uint256)": EventFragment;
    "ClaimExecutorsChanged(address,address[])": EventFragment;
    "DelegationAccountCreated(address,address)": EventFragment;
    "DelegationAccountUpdated(address,address,bool)": EventFragment;
    "ExecutorRegistered(address)": EventFragment;
    "ExecutorUnregistered(address,uint256)": EventFragment;
    "MaxFeeSet(uint256)": EventFragment;
    "MinFeeSet(uint256)": EventFragment;
    "RegisterExecutorFeeSet(uint256)": EventFragment;
    "SetExecutorsExcessAmountRefunded(address,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AllowedClaimRecipientsChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ClaimExecutorFeeValueChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimExecutorsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegationAccountCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegationAccountUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutorRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutorUnregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterExecutorFeeSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetExecutorsExcessAmountRefunded"
  ): EventFragment;
}

export interface AllowedClaimRecipientsChangedEventObject {
  owner: string;
  recipients: string[];
}
export type AllowedClaimRecipientsChangedEvent = TypedEvent<
  [string, string[]],
  AllowedClaimRecipientsChangedEventObject
>;

export type AllowedClaimRecipientsChangedEventFilter =
  TypedEventFilter<AllowedClaimRecipientsChangedEvent>;

export interface ClaimExecutorFeeValueChangedEventObject {
  executor: string;
  validFromRewardEpoch: BigNumber;
  feeValueWei: BigNumber;
}
export type ClaimExecutorFeeValueChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ClaimExecutorFeeValueChangedEventObject
>;

export type ClaimExecutorFeeValueChangedEventFilter =
  TypedEventFilter<ClaimExecutorFeeValueChangedEvent>;

export interface ClaimExecutorsChangedEventObject {
  owner: string;
  executors: string[];
}
export type ClaimExecutorsChangedEvent = TypedEvent<
  [string, string[]],
  ClaimExecutorsChangedEventObject
>;

export type ClaimExecutorsChangedEventFilter =
  TypedEventFilter<ClaimExecutorsChangedEvent>;

export interface DelegationAccountCreatedEventObject {
  owner: string;
  delegationAccount: string;
}
export type DelegationAccountCreatedEvent = TypedEvent<
  [string, string],
  DelegationAccountCreatedEventObject
>;

export type DelegationAccountCreatedEventFilter =
  TypedEventFilter<DelegationAccountCreatedEvent>;

export interface DelegationAccountUpdatedEventObject {
  owner: string;
  delegationAccount: string;
  enabled: boolean;
}
export type DelegationAccountUpdatedEvent = TypedEvent<
  [string, string, boolean],
  DelegationAccountUpdatedEventObject
>;

export type DelegationAccountUpdatedEventFilter =
  TypedEventFilter<DelegationAccountUpdatedEvent>;

export interface ExecutorRegisteredEventObject {
  executor: string;
}
export type ExecutorRegisteredEvent = TypedEvent<
  [string],
  ExecutorRegisteredEventObject
>;

export type ExecutorRegisteredEventFilter =
  TypedEventFilter<ExecutorRegisteredEvent>;

export interface ExecutorUnregisteredEventObject {
  executor: string;
  validFromRewardEpoch: BigNumber;
}
export type ExecutorUnregisteredEvent = TypedEvent<
  [string, BigNumber],
  ExecutorUnregisteredEventObject
>;

export type ExecutorUnregisteredEventFilter =
  TypedEventFilter<ExecutorUnregisteredEvent>;

export interface MaxFeeSetEventObject {
  maxFeeValueWei: BigNumber;
}
export type MaxFeeSetEvent = TypedEvent<[BigNumber], MaxFeeSetEventObject>;

export type MaxFeeSetEventFilter = TypedEventFilter<MaxFeeSetEvent>;

export interface MinFeeSetEventObject {
  minFeeValueWei: BigNumber;
}
export type MinFeeSetEvent = TypedEvent<[BigNumber], MinFeeSetEventObject>;

export type MinFeeSetEventFilter = TypedEventFilter<MinFeeSetEvent>;

export interface RegisterExecutorFeeSetEventObject {
  registerExecutorFeeValueWei: BigNumber;
}
export type RegisterExecutorFeeSetEvent = TypedEvent<
  [BigNumber],
  RegisterExecutorFeeSetEventObject
>;

export type RegisterExecutorFeeSetEventFilter =
  TypedEventFilter<RegisterExecutorFeeSetEvent>;

export interface SetExecutorsExcessAmountRefundedEventObject {
  owner: string;
  excessAmount: BigNumber;
}
export type SetExecutorsExcessAmountRefundedEvent = TypedEvent<
  [string, BigNumber],
  SetExecutorsExcessAmountRefundedEventObject
>;

export type SetExecutorsExcessAmountRefundedEventFilter =
  TypedEventFilter<SetExecutorsExcessAmountRefundedEvent>;

export interface IClaimSetupManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IClaimSetupManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountToDelegationAccount(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allowedClaimRecipients(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    batchDelegate(
      _delegatees: PromiseOrValue<string>[],
      _bips: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimExecutors(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    delegate(
      _to: PromiseOrValue<string>,
      _bips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    delegateGovernance(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disableDelegationAccount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enableDelegationAccount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDelegationAccountData(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { _delegationAccount: string; _enabled: boolean }
    >;

    getExecutorCurrentFeeValue(
      _executor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getExecutorFeeValue(
      _executor: PromiseOrValue<string>,
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getExecutorInfo(
      _executor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & {
        _registered: boolean;
        _currentFeeValue: BigNumber;
      }
    >;

    getExecutorScheduledFeeValueChanges(
      _executor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], boolean[]] & {
        _feeValue: BigNumber[];
        _validFromEpoch: BigNumber[];
        _fixed: boolean[];
      }
    >;

    getRegisteredExecutors(
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber] & {
        _registeredExecutors: string[];
        _totalLength: BigNumber;
      }
    >;

    isClaimExecutor(
      _owner: PromiseOrValue<string>,
      _executor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerExecutor(
      _feeValue: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeDelegationAt(
      _who: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAllowedClaimRecipients(
      _recipients: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAutoClaiming(
      _executors: PromiseOrValue<string>[],
      _enableDelegationAccount: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setClaimExecutors(
      _executors: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferExternalToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    undelegateAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    undelegateGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unregisterExecutor(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateExecutorFeeValue(
      _feeValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  accountToDelegationAccount(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  allowedClaimRecipients(
    _rewardOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  batchDelegate(
    _delegatees: PromiseOrValue<string>[],
    _bips: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimExecutors(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  delegate(
    _to: PromiseOrValue<string>,
    _bips: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  delegateGovernance(
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disableDelegationAccount(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enableDelegationAccount(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDelegationAccountData(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean] & { _delegationAccount: string; _enabled: boolean }
  >;

  getExecutorCurrentFeeValue(
    _executor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getExecutorFeeValue(
    _executor: PromiseOrValue<string>,
    _rewardEpoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getExecutorInfo(
    _executor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & { _registered: boolean; _currentFeeValue: BigNumber }
  >;

  getExecutorScheduledFeeValueChanges(
    _executor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[], boolean[]] & {
      _feeValue: BigNumber[];
      _validFromEpoch: BigNumber[];
      _fixed: boolean[];
    }
  >;

  getRegisteredExecutors(
    _start: PromiseOrValue<BigNumberish>,
    _end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber] & {
      _registeredExecutors: string[];
      _totalLength: BigNumber;
    }
  >;

  isClaimExecutor(
    _owner: PromiseOrValue<string>,
    _executor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerExecutor(
    _feeValue: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeDelegationAt(
    _who: PromiseOrValue<string>,
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAllowedClaimRecipients(
    _recipients: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAutoClaiming(
    _executors: PromiseOrValue<string>[],
    _enableDelegationAccount: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setClaimExecutors(
    _executors: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferExternalToken(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  undelegateAll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  undelegateGovernance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unregisterExecutor(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateExecutorFeeValue(
    _feeValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accountToDelegationAccount(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    allowedClaimRecipients(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    batchDelegate(
      _delegatees: PromiseOrValue<string>[],
      _bips: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimExecutors(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    delegate(
      _to: PromiseOrValue<string>,
      _bips: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    delegateGovernance(
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    disableDelegationAccount(overrides?: CallOverrides): Promise<void>;

    enableDelegationAccount(overrides?: CallOverrides): Promise<string>;

    getDelegationAccountData(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { _delegationAccount: string; _enabled: boolean }
    >;

    getExecutorCurrentFeeValue(
      _executor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExecutorFeeValue(
      _executor: PromiseOrValue<string>,
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExecutorInfo(
      _executor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & {
        _registered: boolean;
        _currentFeeValue: BigNumber;
      }
    >;

    getExecutorScheduledFeeValueChanges(
      _executor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], boolean[]] & {
        _feeValue: BigNumber[];
        _validFromEpoch: BigNumber[];
        _fixed: boolean[];
      }
    >;

    getRegisteredExecutors(
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber] & {
        _registeredExecutors: string[];
        _totalLength: BigNumber;
      }
    >;

    isClaimExecutor(
      _owner: PromiseOrValue<string>,
      _executor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerExecutor(
      _feeValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeDelegationAt(
      _who: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowedClaimRecipients(
      _recipients: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setAutoClaiming(
      _executors: PromiseOrValue<string>[],
      _enableDelegationAccount: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setClaimExecutors(
      _executors: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferExternalToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    undelegateAll(overrides?: CallOverrides): Promise<void>;

    undelegateGovernance(overrides?: CallOverrides): Promise<void>;

    unregisterExecutor(overrides?: CallOverrides): Promise<BigNumber>;

    updateExecutorFeeValue(
      _feeValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AllowedClaimRecipientsChanged(address,address[])"(
      owner?: null,
      recipients?: null
    ): AllowedClaimRecipientsChangedEventFilter;
    AllowedClaimRecipientsChanged(
      owner?: null,
      recipients?: null
    ): AllowedClaimRecipientsChangedEventFilter;

    "ClaimExecutorFeeValueChanged(address,uint256,uint256)"(
      executor?: null,
      validFromRewardEpoch?: null,
      feeValueWei?: null
    ): ClaimExecutorFeeValueChangedEventFilter;
    ClaimExecutorFeeValueChanged(
      executor?: null,
      validFromRewardEpoch?: null,
      feeValueWei?: null
    ): ClaimExecutorFeeValueChangedEventFilter;

    "ClaimExecutorsChanged(address,address[])"(
      owner?: null,
      executors?: null
    ): ClaimExecutorsChangedEventFilter;
    ClaimExecutorsChanged(
      owner?: null,
      executors?: null
    ): ClaimExecutorsChangedEventFilter;

    "DelegationAccountCreated(address,address)"(
      owner?: null,
      delegationAccount?: null
    ): DelegationAccountCreatedEventFilter;
    DelegationAccountCreated(
      owner?: null,
      delegationAccount?: null
    ): DelegationAccountCreatedEventFilter;

    "DelegationAccountUpdated(address,address,bool)"(
      owner?: null,
      delegationAccount?: null,
      enabled?: null
    ): DelegationAccountUpdatedEventFilter;
    DelegationAccountUpdated(
      owner?: null,
      delegationAccount?: null,
      enabled?: null
    ): DelegationAccountUpdatedEventFilter;

    "ExecutorRegistered(address)"(
      executor?: null
    ): ExecutorRegisteredEventFilter;
    ExecutorRegistered(executor?: null): ExecutorRegisteredEventFilter;

    "ExecutorUnregistered(address,uint256)"(
      executor?: null,
      validFromRewardEpoch?: null
    ): ExecutorUnregisteredEventFilter;
    ExecutorUnregistered(
      executor?: null,
      validFromRewardEpoch?: null
    ): ExecutorUnregisteredEventFilter;

    "MaxFeeSet(uint256)"(maxFeeValueWei?: null): MaxFeeSetEventFilter;
    MaxFeeSet(maxFeeValueWei?: null): MaxFeeSetEventFilter;

    "MinFeeSet(uint256)"(minFeeValueWei?: null): MinFeeSetEventFilter;
    MinFeeSet(minFeeValueWei?: null): MinFeeSetEventFilter;

    "RegisterExecutorFeeSet(uint256)"(
      registerExecutorFeeValueWei?: null
    ): RegisterExecutorFeeSetEventFilter;
    RegisterExecutorFeeSet(
      registerExecutorFeeValueWei?: null
    ): RegisterExecutorFeeSetEventFilter;

    "SetExecutorsExcessAmountRefunded(address,uint256)"(
      owner?: null,
      excessAmount?: null
    ): SetExecutorsExcessAmountRefundedEventFilter;
    SetExecutorsExcessAmountRefunded(
      owner?: null,
      excessAmount?: null
    ): SetExecutorsExcessAmountRefundedEventFilter;
  };

  estimateGas: {
    accountToDelegationAccount(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedClaimRecipients(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchDelegate(
      _delegatees: PromiseOrValue<string>[],
      _bips: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimExecutors(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegate(
      _to: PromiseOrValue<string>,
      _bips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    delegateGovernance(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disableDelegationAccount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enableDelegationAccount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDelegationAccountData(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExecutorCurrentFeeValue(
      _executor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExecutorFeeValue(
      _executor: PromiseOrValue<string>,
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExecutorInfo(
      _executor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExecutorScheduledFeeValueChanges(
      _executor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegisteredExecutors(
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isClaimExecutor(
      _owner: PromiseOrValue<string>,
      _executor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerExecutor(
      _feeValue: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeDelegationAt(
      _who: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAllowedClaimRecipients(
      _recipients: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAutoClaiming(
      _executors: PromiseOrValue<string>[],
      _enableDelegationAccount: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setClaimExecutors(
      _executors: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferExternalToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    undelegateAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    undelegateGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unregisterExecutor(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateExecutorFeeValue(
      _feeValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountToDelegationAccount(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedClaimRecipients(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchDelegate(
      _delegatees: PromiseOrValue<string>[],
      _bips: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimExecutors(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegate(
      _to: PromiseOrValue<string>,
      _bips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    delegateGovernance(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disableDelegationAccount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enableDelegationAccount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDelegationAccountData(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExecutorCurrentFeeValue(
      _executor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExecutorFeeValue(
      _executor: PromiseOrValue<string>,
      _rewardEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExecutorInfo(
      _executor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExecutorScheduledFeeValueChanges(
      _executor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegisteredExecutors(
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isClaimExecutor(
      _owner: PromiseOrValue<string>,
      _executor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerExecutor(
      _feeValue: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeDelegationAt(
      _who: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAllowedClaimRecipients(
      _recipients: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAutoClaiming(
      _executors: PromiseOrValue<string>[],
      _enableDelegationAccount: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setClaimExecutors(
      _executors: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferExternalToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    undelegateAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    undelegateGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unregisterExecutor(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateExecutorFeeValue(
      _feeValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

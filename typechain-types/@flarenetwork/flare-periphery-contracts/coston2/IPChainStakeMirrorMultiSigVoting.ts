/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IPChainStakeMirrorMultiSigVoting {
  export type PChainVotesStruct = {
    merkleRoot: PromiseOrValue<BytesLike>;
    votes: PromiseOrValue<string>[];
  };

  export type PChainVotesStructOutput = [string, string[]] & {
    merkleRoot: string;
    votes: string[];
  };
}

export interface IPChainStakeMirrorMultiSigVotingInterface
  extends utils.Interface {
  functions: {
    "getCurrentEpochId()": FunctionFragment;
    "getEpochConfiguration()": FunctionFragment;
    "getEpochId(uint256)": FunctionFragment;
    "getMerkleRoot(uint256)": FunctionFragment;
    "getVoters()": FunctionFragment;
    "getVotes(uint256)": FunctionFragment;
    "getVotingThreshold()": FunctionFragment;
    "shouldVote(uint256,address)": FunctionFragment;
    "submitValidatorUptimeVote(uint256,bytes20[])": FunctionFragment;
    "submitVote(uint256,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getCurrentEpochId"
      | "getEpochConfiguration"
      | "getEpochId"
      | "getMerkleRoot"
      | "getVoters"
      | "getVotes"
      | "getVotingThreshold"
      | "shouldVote"
      | "submitValidatorUptimeVote"
      | "submitVote"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getCurrentEpochId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMerkleRoot",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getVoters", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVotes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shouldVote",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitValidatorUptimeVote",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "submitVote",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCurrentEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEpochId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVoters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVotingThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shouldVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitValidatorUptimeVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitVote", data: BytesLike): Result;

  events: {
    "PChainStakeMirrorValidatorUptimeVoteSubmitted(uint256,uint256,address,bytes20[])": EventFragment;
    "PChainStakeMirrorVoteSubmitted(uint256,address,bytes32)": EventFragment;
    "PChainStakeMirrorVotersSet(address[])": EventFragment;
    "PChainStakeMirrorVotingFinalized(uint256,bytes32)": EventFragment;
    "PChainStakeMirrorVotingReset(uint256)": EventFragment;
    "PChainStakeMirrorVotingThresholdSet(uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "PChainStakeMirrorValidatorUptimeVoteSubmitted"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PChainStakeMirrorVoteSubmitted"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PChainStakeMirrorVotersSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PChainStakeMirrorVotingFinalized"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PChainStakeMirrorVotingReset"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PChainStakeMirrorVotingThresholdSet"
  ): EventFragment;
}

export interface PChainStakeMirrorValidatorUptimeVoteSubmittedEventObject {
  rewardEpochId: BigNumber;
  timestamp: BigNumber;
  voter: string;
  nodeIds: string[];
}
export type PChainStakeMirrorValidatorUptimeVoteSubmittedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string[]],
  PChainStakeMirrorValidatorUptimeVoteSubmittedEventObject
>;

export type PChainStakeMirrorValidatorUptimeVoteSubmittedEventFilter =
  TypedEventFilter<PChainStakeMirrorValidatorUptimeVoteSubmittedEvent>;

export interface PChainStakeMirrorVoteSubmittedEventObject {
  epochId: BigNumber;
  voter: string;
  merkleRoot: string;
}
export type PChainStakeMirrorVoteSubmittedEvent = TypedEvent<
  [BigNumber, string, string],
  PChainStakeMirrorVoteSubmittedEventObject
>;

export type PChainStakeMirrorVoteSubmittedEventFilter =
  TypedEventFilter<PChainStakeMirrorVoteSubmittedEvent>;

export interface PChainStakeMirrorVotersSetEventObject {
  voters: string[];
}
export type PChainStakeMirrorVotersSetEvent = TypedEvent<
  [string[]],
  PChainStakeMirrorVotersSetEventObject
>;

export type PChainStakeMirrorVotersSetEventFilter =
  TypedEventFilter<PChainStakeMirrorVotersSetEvent>;

export interface PChainStakeMirrorVotingFinalizedEventObject {
  epochId: BigNumber;
  merkleRoot: string;
}
export type PChainStakeMirrorVotingFinalizedEvent = TypedEvent<
  [BigNumber, string],
  PChainStakeMirrorVotingFinalizedEventObject
>;

export type PChainStakeMirrorVotingFinalizedEventFilter =
  TypedEventFilter<PChainStakeMirrorVotingFinalizedEvent>;

export interface PChainStakeMirrorVotingResetEventObject {
  epochId: BigNumber;
}
export type PChainStakeMirrorVotingResetEvent = TypedEvent<
  [BigNumber],
  PChainStakeMirrorVotingResetEventObject
>;

export type PChainStakeMirrorVotingResetEventFilter =
  TypedEventFilter<PChainStakeMirrorVotingResetEvent>;

export interface PChainStakeMirrorVotingThresholdSetEventObject {
  votingThreshold: BigNumber;
}
export type PChainStakeMirrorVotingThresholdSetEvent = TypedEvent<
  [BigNumber],
  PChainStakeMirrorVotingThresholdSetEventObject
>;

export type PChainStakeMirrorVotingThresholdSetEventFilter =
  TypedEventFilter<PChainStakeMirrorVotingThresholdSetEvent>;

export interface IPChainStakeMirrorMultiSigVoting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPChainStakeMirrorMultiSigVotingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getCurrentEpochId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEpochConfiguration(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _firstEpochStartTs: BigNumber;
        _epochDurationSeconds: BigNumber;
      }
    >;

    getEpochId(
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMerkleRoot(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVoters(overrides?: CallOverrides): Promise<[string[]]>;

    getVotes(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IPChainStakeMirrorMultiSigVoting.PChainVotesStructOutput[]]>;

    getVotingThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    shouldVote(
      _epochId: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    submitValidatorUptimeVote(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _nodeIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitVote(
      _epochId: PromiseOrValue<BigNumberish>,
      _merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getCurrentEpochId(overrides?: CallOverrides): Promise<BigNumber>;

  getEpochConfiguration(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      _firstEpochStartTs: BigNumber;
      _epochDurationSeconds: BigNumber;
    }
  >;

  getEpochId(
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMerkleRoot(
    _epochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getVoters(overrides?: CallOverrides): Promise<string[]>;

  getVotes(
    _epochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IPChainStakeMirrorMultiSigVoting.PChainVotesStructOutput[]>;

  getVotingThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  shouldVote(
    _epochId: PromiseOrValue<BigNumberish>,
    _voter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  submitValidatorUptimeVote(
    _rewardEpochId: PromiseOrValue<BigNumberish>,
    _nodeIds: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitVote(
    _epochId: PromiseOrValue<BigNumberish>,
    _merkleRoot: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getCurrentEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    getEpochConfiguration(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _firstEpochStartTs: BigNumber;
        _epochDurationSeconds: BigNumber;
      }
    >;

    getEpochId(
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMerkleRoot(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getVoters(overrides?: CallOverrides): Promise<string[]>;

    getVotes(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IPChainStakeMirrorMultiSigVoting.PChainVotesStructOutput[]>;

    getVotingThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    shouldVote(
      _epochId: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    submitValidatorUptimeVote(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _nodeIds: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    submitVote(
      _epochId: PromiseOrValue<BigNumberish>,
      _merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PChainStakeMirrorValidatorUptimeVoteSubmitted(uint256,uint256,address,bytes20[])"(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      timestamp?: PromiseOrValue<BigNumberish> | null,
      voter?: null,
      nodeIds?: null
    ): PChainStakeMirrorValidatorUptimeVoteSubmittedEventFilter;
    PChainStakeMirrorValidatorUptimeVoteSubmitted(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      timestamp?: PromiseOrValue<BigNumberish> | null,
      voter?: null,
      nodeIds?: null
    ): PChainStakeMirrorValidatorUptimeVoteSubmittedEventFilter;

    "PChainStakeMirrorVoteSubmitted(uint256,address,bytes32)"(
      epochId?: null,
      voter?: null,
      merkleRoot?: null
    ): PChainStakeMirrorVoteSubmittedEventFilter;
    PChainStakeMirrorVoteSubmitted(
      epochId?: null,
      voter?: null,
      merkleRoot?: null
    ): PChainStakeMirrorVoteSubmittedEventFilter;

    "PChainStakeMirrorVotersSet(address[])"(
      voters?: null
    ): PChainStakeMirrorVotersSetEventFilter;
    PChainStakeMirrorVotersSet(
      voters?: null
    ): PChainStakeMirrorVotersSetEventFilter;

    "PChainStakeMirrorVotingFinalized(uint256,bytes32)"(
      epochId?: PromiseOrValue<BigNumberish> | null,
      merkleRoot?: null
    ): PChainStakeMirrorVotingFinalizedEventFilter;
    PChainStakeMirrorVotingFinalized(
      epochId?: PromiseOrValue<BigNumberish> | null,
      merkleRoot?: null
    ): PChainStakeMirrorVotingFinalizedEventFilter;

    "PChainStakeMirrorVotingReset(uint256)"(
      epochId?: null
    ): PChainStakeMirrorVotingResetEventFilter;
    PChainStakeMirrorVotingReset(
      epochId?: null
    ): PChainStakeMirrorVotingResetEventFilter;

    "PChainStakeMirrorVotingThresholdSet(uint256)"(
      votingThreshold?: null
    ): PChainStakeMirrorVotingThresholdSetEventFilter;
    PChainStakeMirrorVotingThresholdSet(
      votingThreshold?: null
    ): PChainStakeMirrorVotingThresholdSetEventFilter;
  };

  estimateGas: {
    getCurrentEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    getEpochConfiguration(overrides?: CallOverrides): Promise<BigNumber>;

    getEpochId(
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMerkleRoot(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoters(overrides?: CallOverrides): Promise<BigNumber>;

    getVotes(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    shouldVote(
      _epochId: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitValidatorUptimeVote(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _nodeIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitVote(
      _epochId: PromiseOrValue<BigNumberish>,
      _merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCurrentEpochId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEpochConfiguration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochId(
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMerkleRoot(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVotes(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotingThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shouldVote(
      _epochId: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitValidatorUptimeVote(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _nodeIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitVote(
      _epochId: PromiseOrValue<BigNumberish>,
      _merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

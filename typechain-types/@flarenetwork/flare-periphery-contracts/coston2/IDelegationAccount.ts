/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface IDelegationAccountInterface extends utils.Interface {
  functions: {};

  events: {
    "DelegateFtso(address,uint256)": EventFragment;
    "DelegateGovernance(address)": EventFragment;
    "ExecutorFeePaid(address,uint256)": EventFragment;
    "ExternalTokenTransferred(address,uint256)": EventFragment;
    "Initialize(address,address)": EventFragment;
    "RevokeFtso(address,uint256)": EventFragment;
    "UndelegateAllFtso()": EventFragment;
    "UndelegateGovernance()": EventFragment;
    "WithdrawToOwner(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelegateFtso"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateGovernance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutorFeePaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExternalTokenTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeFtso"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UndelegateAllFtso"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UndelegateGovernance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawToOwner"): EventFragment;
}

export interface DelegateFtsoEventObject {
  to: string;
  bips: BigNumber;
}
export type DelegateFtsoEvent = TypedEvent<
  [string, BigNumber],
  DelegateFtsoEventObject
>;

export type DelegateFtsoEventFilter = TypedEventFilter<DelegateFtsoEvent>;

export interface DelegateGovernanceEventObject {
  to: string;
}
export type DelegateGovernanceEvent = TypedEvent<
  [string],
  DelegateGovernanceEventObject
>;

export type DelegateGovernanceEventFilter =
  TypedEventFilter<DelegateGovernanceEvent>;

export interface ExecutorFeePaidEventObject {
  executor: string;
  amount: BigNumber;
}
export type ExecutorFeePaidEvent = TypedEvent<
  [string, BigNumber],
  ExecutorFeePaidEventObject
>;

export type ExecutorFeePaidEventFilter = TypedEventFilter<ExecutorFeePaidEvent>;

export interface ExternalTokenTransferredEventObject {
  token: string;
  amount: BigNumber;
}
export type ExternalTokenTransferredEvent = TypedEvent<
  [string, BigNumber],
  ExternalTokenTransferredEventObject
>;

export type ExternalTokenTransferredEventFilter =
  TypedEventFilter<ExternalTokenTransferredEvent>;

export interface InitializeEventObject {
  owner: string;
  manager: string;
}
export type InitializeEvent = TypedEvent<
  [string, string],
  InitializeEventObject
>;

export type InitializeEventFilter = TypedEventFilter<InitializeEvent>;

export interface RevokeFtsoEventObject {
  to: string;
  blockNumber: BigNumber;
}
export type RevokeFtsoEvent = TypedEvent<
  [string, BigNumber],
  RevokeFtsoEventObject
>;

export type RevokeFtsoEventFilter = TypedEventFilter<RevokeFtsoEvent>;

export interface UndelegateAllFtsoEventObject {}
export type UndelegateAllFtsoEvent = TypedEvent<
  [],
  UndelegateAllFtsoEventObject
>;

export type UndelegateAllFtsoEventFilter =
  TypedEventFilter<UndelegateAllFtsoEvent>;

export interface UndelegateGovernanceEventObject {}
export type UndelegateGovernanceEvent = TypedEvent<
  [],
  UndelegateGovernanceEventObject
>;

export type UndelegateGovernanceEventFilter =
  TypedEventFilter<UndelegateGovernanceEvent>;

export interface WithdrawToOwnerEventObject {
  amount: BigNumber;
}
export type WithdrawToOwnerEvent = TypedEvent<
  [BigNumber],
  WithdrawToOwnerEventObject
>;

export type WithdrawToOwnerEventFilter = TypedEventFilter<WithdrawToOwnerEvent>;

export interface IDelegationAccount extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDelegationAccountInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "DelegateFtso(address,uint256)"(
      to?: null,
      bips?: null
    ): DelegateFtsoEventFilter;
    DelegateFtso(to?: null, bips?: null): DelegateFtsoEventFilter;

    "DelegateGovernance(address)"(to?: null): DelegateGovernanceEventFilter;
    DelegateGovernance(to?: null): DelegateGovernanceEventFilter;

    "ExecutorFeePaid(address,uint256)"(
      executor?: null,
      amount?: null
    ): ExecutorFeePaidEventFilter;
    ExecutorFeePaid(executor?: null, amount?: null): ExecutorFeePaidEventFilter;

    "ExternalTokenTransferred(address,uint256)"(
      token?: null,
      amount?: null
    ): ExternalTokenTransferredEventFilter;
    ExternalTokenTransferred(
      token?: null,
      amount?: null
    ): ExternalTokenTransferredEventFilter;

    "Initialize(address,address)"(
      owner?: null,
      manager?: null
    ): InitializeEventFilter;
    Initialize(owner?: null, manager?: null): InitializeEventFilter;

    "RevokeFtso(address,uint256)"(
      to?: null,
      blockNumber?: null
    ): RevokeFtsoEventFilter;
    RevokeFtso(to?: null, blockNumber?: null): RevokeFtsoEventFilter;

    "UndelegateAllFtso()"(): UndelegateAllFtsoEventFilter;
    UndelegateAllFtso(): UndelegateAllFtsoEventFilter;

    "UndelegateGovernance()"(): UndelegateGovernanceEventFilter;
    UndelegateGovernance(): UndelegateGovernanceEventFilter;

    "WithdrawToOwner(uint256)"(amount?: null): WithdrawToOwnerEventFilter;
    WithdrawToOwner(amount?: null): WithdrawToOwnerEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface IRNatAccountInterface extends utils.Interface {
  functions: {
    "owner()": FunctionFragment;
    "rNat()": FunctionFragment;
    "receivedRewards()": FunctionFragment;
    "withdrawnRewards()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "owner"
      | "rNat"
      | "receivedRewards"
      | "withdrawnRewards"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "rNat", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receivedRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawnRewards",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rNat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receivedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawnRewards",
    data: BytesLike
  ): Result;

  events: {
    "ClaimExecutorsSet(address[])": EventFragment;
    "ExternalTokenTransferred(address,uint256)": EventFragment;
    "FundsWithdrawn(uint256,bool)": EventFragment;
    "Initialized(address,address)": EventFragment;
    "LockedAmountBurned(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimExecutorsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExternalTokenTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockedAmountBurned"): EventFragment;
}

export interface ClaimExecutorsSetEventObject {
  executors: string[];
}
export type ClaimExecutorsSetEvent = TypedEvent<
  [string[]],
  ClaimExecutorsSetEventObject
>;

export type ClaimExecutorsSetEventFilter =
  TypedEventFilter<ClaimExecutorsSetEvent>;

export interface ExternalTokenTransferredEventObject {
  token: string;
  amount: BigNumber;
}
export type ExternalTokenTransferredEvent = TypedEvent<
  [string, BigNumber],
  ExternalTokenTransferredEventObject
>;

export type ExternalTokenTransferredEventFilter =
  TypedEventFilter<ExternalTokenTransferredEvent>;

export interface FundsWithdrawnEventObject {
  amount: BigNumber;
  wrap: boolean;
}
export type FundsWithdrawnEvent = TypedEvent<
  [BigNumber, boolean],
  FundsWithdrawnEventObject
>;

export type FundsWithdrawnEventFilter = TypedEventFilter<FundsWithdrawnEvent>;

export interface InitializedEventObject {
  owner: string;
  rNat: string;
}
export type InitializedEvent = TypedEvent<
  [string, string],
  InitializedEventObject
>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LockedAmountBurnedEventObject {
  amount: BigNumber;
}
export type LockedAmountBurnedEvent = TypedEvent<
  [BigNumber],
  LockedAmountBurnedEventObject
>;

export type LockedAmountBurnedEventFilter =
  TypedEventFilter<LockedAmountBurnedEvent>;

export interface IRNatAccount extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRNatAccountInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    owner(overrides?: CallOverrides): Promise<[string]>;

    rNat(overrides?: CallOverrides): Promise<[string]>;

    receivedRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawnRewards(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  owner(overrides?: CallOverrides): Promise<string>;

  rNat(overrides?: CallOverrides): Promise<string>;

  receivedRewards(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawnRewards(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    owner(overrides?: CallOverrides): Promise<string>;

    rNat(overrides?: CallOverrides): Promise<string>;

    receivedRewards(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawnRewards(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ClaimExecutorsSet(address[])"(
      executors?: null
    ): ClaimExecutorsSetEventFilter;
    ClaimExecutorsSet(executors?: null): ClaimExecutorsSetEventFilter;

    "ExternalTokenTransferred(address,uint256)"(
      token?: null,
      amount?: null
    ): ExternalTokenTransferredEventFilter;
    ExternalTokenTransferred(
      token?: null,
      amount?: null
    ): ExternalTokenTransferredEventFilter;

    "FundsWithdrawn(uint256,bool)"(
      amount?: null,
      wrap?: null
    ): FundsWithdrawnEventFilter;
    FundsWithdrawn(amount?: null, wrap?: null): FundsWithdrawnEventFilter;

    "Initialized(address,address)"(
      owner?: null,
      rNat?: null
    ): InitializedEventFilter;
    Initialized(owner?: null, rNat?: null): InitializedEventFilter;

    "LockedAmountBurned(uint256)"(amount?: null): LockedAmountBurnedEventFilter;
    LockedAmountBurned(amount?: null): LockedAmountBurnedEventFilter;
  };

  estimateGas: {
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rNat(overrides?: CallOverrides): Promise<BigNumber>;

    receivedRewards(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawnRewards(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rNat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receivedRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawnRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

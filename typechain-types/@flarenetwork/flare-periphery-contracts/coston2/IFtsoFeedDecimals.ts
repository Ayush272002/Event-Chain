/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IFtsoFeedDecimalsInterface extends utils.Interface {
  functions: {
    "decimalsUpdateOffset()": FunctionFragment;
    "defaultDecimals()": FunctionFragment;
    "getCurrentDecimals(bytes21)": FunctionFragment;
    "getCurrentDecimalsBulk(bytes)": FunctionFragment;
    "getDecimals(bytes21,uint256)": FunctionFragment;
    "getDecimalsBulk(bytes,uint256)": FunctionFragment;
    "getScheduledDecimalsChanges(bytes21)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "decimalsUpdateOffset"
      | "defaultDecimals"
      | "getCurrentDecimals"
      | "getCurrentDecimalsBulk"
      | "getDecimals"
      | "getDecimalsBulk"
      | "getScheduledDecimalsChanges"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "decimalsUpdateOffset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentDecimals",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentDecimalsBulk",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecimals",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecimalsBulk",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getScheduledDecimalsChanges",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "decimalsUpdateOffset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentDecimalsBulk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecimalsBulk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScheduledDecimalsChanges",
    data: BytesLike
  ): Result;

  events: {
    "DecimalsChanged(bytes21,int8,uint24)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DecimalsChanged"): EventFragment;
}

export interface DecimalsChangedEventObject {
  feedId: string;
  decimals: number;
  rewardEpochId: number;
}
export type DecimalsChangedEvent = TypedEvent<
  [string, number, number],
  DecimalsChangedEventObject
>;

export type DecimalsChangedEventFilter = TypedEventFilter<DecimalsChangedEvent>;

export interface IFtsoFeedDecimals extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFtsoFeedDecimalsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    decimalsUpdateOffset(overrides?: CallOverrides): Promise<[number]>;

    defaultDecimals(overrides?: CallOverrides): Promise<[number]>;

    getCurrentDecimals(
      _feedId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getCurrentDecimalsBulk(
      _feedIds: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { _decimals: string }>;

    getDecimals(
      _feedId: PromiseOrValue<BytesLike>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getDecimalsBulk(
      _feedIds: PromiseOrValue<BytesLike>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { _decimals: string }>;

    getScheduledDecimalsChanges(
      _feedId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [number[], BigNumber[], boolean[]] & {
        _decimals: number[];
        _validFromEpochId: BigNumber[];
        _fixed: boolean[];
      }
    >;
  };

  decimalsUpdateOffset(overrides?: CallOverrides): Promise<number>;

  defaultDecimals(overrides?: CallOverrides): Promise<number>;

  getCurrentDecimals(
    _feedId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  getCurrentDecimalsBulk(
    _feedIds: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getDecimals(
    _feedId: PromiseOrValue<BytesLike>,
    _rewardEpochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getDecimalsBulk(
    _feedIds: PromiseOrValue<BytesLike>,
    _rewardEpochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getScheduledDecimalsChanges(
    _feedId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [number[], BigNumber[], boolean[]] & {
      _decimals: number[];
      _validFromEpochId: BigNumber[];
      _fixed: boolean[];
    }
  >;

  callStatic: {
    decimalsUpdateOffset(overrides?: CallOverrides): Promise<number>;

    defaultDecimals(overrides?: CallOverrides): Promise<number>;

    getCurrentDecimals(
      _feedId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    getCurrentDecimalsBulk(
      _feedIds: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getDecimals(
      _feedId: PromiseOrValue<BytesLike>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getDecimalsBulk(
      _feedIds: PromiseOrValue<BytesLike>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getScheduledDecimalsChanges(
      _feedId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [number[], BigNumber[], boolean[]] & {
        _decimals: number[];
        _validFromEpochId: BigNumber[];
        _fixed: boolean[];
      }
    >;
  };

  filters: {
    "DecimalsChanged(bytes21,int8,uint24)"(
      feedId?: PromiseOrValue<BytesLike> | null,
      decimals?: null,
      rewardEpochId?: null
    ): DecimalsChangedEventFilter;
    DecimalsChanged(
      feedId?: PromiseOrValue<BytesLike> | null,
      decimals?: null,
      rewardEpochId?: null
    ): DecimalsChangedEventFilter;
  };

  estimateGas: {
    decimalsUpdateOffset(overrides?: CallOverrides): Promise<BigNumber>;

    defaultDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentDecimals(
      _feedId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentDecimalsBulk(
      _feedIds: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDecimals(
      _feedId: PromiseOrValue<BytesLike>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDecimalsBulk(
      _feedIds: PromiseOrValue<BytesLike>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getScheduledDecimalsChanges(
      _feedId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decimalsUpdateOffset(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentDecimals(
      _feedId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentDecimalsBulk(
      _feedIds: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDecimals(
      _feedId: PromiseOrValue<BytesLike>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDecimalsBulk(
      _feedIds: PromiseOrValue<BytesLike>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getScheduledDecimalsChanges(
      _feedId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

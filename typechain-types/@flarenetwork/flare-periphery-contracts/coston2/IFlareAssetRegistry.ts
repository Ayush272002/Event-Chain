/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IFlareAssetRegistryInterface extends utils.Interface {
  functions: {
    "allAssetTypes()": FunctionFragment;
    "allAssets()": FunctionFragment;
    "allAssetsOfType(bytes32)": FunctionFragment;
    "allAssetsOfTypeWithSymbols(bytes32)": FunctionFragment;
    "allAssetsWithSymbols()": FunctionFragment;
    "assetBySymbol(string)": FunctionFragment;
    "assetType(address)": FunctionFragment;
    "getAttribute(address,bytes32)": FunctionFragment;
    "incentivePoolFor(address)": FunctionFragment;
    "isFlareAsset(address)": FunctionFragment;
    "maxDelegatesByPercent(address)": FunctionFragment;
    "supportsFtsoDelegation(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allAssetTypes"
      | "allAssets"
      | "allAssetsOfType"
      | "allAssetsOfTypeWithSymbols"
      | "allAssetsWithSymbols"
      | "assetBySymbol"
      | "assetType"
      | "getAttribute"
      | "incentivePoolFor"
      | "isFlareAsset"
      | "maxDelegatesByPercent"
      | "supportsFtsoDelegation"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allAssetTypes",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "allAssets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allAssetsOfType",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "allAssetsOfTypeWithSymbols",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "allAssetsWithSymbols",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetBySymbol",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetType",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttribute",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "incentivePoolFor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isFlareAsset",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxDelegatesByPercent",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsFtsoDelegation",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "allAssetTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allAssets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allAssetsOfType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allAssetsOfTypeWithSymbols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allAssetsWithSymbols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetBySymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assetType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incentivePoolFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFlareAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDelegatesByPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsFtsoDelegation",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IFlareAssetRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFlareAssetRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allAssetTypes(overrides?: CallOverrides): Promise<[string[]]>;

    allAssets(overrides?: CallOverrides): Promise<[string[]]>;

    allAssetsOfType(
      _assetType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    allAssetsOfTypeWithSymbols(
      _assetType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    allAssetsWithSymbols(
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    assetBySymbol(
      symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    assetType(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAttribute(
      token: PromiseOrValue<string>,
      nameHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { defined: boolean; value: string }>;

    incentivePoolFor(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isFlareAsset(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxDelegatesByPercent(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    supportsFtsoDelegation(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  allAssetTypes(overrides?: CallOverrides): Promise<string[]>;

  allAssets(overrides?: CallOverrides): Promise<string[]>;

  allAssetsOfType(
    _assetType: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  allAssetsOfTypeWithSymbols(
    _assetType: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string[], string[]]>;

  allAssetsWithSymbols(
    overrides?: CallOverrides
  ): Promise<[string[], string[]]>;

  assetBySymbol(
    symbol: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  assetType(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAttribute(
    token: PromiseOrValue<string>,
    nameHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { defined: boolean; value: string }>;

  incentivePoolFor(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  isFlareAsset(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxDelegatesByPercent(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supportsFtsoDelegation(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    allAssetTypes(overrides?: CallOverrides): Promise<string[]>;

    allAssets(overrides?: CallOverrides): Promise<string[]>;

    allAssetsOfType(
      _assetType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    allAssetsOfTypeWithSymbols(
      _assetType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    allAssetsWithSymbols(
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    assetBySymbol(
      symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    assetType(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAttribute(
      token: PromiseOrValue<string>,
      nameHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { defined: boolean; value: string }>;

    incentivePoolFor(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    isFlareAsset(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxDelegatesByPercent(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsFtsoDelegation(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    allAssetTypes(overrides?: CallOverrides): Promise<BigNumber>;

    allAssets(overrides?: CallOverrides): Promise<BigNumber>;

    allAssetsOfType(
      _assetType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allAssetsOfTypeWithSymbols(
      _assetType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allAssetsWithSymbols(overrides?: CallOverrides): Promise<BigNumber>;

    assetBySymbol(
      symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetType(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAttribute(
      token: PromiseOrValue<string>,
      nameHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incentivePoolFor(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFlareAsset(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxDelegatesByPercent(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsFtsoDelegation(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allAssetTypes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allAssetsOfType(
      _assetType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allAssetsOfTypeWithSymbols(
      _assetType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allAssetsWithSymbols(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetBySymbol(
      symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetType(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAttribute(
      token: PromiseOrValue<string>,
      nameHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incentivePoolFor(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFlareAsset(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxDelegatesByPercent(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsFtsoDelegation(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IFastUpdatesConfiguration {
  export type FeedConfigurationStruct = {
    feedId: PromiseOrValue<BytesLike>;
    rewardBandValue: PromiseOrValue<BigNumberish>;
    inflationShare: PromiseOrValue<BigNumberish>;
  };

  export type FeedConfigurationStructOutput = [string, number, number] & {
    feedId: string;
    rewardBandValue: number;
    inflationShare: number;
  };
}

export interface IFastUpdatesConfigurationInterface extends utils.Interface {
  functions: {
    "getFeedConfigurations()": FunctionFragment;
    "getFeedId(uint256)": FunctionFragment;
    "getFeedIds()": FunctionFragment;
    "getFeedIndex(bytes21)": FunctionFragment;
    "getNumberOfFeeds()": FunctionFragment;
    "getUnusedIndices()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getFeedConfigurations"
      | "getFeedId"
      | "getFeedIds"
      | "getFeedIndex"
      | "getNumberOfFeeds"
      | "getUnusedIndices"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getFeedConfigurations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeedId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeedIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeedIndex",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfFeeds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnusedIndices",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getFeedConfigurations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFeedId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFeedIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeedIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfFeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnusedIndices",
    data: BytesLike
  ): Result;

  events: {
    "FeedAdded(bytes21,uint32,uint24,uint256)": EventFragment;
    "FeedRemoved(bytes21,uint256)": EventFragment;
    "FeedUpdated(bytes21,uint32,uint24,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeedAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeedRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeedUpdated"): EventFragment;
}

export interface FeedAddedEventObject {
  feedId: string;
  rewardBandValue: number;
  inflationShare: number;
  index: BigNumber;
}
export type FeedAddedEvent = TypedEvent<
  [string, number, number, BigNumber],
  FeedAddedEventObject
>;

export type FeedAddedEventFilter = TypedEventFilter<FeedAddedEvent>;

export interface FeedRemovedEventObject {
  feedId: string;
  index: BigNumber;
}
export type FeedRemovedEvent = TypedEvent<
  [string, BigNumber],
  FeedRemovedEventObject
>;

export type FeedRemovedEventFilter = TypedEventFilter<FeedRemovedEvent>;

export interface FeedUpdatedEventObject {
  feedId: string;
  rewardBandValue: number;
  inflationShare: number;
  index: BigNumber;
}
export type FeedUpdatedEvent = TypedEvent<
  [string, number, number, BigNumber],
  FeedUpdatedEventObject
>;

export type FeedUpdatedEventFilter = TypedEventFilter<FeedUpdatedEvent>;

export interface IFastUpdatesConfiguration extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFastUpdatesConfigurationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getFeedConfigurations(
      overrides?: CallOverrides
    ): Promise<[IFastUpdatesConfiguration.FeedConfigurationStructOutput[]]>;

    getFeedId(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { _feedId: string }>;

    getFeedIds(overrides?: CallOverrides): Promise<[string[]]>;

    getFeedIndex(
      _feedId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _index: BigNumber }>;

    getNumberOfFeeds(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUnusedIndices(overrides?: CallOverrides): Promise<[BigNumber[]]>;
  };

  getFeedConfigurations(
    overrides?: CallOverrides
  ): Promise<IFastUpdatesConfiguration.FeedConfigurationStructOutput[]>;

  getFeedId(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getFeedIds(overrides?: CallOverrides): Promise<string[]>;

  getFeedIndex(
    _feedId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumberOfFeeds(overrides?: CallOverrides): Promise<BigNumber>;

  getUnusedIndices(overrides?: CallOverrides): Promise<BigNumber[]>;

  callStatic: {
    getFeedConfigurations(
      overrides?: CallOverrides
    ): Promise<IFastUpdatesConfiguration.FeedConfigurationStructOutput[]>;

    getFeedId(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getFeedIds(overrides?: CallOverrides): Promise<string[]>;

    getFeedIndex(
      _feedId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfFeeds(overrides?: CallOverrides): Promise<BigNumber>;

    getUnusedIndices(overrides?: CallOverrides): Promise<BigNumber[]>;
  };

  filters: {
    "FeedAdded(bytes21,uint32,uint24,uint256)"(
      feedId?: PromiseOrValue<BytesLike> | null,
      rewardBandValue?: null,
      inflationShare?: null,
      index?: null
    ): FeedAddedEventFilter;
    FeedAdded(
      feedId?: PromiseOrValue<BytesLike> | null,
      rewardBandValue?: null,
      inflationShare?: null,
      index?: null
    ): FeedAddedEventFilter;

    "FeedRemoved(bytes21,uint256)"(
      feedId?: PromiseOrValue<BytesLike> | null,
      index?: null
    ): FeedRemovedEventFilter;
    FeedRemoved(
      feedId?: PromiseOrValue<BytesLike> | null,
      index?: null
    ): FeedRemovedEventFilter;

    "FeedUpdated(bytes21,uint32,uint24,uint256)"(
      feedId?: PromiseOrValue<BytesLike> | null,
      rewardBandValue?: null,
      inflationShare?: null,
      index?: null
    ): FeedUpdatedEventFilter;
    FeedUpdated(
      feedId?: PromiseOrValue<BytesLike> | null,
      rewardBandValue?: null,
      inflationShare?: null,
      index?: null
    ): FeedUpdatedEventFilter;
  };

  estimateGas: {
    getFeedConfigurations(overrides?: CallOverrides): Promise<BigNumber>;

    getFeedId(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeedIds(overrides?: CallOverrides): Promise<BigNumber>;

    getFeedIndex(
      _feedId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfFeeds(overrides?: CallOverrides): Promise<BigNumber>;

    getUnusedIndices(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getFeedConfigurations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeedId(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeedIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeedIndex(
      _feedId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfFeeds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUnusedIndices(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IFlareSystemsManager {
  export type NumberOfWeightBasedClaimsStruct = {
    rewardManagerId: PromiseOrValue<BigNumberish>;
    noOfWeightBasedClaims: PromiseOrValue<BigNumberish>;
  };

  export type NumberOfWeightBasedClaimsStructOutput = [BigNumber, BigNumber] & {
    rewardManagerId: BigNumber;
    noOfWeightBasedClaims: BigNumber;
  };

  export type SignatureStruct = {
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
  };

  export type SignatureStructOutput = [number, string, string] & {
    v: number;
    r: string;
    s: string;
  };
}

export interface IFlareSystemsManagerInterface extends utils.Interface {
  functions: {
    "firstRewardEpochStartTs()": FunctionFragment;
    "firstVotingRoundStartTs()": FunctionFragment;
    "getCurrentRewardEpoch()": FunctionFragment;
    "getCurrentRewardEpochId()": FunctionFragment;
    "getCurrentVotingEpochId()": FunctionFragment;
    "getSeed(uint256)": FunctionFragment;
    "getStartVotingRoundId(uint256)": FunctionFragment;
    "getThreshold(uint256)": FunctionFragment;
    "getVotePowerBlock(uint256)": FunctionFragment;
    "getVoterRegistrationData(uint256)": FunctionFragment;
    "isVoterRegistrationEnabled()": FunctionFragment;
    "rewardEpochDurationSeconds()": FunctionFragment;
    "signNewSigningPolicy(uint24,bytes32,(uint8,bytes32,bytes32))": FunctionFragment;
    "signRewards(uint24,(uint256,uint256)[],bytes32,(uint8,bytes32,bytes32))": FunctionFragment;
    "signUptimeVote(uint24,bytes32,(uint8,bytes32,bytes32))": FunctionFragment;
    "submitUptimeVote(uint24,bytes20[],(uint8,bytes32,bytes32))": FunctionFragment;
    "votingEpochDurationSeconds()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "firstRewardEpochStartTs"
      | "firstVotingRoundStartTs"
      | "getCurrentRewardEpoch"
      | "getCurrentRewardEpochId"
      | "getCurrentVotingEpochId"
      | "getSeed"
      | "getStartVotingRoundId"
      | "getThreshold"
      | "getVotePowerBlock"
      | "getVoterRegistrationData"
      | "isVoterRegistrationEnabled"
      | "rewardEpochDurationSeconds"
      | "signNewSigningPolicy"
      | "signRewards"
      | "signUptimeVote"
      | "submitUptimeVote"
      | "votingEpochDurationSeconds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "firstRewardEpochStartTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "firstVotingRoundStartTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRewardEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRewardEpochId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentVotingEpochId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSeed",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStartVotingRoundId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getThreshold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotePowerBlock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterRegistrationData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isVoterRegistrationEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardEpochDurationSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signNewSigningPolicy",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      IFlareSystemsManager.SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signRewards",
    values: [
      PromiseOrValue<BigNumberish>,
      IFlareSystemsManager.NumberOfWeightBasedClaimsStruct[],
      PromiseOrValue<BytesLike>,
      IFlareSystemsManager.SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signUptimeVote",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      IFlareSystemsManager.SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitUptimeVote",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      IFlareSystemsManager.SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "votingEpochDurationSeconds",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "firstRewardEpochStartTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstVotingRoundStartTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRewardEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRewardEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentVotingEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStartVotingRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotePowerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterRegistrationData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVoterRegistrationEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardEpochDurationSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signNewSigningPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signUptimeVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitUptimeVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingEpochDurationSeconds",
    data: BytesLike
  ): Result;

  events: {
    "RandomAcquisitionStarted(uint24,uint64)": EventFragment;
    "RewardEpochStarted(uint24,uint32,uint64)": EventFragment;
    "RewardsSigned(uint24,address,address,bytes32,tuple[],uint64,bool)": EventFragment;
    "SignUptimeVoteEnabled(uint24,uint64)": EventFragment;
    "SigningPolicySigned(uint24,address,address,uint64,bool)": EventFragment;
    "UptimeVoteSigned(uint24,address,address,bytes32,uint64,bool)": EventFragment;
    "UptimeVoteSubmitted(uint24,address,address,bytes20[],uint64)": EventFragment;
    "VotePowerBlockSelected(uint24,uint64,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RandomAcquisitionStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardEpochStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsSigned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignUptimeVoteEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SigningPolicySigned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UptimeVoteSigned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UptimeVoteSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotePowerBlockSelected"): EventFragment;
}

export interface RandomAcquisitionStartedEventObject {
  rewardEpochId: number;
  timestamp: BigNumber;
}
export type RandomAcquisitionStartedEvent = TypedEvent<
  [number, BigNumber],
  RandomAcquisitionStartedEventObject
>;

export type RandomAcquisitionStartedEventFilter =
  TypedEventFilter<RandomAcquisitionStartedEvent>;

export interface RewardEpochStartedEventObject {
  rewardEpochId: number;
  startVotingRoundId: number;
  timestamp: BigNumber;
}
export type RewardEpochStartedEvent = TypedEvent<
  [number, number, BigNumber],
  RewardEpochStartedEventObject
>;

export type RewardEpochStartedEventFilter =
  TypedEventFilter<RewardEpochStartedEvent>;

export interface RewardsSignedEventObject {
  rewardEpochId: number;
  signingPolicyAddress: string;
  voter: string;
  rewardsHash: string;
  noOfWeightBasedClaims: IFlareSystemsManager.NumberOfWeightBasedClaimsStructOutput[];
  timestamp: BigNumber;
  thresholdReached: boolean;
}
export type RewardsSignedEvent = TypedEvent<
  [
    number,
    string,
    string,
    string,
    IFlareSystemsManager.NumberOfWeightBasedClaimsStructOutput[],
    BigNumber,
    boolean
  ],
  RewardsSignedEventObject
>;

export type RewardsSignedEventFilter = TypedEventFilter<RewardsSignedEvent>;

export interface SignUptimeVoteEnabledEventObject {
  rewardEpochId: number;
  timestamp: BigNumber;
}
export type SignUptimeVoteEnabledEvent = TypedEvent<
  [number, BigNumber],
  SignUptimeVoteEnabledEventObject
>;

export type SignUptimeVoteEnabledEventFilter =
  TypedEventFilter<SignUptimeVoteEnabledEvent>;

export interface SigningPolicySignedEventObject {
  rewardEpochId: number;
  signingPolicyAddress: string;
  voter: string;
  timestamp: BigNumber;
  thresholdReached: boolean;
}
export type SigningPolicySignedEvent = TypedEvent<
  [number, string, string, BigNumber, boolean],
  SigningPolicySignedEventObject
>;

export type SigningPolicySignedEventFilter =
  TypedEventFilter<SigningPolicySignedEvent>;

export interface UptimeVoteSignedEventObject {
  rewardEpochId: number;
  signingPolicyAddress: string;
  voter: string;
  uptimeVoteHash: string;
  timestamp: BigNumber;
  thresholdReached: boolean;
}
export type UptimeVoteSignedEvent = TypedEvent<
  [number, string, string, string, BigNumber, boolean],
  UptimeVoteSignedEventObject
>;

export type UptimeVoteSignedEventFilter =
  TypedEventFilter<UptimeVoteSignedEvent>;

export interface UptimeVoteSubmittedEventObject {
  rewardEpochId: number;
  signingPolicyAddress: string;
  voter: string;
  nodeIds: string[];
  timestamp: BigNumber;
}
export type UptimeVoteSubmittedEvent = TypedEvent<
  [number, string, string, string[], BigNumber],
  UptimeVoteSubmittedEventObject
>;

export type UptimeVoteSubmittedEventFilter =
  TypedEventFilter<UptimeVoteSubmittedEvent>;

export interface VotePowerBlockSelectedEventObject {
  rewardEpochId: number;
  votePowerBlock: BigNumber;
  timestamp: BigNumber;
}
export type VotePowerBlockSelectedEvent = TypedEvent<
  [number, BigNumber, BigNumber],
  VotePowerBlockSelectedEventObject
>;

export type VotePowerBlockSelectedEventFilter =
  TypedEventFilter<VotePowerBlockSelectedEvent>;

export interface IFlareSystemsManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFlareSystemsManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    firstRewardEpochStartTs(overrides?: CallOverrides): Promise<[BigNumber]>;

    firstVotingRoundStartTs(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentRewardEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentRewardEpochId(overrides?: CallOverrides): Promise<[number]>;

    getCurrentVotingEpochId(overrides?: CallOverrides): Promise<[number]>;

    getSeed(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStartVotingRoundId(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getThreshold(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getVotePowerBlock(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _votePowerBlock: BigNumber }>;

    getVoterRegistrationData(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { _votePowerBlock: BigNumber; _enabled: boolean }
    >;

    isVoterRegistrationEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    rewardEpochDurationSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    signNewSigningPolicy(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _newSigningPolicyHash: PromiseOrValue<BytesLike>,
      _signature: IFlareSystemsManager.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signRewards(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _noOfWeightBasedClaims: IFlareSystemsManager.NumberOfWeightBasedClaimsStruct[],
      _rewardsHash: PromiseOrValue<BytesLike>,
      _signature: IFlareSystemsManager.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signUptimeVote(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _uptimeVoteHash: PromiseOrValue<BytesLike>,
      _signature: IFlareSystemsManager.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitUptimeVote(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _nodeIds: PromiseOrValue<BytesLike>[],
      _signature: IFlareSystemsManager.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    votingEpochDurationSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  firstRewardEpochStartTs(overrides?: CallOverrides): Promise<BigNumber>;

  firstVotingRoundStartTs(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentRewardEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentRewardEpochId(overrides?: CallOverrides): Promise<number>;

  getCurrentVotingEpochId(overrides?: CallOverrides): Promise<number>;

  getSeed(
    _rewardEpochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStartVotingRoundId(
    _rewardEpochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getThreshold(
    _rewardEpochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getVotePowerBlock(
    _rewardEpochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVoterRegistrationData(
    _rewardEpochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean] & { _votePowerBlock: BigNumber; _enabled: boolean }
  >;

  isVoterRegistrationEnabled(overrides?: CallOverrides): Promise<boolean>;

  rewardEpochDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  signNewSigningPolicy(
    _rewardEpochId: PromiseOrValue<BigNumberish>,
    _newSigningPolicyHash: PromiseOrValue<BytesLike>,
    _signature: IFlareSystemsManager.SignatureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signRewards(
    _rewardEpochId: PromiseOrValue<BigNumberish>,
    _noOfWeightBasedClaims: IFlareSystemsManager.NumberOfWeightBasedClaimsStruct[],
    _rewardsHash: PromiseOrValue<BytesLike>,
    _signature: IFlareSystemsManager.SignatureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signUptimeVote(
    _rewardEpochId: PromiseOrValue<BigNumberish>,
    _uptimeVoteHash: PromiseOrValue<BytesLike>,
    _signature: IFlareSystemsManager.SignatureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitUptimeVote(
    _rewardEpochId: PromiseOrValue<BigNumberish>,
    _nodeIds: PromiseOrValue<BytesLike>[],
    _signature: IFlareSystemsManager.SignatureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  votingEpochDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    firstRewardEpochStartTs(overrides?: CallOverrides): Promise<BigNumber>;

    firstVotingRoundStartTs(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentRewardEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentRewardEpochId(overrides?: CallOverrides): Promise<number>;

    getCurrentVotingEpochId(overrides?: CallOverrides): Promise<number>;

    getSeed(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStartVotingRoundId(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getThreshold(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getVotePowerBlock(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterRegistrationData(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { _votePowerBlock: BigNumber; _enabled: boolean }
    >;

    isVoterRegistrationEnabled(overrides?: CallOverrides): Promise<boolean>;

    rewardEpochDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    signNewSigningPolicy(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _newSigningPolicyHash: PromiseOrValue<BytesLike>,
      _signature: IFlareSystemsManager.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    signRewards(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _noOfWeightBasedClaims: IFlareSystemsManager.NumberOfWeightBasedClaimsStruct[],
      _rewardsHash: PromiseOrValue<BytesLike>,
      _signature: IFlareSystemsManager.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    signUptimeVote(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _uptimeVoteHash: PromiseOrValue<BytesLike>,
      _signature: IFlareSystemsManager.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    submitUptimeVote(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _nodeIds: PromiseOrValue<BytesLike>[],
      _signature: IFlareSystemsManager.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    votingEpochDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "RandomAcquisitionStarted(uint24,uint64)"(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null
    ): RandomAcquisitionStartedEventFilter;
    RandomAcquisitionStarted(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null
    ): RandomAcquisitionStartedEventFilter;

    "RewardEpochStarted(uint24,uint32,uint64)"(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      startVotingRoundId?: null,
      timestamp?: null
    ): RewardEpochStartedEventFilter;
    RewardEpochStarted(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      startVotingRoundId?: null,
      timestamp?: null
    ): RewardEpochStartedEventFilter;

    "RewardsSigned(uint24,address,address,bytes32,tuple[],uint64,bool)"(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      signingPolicyAddress?: PromiseOrValue<string> | null,
      voter?: PromiseOrValue<string> | null,
      rewardsHash?: null,
      noOfWeightBasedClaims?: null,
      timestamp?: null,
      thresholdReached?: null
    ): RewardsSignedEventFilter;
    RewardsSigned(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      signingPolicyAddress?: PromiseOrValue<string> | null,
      voter?: PromiseOrValue<string> | null,
      rewardsHash?: null,
      noOfWeightBasedClaims?: null,
      timestamp?: null,
      thresholdReached?: null
    ): RewardsSignedEventFilter;

    "SignUptimeVoteEnabled(uint24,uint64)"(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null
    ): SignUptimeVoteEnabledEventFilter;
    SignUptimeVoteEnabled(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null
    ): SignUptimeVoteEnabledEventFilter;

    "SigningPolicySigned(uint24,address,address,uint64,bool)"(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      signingPolicyAddress?: PromiseOrValue<string> | null,
      voter?: PromiseOrValue<string> | null,
      timestamp?: null,
      thresholdReached?: null
    ): SigningPolicySignedEventFilter;
    SigningPolicySigned(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      signingPolicyAddress?: PromiseOrValue<string> | null,
      voter?: PromiseOrValue<string> | null,
      timestamp?: null,
      thresholdReached?: null
    ): SigningPolicySignedEventFilter;

    "UptimeVoteSigned(uint24,address,address,bytes32,uint64,bool)"(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      signingPolicyAddress?: PromiseOrValue<string> | null,
      voter?: PromiseOrValue<string> | null,
      uptimeVoteHash?: null,
      timestamp?: null,
      thresholdReached?: null
    ): UptimeVoteSignedEventFilter;
    UptimeVoteSigned(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      signingPolicyAddress?: PromiseOrValue<string> | null,
      voter?: PromiseOrValue<string> | null,
      uptimeVoteHash?: null,
      timestamp?: null,
      thresholdReached?: null
    ): UptimeVoteSignedEventFilter;

    "UptimeVoteSubmitted(uint24,address,address,bytes20[],uint64)"(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      signingPolicyAddress?: PromiseOrValue<string> | null,
      voter?: PromiseOrValue<string> | null,
      nodeIds?: null,
      timestamp?: null
    ): UptimeVoteSubmittedEventFilter;
    UptimeVoteSubmitted(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      signingPolicyAddress?: PromiseOrValue<string> | null,
      voter?: PromiseOrValue<string> | null,
      nodeIds?: null,
      timestamp?: null
    ): UptimeVoteSubmittedEventFilter;

    "VotePowerBlockSelected(uint24,uint64,uint64)"(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      votePowerBlock?: null,
      timestamp?: null
    ): VotePowerBlockSelectedEventFilter;
    VotePowerBlockSelected(
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      votePowerBlock?: null,
      timestamp?: null
    ): VotePowerBlockSelectedEventFilter;
  };

  estimateGas: {
    firstRewardEpochStartTs(overrides?: CallOverrides): Promise<BigNumber>;

    firstVotingRoundStartTs(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentRewardEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentRewardEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentVotingEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    getSeed(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStartVotingRoundId(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getThreshold(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotePowerBlock(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterRegistrationData(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVoterRegistrationEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    rewardEpochDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    signNewSigningPolicy(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _newSigningPolicyHash: PromiseOrValue<BytesLike>,
      _signature: IFlareSystemsManager.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signRewards(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _noOfWeightBasedClaims: IFlareSystemsManager.NumberOfWeightBasedClaimsStruct[],
      _rewardsHash: PromiseOrValue<BytesLike>,
      _signature: IFlareSystemsManager.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signUptimeVote(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _uptimeVoteHash: PromiseOrValue<BytesLike>,
      _signature: IFlareSystemsManager.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitUptimeVote(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _nodeIds: PromiseOrValue<BytesLike>[],
      _signature: IFlareSystemsManager.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    votingEpochDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    firstRewardEpochStartTs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    firstVotingRoundStartTs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentRewardEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentRewardEpochId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentVotingEpochId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSeed(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStartVotingRoundId(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getThreshold(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotePowerBlock(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterRegistrationData(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVoterRegistrationEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardEpochDurationSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signNewSigningPolicy(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _newSigningPolicyHash: PromiseOrValue<BytesLike>,
      _signature: IFlareSystemsManager.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signRewards(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _noOfWeightBasedClaims: IFlareSystemsManager.NumberOfWeightBasedClaimsStruct[],
      _rewardsHash: PromiseOrValue<BytesLike>,
      _signature: IFlareSystemsManager.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signUptimeVote(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _uptimeVoteHash: PromiseOrValue<BytesLike>,
      _signature: IFlareSystemsManager.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitUptimeVote(
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _nodeIds: PromiseOrValue<BytesLike>[],
      _signature: IFlareSystemsManager.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    votingEpochDurationSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IPChainVotePowerInterface extends utils.Interface {
  functions: {
    "batchVotePowerOfAt(bytes20[],uint256)": FunctionFragment;
    "stakesOf(address)": FunctionFragment;
    "stakesOfAt(address,uint256)": FunctionFragment;
    "totalVotePower()": FunctionFragment;
    "totalVotePowerAt(uint256)": FunctionFragment;
    "totalVotePowerAtCached(uint256)": FunctionFragment;
    "votePowerFromTo(address,bytes20)": FunctionFragment;
    "votePowerFromToAt(address,bytes20,uint256)": FunctionFragment;
    "votePowerOf(bytes20)": FunctionFragment;
    "votePowerOfAt(bytes20,uint256)": FunctionFragment;
    "votePowerOfAtCached(bytes20,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "batchVotePowerOfAt"
      | "stakesOf"
      | "stakesOfAt"
      | "totalVotePower"
      | "totalVotePowerAt"
      | "totalVotePowerAtCached"
      | "votePowerFromTo"
      | "votePowerFromToAt"
      | "votePowerOf"
      | "votePowerOfAt"
      | "votePowerOfAtCached"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batchVotePowerOfAt",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakesOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakesOfAt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotePower",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotePowerAt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotePowerAtCached",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerFromTo",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerFromToAt",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerOf",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerOfAt",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerOfAtCached",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchVotePowerOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakesOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakesOfAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalVotePower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVotePowerAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVotePowerAtCached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerFromTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerFromToAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerOfAtCached",
    data: BytesLike
  ): Result;

  events: {
    "VotePowerCacheCreated(bytes20,uint256)": EventFragment;
    "VotePowerChanged(address,bytes20,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "VotePowerCacheCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotePowerChanged"): EventFragment;
}

export interface VotePowerCacheCreatedEventObject {
  nodeId: string;
  blockNumber: BigNumber;
}
export type VotePowerCacheCreatedEvent = TypedEvent<
  [string, BigNumber],
  VotePowerCacheCreatedEventObject
>;

export type VotePowerCacheCreatedEventFilter =
  TypedEventFilter<VotePowerCacheCreatedEvent>;

export interface VotePowerChangedEventObject {
  owner: string;
  nodeId: string;
  priorVotePower: BigNumber;
  newVotePower: BigNumber;
}
export type VotePowerChangedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  VotePowerChangedEventObject
>;

export type VotePowerChangedEventFilter =
  TypedEventFilter<VotePowerChangedEvent>;

export interface IPChainVotePower extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPChainVotePowerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    batchVotePowerOfAt(
      _nodeIds: PromiseOrValue<BytesLike>[],
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    stakesOf(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _nodeIds: string[]; _amounts: BigNumber[] }
    >;

    stakesOfAt(
      _owner: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _nodeIds: string[]; _amounts: BigNumber[] }
    >;

    totalVotePower(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalVotePowerAt(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalVotePowerAtCached(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    votePowerFromTo(
      _owner: PromiseOrValue<string>,
      _nodeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    votePowerFromToAt(
      _owner: PromiseOrValue<string>,
      _nodeId: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    votePowerOf(
      _nodeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    votePowerOfAt(
      _nodeId: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    votePowerOfAtCached(
      _owner: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  batchVotePowerOfAt(
    _nodeIds: PromiseOrValue<BytesLike>[],
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  stakesOf(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { _nodeIds: string[]; _amounts: BigNumber[] }
  >;

  stakesOfAt(
    _owner: PromiseOrValue<string>,
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { _nodeIds: string[]; _amounts: BigNumber[] }
  >;

  totalVotePower(overrides?: CallOverrides): Promise<BigNumber>;

  totalVotePowerAt(
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalVotePowerAtCached(
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  votePowerFromTo(
    _owner: PromiseOrValue<string>,
    _nodeId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  votePowerFromToAt(
    _owner: PromiseOrValue<string>,
    _nodeId: PromiseOrValue<BytesLike>,
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  votePowerOf(
    _nodeId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  votePowerOfAt(
    _nodeId: PromiseOrValue<BytesLike>,
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  votePowerOfAtCached(
    _owner: PromiseOrValue<BytesLike>,
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    batchVotePowerOfAt(
      _nodeIds: PromiseOrValue<BytesLike>[],
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    stakesOf(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _nodeIds: string[]; _amounts: BigNumber[] }
    >;

    stakesOfAt(
      _owner: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _nodeIds: string[]; _amounts: BigNumber[] }
    >;

    totalVotePower(overrides?: CallOverrides): Promise<BigNumber>;

    totalVotePowerAt(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalVotePowerAtCached(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePowerFromTo(
      _owner: PromiseOrValue<string>,
      _nodeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePowerFromToAt(
      _owner: PromiseOrValue<string>,
      _nodeId: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePowerOf(
      _nodeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePowerOfAt(
      _nodeId: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePowerOfAtCached(
      _owner: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "VotePowerCacheCreated(bytes20,uint256)"(
      nodeId?: null,
      blockNumber?: null
    ): VotePowerCacheCreatedEventFilter;
    VotePowerCacheCreated(
      nodeId?: null,
      blockNumber?: null
    ): VotePowerCacheCreatedEventFilter;

    "VotePowerChanged(address,bytes20,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      nodeId?: PromiseOrValue<BytesLike> | null,
      priorVotePower?: null,
      newVotePower?: null
    ): VotePowerChangedEventFilter;
    VotePowerChanged(
      owner?: PromiseOrValue<string> | null,
      nodeId?: PromiseOrValue<BytesLike> | null,
      priorVotePower?: null,
      newVotePower?: null
    ): VotePowerChangedEventFilter;
  };

  estimateGas: {
    batchVotePowerOfAt(
      _nodeIds: PromiseOrValue<BytesLike>[],
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakesOf(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakesOfAt(
      _owner: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalVotePower(overrides?: CallOverrides): Promise<BigNumber>;

    totalVotePowerAt(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalVotePowerAtCached(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    votePowerFromTo(
      _owner: PromiseOrValue<string>,
      _nodeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePowerFromToAt(
      _owner: PromiseOrValue<string>,
      _nodeId: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePowerOf(
      _nodeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePowerOfAt(
      _nodeId: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePowerOfAtCached(
      _owner: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchVotePowerOfAt(
      _nodeIds: PromiseOrValue<BytesLike>[],
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakesOf(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakesOfAt(
      _owner: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalVotePower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalVotePowerAt(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalVotePowerAtCached(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    votePowerFromTo(
      _owner: PromiseOrValue<string>,
      _nodeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votePowerFromToAt(
      _owner: PromiseOrValue<string>,
      _nodeId: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votePowerOf(
      _nodeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votePowerOfAt(
      _nodeId: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votePowerOfAtCached(
      _owner: PromiseOrValue<BytesLike>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

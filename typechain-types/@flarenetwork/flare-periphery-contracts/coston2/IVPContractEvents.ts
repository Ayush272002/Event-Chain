/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IVPContractEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "Delegate(address,address,uint256,uint256)": EventFragment;
    "Revoke(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Delegate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revoke"): EventFragment;
}

export interface DelegateEventObject {
  from: string;
  to: string;
  priorVotePower: BigNumber;
  newVotePower: BigNumber;
}
export type DelegateEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DelegateEventObject
>;

export type DelegateEventFilter = TypedEventFilter<DelegateEvent>;

export interface RevokeEventObject {
  delegator: string;
  delegatee: string;
  votePower: BigNumber;
  blockNumber: BigNumber;
}
export type RevokeEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  RevokeEventObject
>;

export type RevokeEventFilter = TypedEventFilter<RevokeEvent>;

export interface IVPContractEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVPContractEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "Delegate(address,address,uint256,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      priorVotePower?: null,
      newVotePower?: null
    ): DelegateEventFilter;
    Delegate(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      priorVotePower?: null,
      newVotePower?: null
    ): DelegateEventFilter;

    "Revoke(address,address,uint256,uint256)"(
      delegator?: PromiseOrValue<string> | null,
      delegatee?: PromiseOrValue<string> | null,
      votePower?: null,
      blockNumber?: null
    ): RevokeEventFilter;
    Revoke(
      delegator?: PromiseOrValue<string> | null,
      delegatee?: PromiseOrValue<string> | null,
      votePower?: null,
      blockNumber?: null
    ): RevokeEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace RewardsV2Interface {
  export type RewardClaimStruct = {
    rewardEpochId: PromiseOrValue<BigNumberish>;
    beneficiary: PromiseOrValue<BytesLike>;
    amount: PromiseOrValue<BigNumberish>;
    claimType: PromiseOrValue<BigNumberish>;
  };

  export type RewardClaimStructOutput = [number, string, BigNumber, number] & {
    rewardEpochId: number;
    beneficiary: string;
    amount: BigNumber;
    claimType: number;
  };

  export type RewardClaimWithProofStruct = {
    merkleProof: PromiseOrValue<BytesLike>[];
    body: RewardsV2Interface.RewardClaimStruct;
  };

  export type RewardClaimWithProofStructOutput = [
    string[],
    RewardsV2Interface.RewardClaimStructOutput
  ] & {
    merkleProof: string[];
    body: RewardsV2Interface.RewardClaimStructOutput;
  };

  export type RewardStateStruct = {
    rewardEpochId: PromiseOrValue<BigNumberish>;
    beneficiary: PromiseOrValue<BytesLike>;
    amount: PromiseOrValue<BigNumberish>;
    claimType: PromiseOrValue<BigNumberish>;
    initialised: PromiseOrValue<boolean>;
  };

  export type RewardStateStructOutput = [
    number,
    string,
    BigNumber,
    number,
    boolean
  ] & {
    rewardEpochId: number;
    beneficiary: string;
    amount: BigNumber;
    claimType: number;
    initialised: boolean;
  };
}

export interface RewardsV2InterfaceInterface extends utils.Interface {
  functions: {
    "active()": FunctionFragment;
    "claim(address,address,uint24,bool,(bytes32[],(uint24,bytes20,uint120,uint8))[])": FunctionFragment;
    "getNextClaimableRewardEpochId(address)": FunctionFragment;
    "getRewardEpochIdsWithClaimableRewards()": FunctionFragment;
    "getStateOfRewards(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "active"
      | "claim"
      | "getNextClaimableRewardEpochId"
      | "getRewardEpochIdsWithClaimableRewards"
      | "getStateOfRewards"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "active", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      RewardsV2Interface.RewardClaimWithProofStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextClaimableRewardEpochId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardEpochIdsWithClaimableRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStateOfRewards",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "active", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNextClaimableRewardEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardEpochIdsWithClaimableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateOfRewards",
    data: BytesLike
  ): Result;

  events: {};
}

export interface RewardsV2Interface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RewardsV2InterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    active(overrides?: CallOverrides): Promise<[boolean]>;

    claim(
      _rewardOwner: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _wrap: PromiseOrValue<boolean>,
      _proofs: RewardsV2Interface.RewardClaimWithProofStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getNextClaimableRewardEpochId(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRewardEpochIdsWithClaimableRewards(
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { _startEpochId: number; _endEpochId: number }
    >;

    getStateOfRewards(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [RewardsV2Interface.RewardStateStructOutput[][]] & {
        _rewardStates: RewardsV2Interface.RewardStateStructOutput[][];
      }
    >;
  };

  active(overrides?: CallOverrides): Promise<boolean>;

  claim(
    _rewardOwner: PromiseOrValue<string>,
    _recipient: PromiseOrValue<string>,
    _rewardEpochId: PromiseOrValue<BigNumberish>,
    _wrap: PromiseOrValue<boolean>,
    _proofs: RewardsV2Interface.RewardClaimWithProofStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getNextClaimableRewardEpochId(
    _rewardOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardEpochIdsWithClaimableRewards(
    overrides?: CallOverrides
  ): Promise<[number, number] & { _startEpochId: number; _endEpochId: number }>;

  getStateOfRewards(
    _rewardOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<RewardsV2Interface.RewardStateStructOutput[][]>;

  callStatic: {
    active(overrides?: CallOverrides): Promise<boolean>;

    claim(
      _rewardOwner: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _wrap: PromiseOrValue<boolean>,
      _proofs: RewardsV2Interface.RewardClaimWithProofStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextClaimableRewardEpochId(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardEpochIdsWithClaimableRewards(
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { _startEpochId: number; _endEpochId: number }
    >;

    getStateOfRewards(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<RewardsV2Interface.RewardStateStructOutput[][]>;
  };

  filters: {};

  estimateGas: {
    active(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      _rewardOwner: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _wrap: PromiseOrValue<boolean>,
      _proofs: RewardsV2Interface.RewardClaimWithProofStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getNextClaimableRewardEpochId(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardEpochIdsWithClaimableRewards(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStateOfRewards(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    active(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      _rewardOwner: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _rewardEpochId: PromiseOrValue<BigNumberish>,
      _wrap: PromiseOrValue<boolean>,
      _proofs: RewardsV2Interface.RewardClaimWithProofStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getNextClaimableRewardEpochId(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardEpochIdsWithClaimableRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStateOfRewards(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

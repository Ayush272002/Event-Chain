/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IVoterWhitelisterInterface extends utils.Interface {
  functions: {
    "chilledUntilRewardEpoch(address)": FunctionFragment;
    "defaultMaxVotersForFtso()": FunctionFragment;
    "getFtsoWhitelistedPriceProviders(uint256)": FunctionFragment;
    "getFtsoWhitelistedPriceProvidersBySymbol(string)": FunctionFragment;
    "maxVotersForFtso(uint256)": FunctionFragment;
    "requestFullVoterWhitelisting(address)": FunctionFragment;
    "requestWhitelistingVoter(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "chilledUntilRewardEpoch"
      | "defaultMaxVotersForFtso"
      | "getFtsoWhitelistedPriceProviders"
      | "getFtsoWhitelistedPriceProvidersBySymbol"
      | "maxVotersForFtso"
      | "requestFullVoterWhitelisting"
      | "requestWhitelistingVoter"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "chilledUntilRewardEpoch",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultMaxVotersForFtso",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFtsoWhitelistedPriceProviders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFtsoWhitelistedPriceProvidersBySymbol",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxVotersForFtso",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestFullVoterWhitelisting",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWhitelistingVoter",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "chilledUntilRewardEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultMaxVotersForFtso",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFtsoWhitelistedPriceProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFtsoWhitelistedPriceProvidersBySymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxVotersForFtso",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestFullVoterWhitelisting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWhitelistingVoter",
    data: BytesLike
  ): Result;

  events: {
    "VoterChilled(address,uint256)": EventFragment;
    "VoterRemovedFromWhitelist(address,uint256)": EventFragment;
    "VoterWhitelisted(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "VoterChilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoterRemovedFromWhitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoterWhitelisted"): EventFragment;
}

export interface VoterChilledEventObject {
  voter: string;
  untilRewardEpoch: BigNumber;
}
export type VoterChilledEvent = TypedEvent<
  [string, BigNumber],
  VoterChilledEventObject
>;

export type VoterChilledEventFilter = TypedEventFilter<VoterChilledEvent>;

export interface VoterRemovedFromWhitelistEventObject {
  voter: string;
  ftsoIndex: BigNumber;
}
export type VoterRemovedFromWhitelistEvent = TypedEvent<
  [string, BigNumber],
  VoterRemovedFromWhitelistEventObject
>;

export type VoterRemovedFromWhitelistEventFilter =
  TypedEventFilter<VoterRemovedFromWhitelistEvent>;

export interface VoterWhitelistedEventObject {
  voter: string;
  ftsoIndex: BigNumber;
}
export type VoterWhitelistedEvent = TypedEvent<
  [string, BigNumber],
  VoterWhitelistedEventObject
>;

export type VoterWhitelistedEventFilter =
  TypedEventFilter<VoterWhitelistedEvent>;

export interface IVoterWhitelister extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVoterWhitelisterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    chilledUntilRewardEpoch(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    defaultMaxVotersForFtso(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFtsoWhitelistedPriceProviders(
      _ftsoIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getFtsoWhitelistedPriceProvidersBySymbol(
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    maxVotersForFtso(
      _ftsoIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    requestFullVoterWhitelisting(
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestWhitelistingVoter(
      _voter: PromiseOrValue<string>,
      _ftsoIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  chilledUntilRewardEpoch(
    _voter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  defaultMaxVotersForFtso(overrides?: CallOverrides): Promise<BigNumber>;

  getFtsoWhitelistedPriceProviders(
    _ftsoIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getFtsoWhitelistedPriceProvidersBySymbol(
    _symbol: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  maxVotersForFtso(
    _ftsoIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  requestFullVoterWhitelisting(
    _voter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestWhitelistingVoter(
    _voter: PromiseOrValue<string>,
    _ftsoIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    chilledUntilRewardEpoch(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultMaxVotersForFtso(overrides?: CallOverrides): Promise<BigNumber>;

    getFtsoWhitelistedPriceProviders(
      _ftsoIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getFtsoWhitelistedPriceProvidersBySymbol(
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    maxVotersForFtso(
      _ftsoIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestFullVoterWhitelisting(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], boolean[]] & {
        _supportedIndices: BigNumber[];
        _success: boolean[];
      }
    >;

    requestWhitelistingVoter(
      _voter: PromiseOrValue<string>,
      _ftsoIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "VoterChilled(address,uint256)"(
      voter?: null,
      untilRewardEpoch?: null
    ): VoterChilledEventFilter;
    VoterChilled(
      voter?: null,
      untilRewardEpoch?: null
    ): VoterChilledEventFilter;

    "VoterRemovedFromWhitelist(address,uint256)"(
      voter?: null,
      ftsoIndex?: null
    ): VoterRemovedFromWhitelistEventFilter;
    VoterRemovedFromWhitelist(
      voter?: null,
      ftsoIndex?: null
    ): VoterRemovedFromWhitelistEventFilter;

    "VoterWhitelisted(address,uint256)"(
      voter?: null,
      ftsoIndex?: null
    ): VoterWhitelistedEventFilter;
    VoterWhitelisted(
      voter?: null,
      ftsoIndex?: null
    ): VoterWhitelistedEventFilter;
  };

  estimateGas: {
    chilledUntilRewardEpoch(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultMaxVotersForFtso(overrides?: CallOverrides): Promise<BigNumber>;

    getFtsoWhitelistedPriceProviders(
      _ftsoIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFtsoWhitelistedPriceProvidersBySymbol(
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxVotersForFtso(
      _ftsoIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestFullVoterWhitelisting(
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestWhitelistingVoter(
      _voter: PromiseOrValue<string>,
      _ftsoIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    chilledUntilRewardEpoch(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultMaxVotersForFtso(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFtsoWhitelistedPriceProviders(
      _ftsoIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFtsoWhitelistedPriceProvidersBySymbol(
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxVotersForFtso(
      _ftsoIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestFullVoterWhitelisting(
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestWhitelistingVoter(
      _voter: PromiseOrValue<string>,
      _ftsoIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

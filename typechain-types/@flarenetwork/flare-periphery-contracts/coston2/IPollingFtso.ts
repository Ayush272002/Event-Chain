/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IPollingFtsoInterface extends utils.Interface {
  functions: {
    "canPropose(address)": FunctionFragment;
    "canVote(address,uint256)": FunctionFragment;
    "cancel(uint256)": FunctionFragment;
    "castVote(uint256,uint8)": FunctionFragment;
    "getLastProposal()": FunctionFragment;
    "getProposalDescription(uint256)": FunctionFragment;
    "getProposalInfo(uint256)": FunctionFragment;
    "getProposalVotes(uint256)": FunctionFragment;
    "hasVoted(uint256,address)": FunctionFragment;
    "propose(string)": FunctionFragment;
    "setParameters(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setProxyVoter(address)": FunctionFragment;
    "state(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "canPropose"
      | "canVote"
      | "cancel"
      | "castVote"
      | "getLastProposal"
      | "getProposalDescription"
      | "getProposalInfo"
      | "getProposalVotes"
      | "hasVoted"
      | "propose"
      | "setParameters"
      | "setProxyVoter"
      | "state"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "canPropose",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "canVote",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastProposal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalDescription",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalVotes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setParameters",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setProxyVoter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "state",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "canPropose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLastProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProxyVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;

  events: {
    "FtsoProposalCreated(uint256,uint256,address,string,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "MaintainerSet(address)": EventFragment;
    "ParametersSet(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "ProposalCanceled(uint256)": EventFragment;
    "ProxyVoterSet(address,address)": EventFragment;
    "VoteCast(address,uint256,uint8,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FtsoProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaintainerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParametersSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyVoterSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
}

export interface FtsoProposalCreatedEventObject {
  proposalId: BigNumber;
  rewardEpochId: BigNumber;
  proposer: string;
  description: string;
  voteStartTime: BigNumber;
  voteEndTime: BigNumber;
  threshold: BigNumber;
  majorityConditionBIPS: BigNumber;
  totalWeight: BigNumber;
}
export type FtsoProposalCreatedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  FtsoProposalCreatedEventObject
>;

export type FtsoProposalCreatedEventFilter =
  TypedEventFilter<FtsoProposalCreatedEvent>;

export interface MaintainerSetEventObject {
  newMaintainer: string;
}
export type MaintainerSetEvent = TypedEvent<[string], MaintainerSetEventObject>;

export type MaintainerSetEventFilter = TypedEventFilter<MaintainerSetEvent>;

export interface ParametersSetEventObject {
  votingDelaySeconds: BigNumber;
  votingPeriodSeconds: BigNumber;
  thresholdConditionBIPS: BigNumber;
  majorityConditionBIPS: BigNumber;
  proposalFeeValueWei: BigNumber;
}
export type ParametersSetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  ParametersSetEventObject
>;

export type ParametersSetEventFilter = TypedEventFilter<ParametersSetEvent>;

export interface ProposalCanceledEventObject {
  proposalId: BigNumber;
}
export type ProposalCanceledEvent = TypedEvent<
  [BigNumber],
  ProposalCanceledEventObject
>;

export type ProposalCanceledEventFilter =
  TypedEventFilter<ProposalCanceledEvent>;

export interface ProxyVoterSetEventObject {
  account: string;
  proxyVoter: string;
}
export type ProxyVoterSetEvent = TypedEvent<
  [string, string],
  ProxyVoterSetEventObject
>;

export type ProxyVoterSetEventFilter = TypedEventFilter<ProxyVoterSetEvent>;

export interface VoteCastEventObject {
  voter: string;
  proposalId: BigNumber;
  support: number;
  forVotePower: BigNumber;
  againstVotePower: BigNumber;
}
export type VoteCastEvent = TypedEvent<
  [string, BigNumber, number, BigNumber, BigNumber],
  VoteCastEventObject
>;

export type VoteCastEventFilter = TypedEventFilter<VoteCastEvent>;

export interface IPollingFtso extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPollingFtsoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canPropose(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canVote(
      _account: PromiseOrValue<string>,
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cancel(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    castVote(
      _proposalId: PromiseOrValue<BigNumberish>,
      _support: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getLastProposal(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { _proposalId: BigNumber; _description: string }
    >;

    getProposalDescription(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { _description: string }>;

    getProposalInfo(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        _rewardEpochId: BigNumber;
        _description: string;
        _proposer: string;
        _voteStartTime: BigNumber;
        _voteEndTime: BigNumber;
        _thresholdConditionBIPS: BigNumber;
        _majorityConditionBIPS: BigNumber;
        _totalWeight: BigNumber;
      }
    >;

    getProposalVotes(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _for: BigNumber; _against: BigNumber }
    >;

    hasVoted(
      _proposalId: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    propose(
      _description: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setParameters(
      _votingDelaySeconds: PromiseOrValue<BigNumberish>,
      _votingPeriodSeconds: PromiseOrValue<BigNumberish>,
      _thresholdConditionBIPS: PromiseOrValue<BigNumberish>,
      _majorityConditionBIPS: PromiseOrValue<BigNumberish>,
      _proposalFeeValueWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProxyVoter(
      _proxyVoter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    state(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;
  };

  canPropose(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canVote(
    _account: PromiseOrValue<string>,
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  cancel(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  castVote(
    _proposalId: PromiseOrValue<BigNumberish>,
    _support: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getLastProposal(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string] & { _proposalId: BigNumber; _description: string }
  >;

  getProposalDescription(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getProposalInfo(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      _rewardEpochId: BigNumber;
      _description: string;
      _proposer: string;
      _voteStartTime: BigNumber;
      _voteEndTime: BigNumber;
      _thresholdConditionBIPS: BigNumber;
      _majorityConditionBIPS: BigNumber;
      _totalWeight: BigNumber;
    }
  >;

  getProposalVotes(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { _for: BigNumber; _against: BigNumber }>;

  hasVoted(
    _proposalId: PromiseOrValue<BigNumberish>,
    _voter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  propose(
    _description: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setParameters(
    _votingDelaySeconds: PromiseOrValue<BigNumberish>,
    _votingPeriodSeconds: PromiseOrValue<BigNumberish>,
    _thresholdConditionBIPS: PromiseOrValue<BigNumberish>,
    _majorityConditionBIPS: PromiseOrValue<BigNumberish>,
    _proposalFeeValueWei: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProxyVoter(
    _proxyVoter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  state(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    canPropose(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canVote(
      _account: PromiseOrValue<string>,
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancel(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    castVote(
      _proposalId: PromiseOrValue<BigNumberish>,
      _support: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getLastProposal(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { _proposalId: BigNumber; _description: string }
    >;

    getProposalDescription(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getProposalInfo(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        _rewardEpochId: BigNumber;
        _description: string;
        _proposer: string;
        _voteStartTime: BigNumber;
        _voteEndTime: BigNumber;
        _thresholdConditionBIPS: BigNumber;
        _majorityConditionBIPS: BigNumber;
        _totalWeight: BigNumber;
      }
    >;

    getProposalVotes(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _for: BigNumber; _against: BigNumber }
    >;

    hasVoted(
      _proposalId: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    propose(
      _description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setParameters(
      _votingDelaySeconds: PromiseOrValue<BigNumberish>,
      _votingPeriodSeconds: PromiseOrValue<BigNumberish>,
      _thresholdConditionBIPS: PromiseOrValue<BigNumberish>,
      _majorityConditionBIPS: PromiseOrValue<BigNumberish>,
      _proposalFeeValueWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProxyVoter(
      _proxyVoter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    state(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {
    "FtsoProposalCreated(uint256,uint256,address,string,uint256,uint256,uint256,uint256,uint256)"(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      proposer?: null,
      description?: null,
      voteStartTime?: null,
      voteEndTime?: null,
      threshold?: null,
      majorityConditionBIPS?: null,
      totalWeight?: null
    ): FtsoProposalCreatedEventFilter;
    FtsoProposalCreated(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      rewardEpochId?: PromiseOrValue<BigNumberish> | null,
      proposer?: null,
      description?: null,
      voteStartTime?: null,
      voteEndTime?: null,
      threshold?: null,
      majorityConditionBIPS?: null,
      totalWeight?: null
    ): FtsoProposalCreatedEventFilter;

    "MaintainerSet(address)"(newMaintainer?: null): MaintainerSetEventFilter;
    MaintainerSet(newMaintainer?: null): MaintainerSetEventFilter;

    "ParametersSet(uint256,uint256,uint256,uint256,uint256)"(
      votingDelaySeconds?: null,
      votingPeriodSeconds?: null,
      thresholdConditionBIPS?: null,
      majorityConditionBIPS?: null,
      proposalFeeValueWei?: null
    ): ParametersSetEventFilter;
    ParametersSet(
      votingDelaySeconds?: null,
      votingPeriodSeconds?: null,
      thresholdConditionBIPS?: null,
      majorityConditionBIPS?: null,
      proposalFeeValueWei?: null
    ): ParametersSetEventFilter;

    "ProposalCanceled(uint256)"(
      proposalId?: PromiseOrValue<BigNumberish> | null
    ): ProposalCanceledEventFilter;
    ProposalCanceled(
      proposalId?: PromiseOrValue<BigNumberish> | null
    ): ProposalCanceledEventFilter;

    "ProxyVoterSet(address,address)"(
      account?: null,
      proxyVoter?: null
    ): ProxyVoterSetEventFilter;
    ProxyVoterSet(account?: null, proxyVoter?: null): ProxyVoterSetEventFilter;

    "VoteCast(address,uint256,uint8,uint256,uint256)"(
      voter?: PromiseOrValue<string> | null,
      proposalId?: PromiseOrValue<BigNumberish> | null,
      support?: null,
      forVotePower?: null,
      againstVotePower?: null
    ): VoteCastEventFilter;
    VoteCast(
      voter?: PromiseOrValue<string> | null,
      proposalId?: PromiseOrValue<BigNumberish> | null,
      support?: null,
      forVotePower?: null,
      againstVotePower?: null
    ): VoteCastEventFilter;
  };

  estimateGas: {
    canPropose(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canVote(
      _account: PromiseOrValue<string>,
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancel(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    castVote(
      _proposalId: PromiseOrValue<BigNumberish>,
      _support: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getLastProposal(overrides?: CallOverrides): Promise<BigNumber>;

    getProposalDescription(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalInfo(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalVotes(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasVoted(
      _proposalId: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propose(
      _description: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setParameters(
      _votingDelaySeconds: PromiseOrValue<BigNumberish>,
      _votingPeriodSeconds: PromiseOrValue<BigNumberish>,
      _thresholdConditionBIPS: PromiseOrValue<BigNumberish>,
      _majorityConditionBIPS: PromiseOrValue<BigNumberish>,
      _proposalFeeValueWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProxyVoter(
      _proxyVoter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    state(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canPropose(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canVote(
      _account: PromiseOrValue<string>,
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancel(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    castVote(
      _proposalId: PromiseOrValue<BigNumberish>,
      _support: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getLastProposal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProposalDescription(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalInfo(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalVotes(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasVoted(
      _proposalId: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propose(
      _description: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setParameters(
      _votingDelaySeconds: PromiseOrValue<BigNumberish>,
      _votingPeriodSeconds: PromiseOrValue<BigNumberish>,
      _thresholdConditionBIPS: PromiseOrValue<BigNumberish>,
      _majorityConditionBIPS: PromiseOrValue<BigNumberish>,
      _proposalFeeValueWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProxyVoter(
      _proxyVoter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    state(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
